{"commit":{"sha":"6ed6f1461dd0d89c85a334f8d8ce7957611f2dfe","date":"2019-04-17T13:26:29+00:00"},"benchmarks":{"cargo":{"Ok":{"runs":[{"stats":{"stats":[null,28027110110.0,79684.0,null,33908553785.0,425400.0,7153.894882,null,7.195102499,7153.88777]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,33886287471.0,117916.0,null,41437476022.0,576228.0,8652.070994,null,8.670179354,8652.074319]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,9185371693.0,109484.0,null,11708181536.0,538484.0,2443.771133,null,2.3714245,2443.770345]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,10474608997.0,111155.0,null,13203262938.0,552392.0,2800.708876,null,2.737283071,2800.709181]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,173447325827.0,409227.0,null,180840390831.0,1610224.0,45889.630103,null,18.925320846,45889.670359]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,196938735940.0,419657.0,null,206544672844.0,1504172.0,52142.869969,null,21.947877092,52142.973295]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,15658898105.0,214305.0,null,19033300625.0,1160296.0,4340.4508,null,4.238373664,4340.245941]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,54922069055.0,319012.0,null,59541702223.0,1506676.0,14769.936981,null,7.733507997,14769.839576]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,807479826912.0,436127.0,null,630647707739.0,1339180.0,213921.515551,null,38.399098614,213921.678598]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,970580609410.0,445546.0,null,752650173467.0,1329188.0,257455.052484,null,42.995732045,257455.586917]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,12854130319.0,215695.0,null,14850960430.0,1007820.0,3595.386364,null,3.294790088,3595.172006]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,575332785413.0,384260.0,null,456311204735.0,1343056.0,152820.354201,null,24.48221272,152820.671331]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"cargo"}},"clap-rs":{"Ok":{"runs":[{"stats":{"stats":[null,14356878124.0,46000.0,null,18754882073.0,255684.0,3658.289449,null,3.696158232,3658.279513]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,24343226690.0,96586.0,null,39440308382.0,446532.0,6247.708541,null,6.283266174,6247.717753]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,6277920498.0,181931.0,null,10213396530.0,811532.0,1805.163646,null,1.801196702,1805.173781]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,9448772014.0,183910.0,null,13980880328.0,825924.0,2595.279127,null,2.599300332,2595.290006]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,58799827228.0,245493.0,null,71470627400.0,982684.0,15405.031185,null,9.252797103,15405.036861]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,78730896341.0,236118.0,null,96382556470.0,965644.0,20647.384472,null,11.852516815,20647.425473]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,8586688049.0,222429.0,null,12990343665.0,1006824.0,2471.329756,null,2.423955218,2471.238224]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,42585622482.0,341619.0,null,51163703955.0,1422512.0,11361.365135,null,7.556526765,11361.328434]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,208383748361.0,146113.0,null,202840557743.0,483140.0,54200.727357,null,25.717036231,54200.767476]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,240051418293.0,202133.0,null,232510572815.0,657576.0,62725.018031,null,26.809455205,62725.166332]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,8407379470.0,205306.0,null,12811926963.0,915064.0,2381.685548,null,2.331198467,2381.610847]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,130397915306.0,275793.0,null,126343152381.0,1171352.0,34401.592344,null,13.359366243,34401.636957]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"clap-rs"}},"coercions":{"Ok":{"runs":[{"stats":{"stats":[null,2951709759.0,27428.0,null,5395019441.0,186204.0,775.11729,null,0.793785072,775.116773]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3775317282.0,28940.0,null,7129378933.0,192460.0,985.986512,null,1.004042148,985.994332]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,923450945.0,23486.0,null,1731905886.0,160000.0,265.810175,null,0.302450672,265.809124]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1008850964.0,23780.0,null,1883531163.0,175916.0,288.193766,null,0.306101703,288.191692]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,3783259548.0,31588.0,null,7153655764.0,204624.0,999.339865,null,1.016991269,999.338191]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add static arr item","path":"1-add-static-arr-item.patch"}}},{"stats":{"stats":[null,4149782777.0,56679.0,null,7240615003.0,279428.0,1136.313791,null,1.159021371,1136.313798]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,4960353727.0,57374.0,null,8967309641.0,283832.0,1342.229639,null,1.319698358,1342.221862]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1227891171.0,33012.0,null,2232552497.0,178272.0,382.77593,null,0.415433276,382.756128]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2206946115.0,55093.0,null,3797851132.0,276280.0,653.610114,null,0.585550506,653.594537]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4940656762.0,61675.0,null,8974792806.0,290652.0,1352.258186,null,1.302392114,1352.253268]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add static arr item","path":"1-add-static-arr-item.patch"}}},{"stats":{"stats":[null,3463445065.0,35665.0,null,6189093376.0,210556.0,927.660946,null,0.950559224,927.672155]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,4290304061.0,37314.0,null,7891288578.0,217144.0,1140.077207,null,1.141514912,1140.074491]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1115440558.0,30277.0,null,2041883770.0,178252.0,335.860757,null,0.366778948,335.857315]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1503172242.0,32546.0,null,2639646577.0,201128.0,437.598362,null,0.429105098,437.594487]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4303420752.0,40536.0,null,7879687955.0,220688.0,1148.182001,null,1.139940096,1148.187734]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"add static arr item","path":"1-add-static-arr-item.patch"}}}],"name":"coercions"}},"cranelift-codegen":{"Ok":{"runs":[{"stats":{"stats":[null,23498660348.0,107193.0,null,30050591817.0,511704.0,6019.423654,null,6.058724481,6019.440959]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,27939759802.0,128650.0,null,36394432062.0,598136.0,7202.636165,null,7.240874866,7202.638787]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,5422982556.0,86840.0,null,7002911235.0,436212.0,1495.401359,null,1.47159851,1495.39748]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,59733899359.0,173543.0,null,69192291273.0,768964.0,15639.09283,null,9.191162559,15639.10206]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,71581662713.0,188930.0,null,85833457127.0,825940.0,18792.300798,null,11.350482362,18792.427215]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,8670599101.0,150708.0,null,12014911113.0,735364.0,2453.925893,null,2.366792174,2453.81285]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,266785591271.0,281433.0,null,226585176671.0,1175796.0,70346.675807,null,20.185910184,70346.716379]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,317543120939.0,291053.0,null,261732791516.0,1079008.0,84149.273349,null,21.034766183,84149.496545]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,8566328008.0,145897.0,null,11875253073.0,731864.0,2431.346682,null,2.308843659,2431.202852]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"cranelift-codegen"}},"crates.io":{"Ok":{"runs":[{"stats":{"stats":[null,24690229654.0,65393.0,null,32300787176.0,378856.0,6280.852776,null,6.313045708,6280.872018]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,29790857492.0,105305.0,null,38676882124.0,539200.0,7615.318164,null,7.664314654,7615.320552]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,7040102003.0,103940.0,null,9024205917.0,528540.0,1927.657938,null,1.853511439,1927.655072]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,7943816943.0,104655.0,null,9987569069.0,539356.0,2134.518468,null,2.058308305,2134.516545]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,108119442506.0,264590.0,null,116264689626.0,1179608.0,28569.974475,null,12.843097652,28569.984724]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,118657779450.0,268424.0,null,130525579810.0,1200084.0,31345.221656,null,14.936343202,31345.370116]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,11339871788.0,162726.0,null,14043307377.0,916804.0,3158.516714,null,2.99154231,3158.296692]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,15970873454.0,181703.0,null,19288613514.0,992928.0,4364.992024,null,3.736115143,4364.821001]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,436237501664.0,236282.0,null,350882806570.0,957396.0,115309.180203,null,23.675754894,115309.337059]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,496632218578.0,269803.0,null,395163019681.0,1069728.0,131578.305001,null,25.546060524,131578.546369]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,11482942138.0,162924.0,null,13709697640.0,809524.0,3170.994789,null,2.948815938,3170.77665]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,58504141022.0,202193.0,null,58680511799.0,954936.0,15556.225184,null,6.138877733,15556.120696]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"crates.io"}},"ctfe-stress-2":{"Ok":{"runs":[{"stats":{"stats":[null,31090451011.0,42948.0,null,68176658214.0,254784.0,7844.996547,null,7.869370225,7844.994235]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,38860673333.0,107755.0,null,91567653063.0,504756.0,9914.136158,null,9.949738936,9914.133311]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2598749030.0,121445.0,null,5652624468.0,554324.0,864.602719,null,0.897452999,864.600696]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,31125702871.0,43270.0,null,67998445234.0,255196.0,7854.927471,null,7.88764017,7854.935068]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,42108187453.0,176526.0,null,100866701103.0,764048.0,10805.89907,null,10.838632566,10805.921337]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3976202149.0,233200.0,null,8397474503.0,980008.0,1349.184392,null,1.38239648,1349.190487]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,25396846777.0,43401.0,null,55162263658.0,254120.0,6419.306322,null,6.45588478,6419.292559]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,35988509723.0,188919.0,null,87266233329.0,738392.0,9295.836574,null,9.326400552,9295.843579]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,3974901717.0,233143.0,null,8396155217.0,979460.0,1346.693836,null,1.382027836,1346.692128]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"ctfe-stress-2"}},"deep-vector":{"Ok":{"runs":[{"stats":{"stats":[null,4208557989.0,54896.0,null,7001197942.0,299732.0,1114.618092,null,1.167703083,1114.617976]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,4618655671.0,53817.0,null,7971511952.0,296212.0,1223.995947,null,1.259559907,1223.984791]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1298930345.0,33594.0,null,2511928341.0,199876.0,364.975926,null,0.400544378,364.984623]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,4580138967.0,53225.0,null,7985897754.0,296456.0,1207.521328,null,1.225215398,1207.520333]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4555777510.0,52105.0,null,7991458793.0,292328.0,1212.430755,null,1.249811912,1212.429643]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add vec item","path":"1-add-vec-item.patch"}}},{"stats":{"stats":[null,6321714656.0,81880.0,null,10137612077.0,384408.0,1702.983943,null,1.709231498,1702.983884]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,6900468995.0,82399.0,null,11540650497.0,389420.0,1851.124825,null,1.831111967,1851.115515]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1708883872.0,42852.0,null,3205303049.0,225444.0,499.974933,null,0.530665387,499.944853]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,6863367971.0,82531.0,null,11562701024.0,389292.0,1844.732521,null,1.800138437,1844.732811]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,6870241771.0,84501.0,null,11546132832.0,394912.0,1846.239718,null,1.819808757,1846.280973]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add vec item","path":"1-add-vec-item.patch"}}},{"stats":{"stats":[null,11872402680.0,140643.0,null,17191944696.0,595364.0,3143.867087,null,3.137881075,3143.871274]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,12467791628.0,145570.0,null,18597249678.0,608752.0,3324.107134,null,3.289792433,3324.076264]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1629526536.0,41997.0,null,3156108437.0,225440.0,477.621357,null,0.507426283,477.622424]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,12369987905.0,142113.0,null,18516795345.0,601684.0,3276.317725,null,3.224469109,3276.330464]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,12366617433.0,141865.0,null,18539301646.0,599408.0,3271.769507,null,3.234170456,3271.742906]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"add vec item","path":"1-add-vec-item.patch"}}}],"name":"deep-vector"}},"deeply-nested":{"Ok":{"runs":[{"stats":{"stats":[null,271744435.0,5824.0,null,428865901.0,112088.0,81.71741,null,0.099609143,81.715816]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,314916444.0,7205.0,null,487431229.0,119424.0,95.37506,null,0.113507578,95.373186]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,120485427.0,6040.0,null,179228183.0,92252.0,43.359773,null,0.060323319,43.356106]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,575435258.0,8679.0,null,775330522.0,130320.0,166.957602,null,0.155764498,166.948879]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,637080939.0,10256.0,null,849235656.0,137184.0,185.47415,null,0.171726158,185.477951]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,190144096.0,7529.0,null,270355089.0,112344.0,65.718579,null,0.080925561,65.704351]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,896813800.0,7790.0,null,1277574329.0,128888.0,246.856901,null,0.203956878,246.863332]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,958339079.0,9328.0,null,1350001138.0,135452.0,263.369703,null,0.219070557,263.384244]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,185117875.0,7379.0,null,267881292.0,111264.0,62.593182,null,0.078911579,62.589282]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"deeply-nested"}},"encoding":{"Ok":{"runs":[{"stats":{"stats":[null,1586965134.0,12237.0,null,1908730419.0,143940.0,420.20873,null,0.438222637,420.207683]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,2041489298.0,18745.0,null,2444950052.0,171348.0,543.174891,null,0.561262123,543.173632]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,607146182.0,18287.0,null,858957943.0,162724.0,182.123082,null,0.191159626,182.120521]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,675919123.0,18258.0,null,925456884.0,169008.0,199.375574,null,0.207294106,199.385103]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,6937073861.0,30717.0,null,7701059021.0,226736.0,1852.367262,null,0.911292457,1852.34751]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,8553365001.0,36827.0,null,9449162424.0,249496.0,2308.394955,null,1.132695217,2308.4531]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,872742494.0,22918.0,null,1182038295.0,188200.0,275.812437,null,0.267049338,275.751152]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,955910177.0,23567.0,null,1288207469.0,196104.0,301.11601,null,0.312506078,301.045221]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,20068720612.0,33897.0,null,18180903451.0,238220.0,5324.033126,null,1.451648316,5324.027174]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,22276351949.0,39587.0,null,20231919478.0,260868.0,5937.386337,null,1.635495563,5937.388304]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,877839569.0,23013.0,null,1193795881.0,187812.0,269.741091,null,0.262977489,269.728725]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1314731285.0,24282.0,null,1691498019.0,200812.0,381.714708,null,0.373056621,381.693757]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"encoding"}},"futures":{"Ok":{"runs":[{"stats":{"stats":[null,2912673802.0,11851.0,null,3995156477.0,141048.0,752.771942,null,0.770947193,752.770904]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3536415417.0,19054.0,null,4693933296.0,170612.0,918.506379,null,0.936424484,918.495988]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,683571303.0,18654.0,null,937528024.0,162460.0,202.247975,null,0.20893064,202.247064]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,693203703.0,18654.0,null,948095513.0,162292.0,205.155682,null,0.212641618,205.155364]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4119375285.0,15833.0,null,5240530671.0,164616.0,1078.852152,null,0.910511847,1078.827743]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,5024316436.0,23868.0,null,6225056209.0,195912.0,1327.218906,null,1.116474928,1327.245836]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,823455213.0,21708.0,null,1113567030.0,180168.0,252.287236,null,0.266644134,252.266767]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,834991707.0,21722.0,null,1125877785.0,180548.0,253.545041,null,0.251920622,253.49692]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,6089760763.0,17877.0,null,6604445005.0,173340.0,1606.753177,null,0.974945207,1606.730721]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,7183437398.0,25238.0,null,7657897734.0,202152.0,1902.546253,null,1.174418166,1902.554809]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,814418333.0,21689.0,null,1107346835.0,179488.0,245.272764,null,0.26212392,245.265265]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,831064521.0,21717.0,null,1119110017.0,180056.0,250.049869,null,0.249289046,250.033537]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"futures"}},"helloworld":{"Ok":{"runs":[{"stats":{"stats":[null,129052900.0,4935.0,null,191725056.0,100236.0,45.019499,null,0.063480716,45.018113]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,147443752.0,6142.0,null,216314410.0,105708.0,51.148484,null,0.069116117,51.145502]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,116706483.0,5572.0,null,169126516.0,90344.0,42.22115,null,0.0599194,42.228073]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,143643248.0,6242.0,null,209917506.0,106120.0,50.230408,null,0.067879611,50.22706]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,357676969.0,12045.0,null,522739892.0,119600.0,123.92483,null,0.132610979,123.916982]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,393963994.0,13488.0,null,570726874.0,125352.0,134.872409,null,0.141793565,134.876208]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,315902559.0,12728.0,null,473315035.0,108564.0,113.94689,null,0.127671584,113.931617]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,384516234.0,13795.0,null,550477084.0,126428.0,133.879266,null,0.139810084,133.891765]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,374564405.0,11948.0,null,549152743.0,121388.0,127.334498,null,0.135705449,127.351172]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,409039814.0,13387.0,null,596608712.0,127204.0,138.346279,null,0.145160889,138.351018]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,309859229.0,12496.0,null,470955812.0,108620.0,110.668494,null,0.125950042,110.663827]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,398122194.0,13644.0,null,577349911.0,128544.0,135.210781,null,0.141223712,135.197062]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"helloworld"}},"html5ever":{"Ok":{"runs":[{"stats":{"stats":[null,6323639554.0,35693.0,null,9339754964.0,229152.0,1632.591722,null,1.685258357,1632.581578]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,7742704804.0,42538.0,null,11828794742.0,259660.0,2000.048205,null,2.059521368,2000.046685]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2276821544.0,37147.0,null,3972365737.0,237680.0,626.792361,null,0.630336015,626.792163]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2681772657.0,38361.0,null,4490297927.0,248436.0,726.685442,null,0.730608324,726.686433]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,10048711883.0,49749.0,null,13391433345.0,296224.0,2625.377928,null,2.094644688,2625.346223]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,11926777676.0,62668.0,null,16662855495.0,346256.0,3145.28763,null,2.525103121,3145.32911]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2695622721.0,48280.0,null,4508288636.0,295560.0,764.809698,null,0.749149644,764.744369]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,3150281392.0,49670.0,null,5065415701.0,306392.0,882.506879,null,0.864120769,882.459486]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,26994640632.0,78912.0,null,27071271687.0,388288.0,7170.746797,null,2.791743573,7170.738867]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27714259555.0,70382.0,null,28178830473.0,373916.0,7341.190084,null,3.014193634,7341.199299]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2793902180.0,50602.0,null,4625813085.0,301740.0,785.597217,null,0.754941879,785.561796]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,3358129945.0,52199.0,null,5306929762.0,315804.0,932.404697,null,0.869350521,932.359943]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"html5ever"}},"hyper":{"Ok":{"runs":[{"stats":{"stats":[null,4314624399.0,21330.0,null,4735651133.0,180100.0,1119.780026,null,1.140827593,1119.770063]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,5484671013.0,34434.0,null,6060256695.0,233076.0,1427.919724,null,1.463318122,1427.917946]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1523587241.0,33380.0,null,1915015717.0,222120.0,435.832498,null,0.445174086,435.840915]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1622865628.0,34095.0,null,2001953194.0,231952.0,457.968386,null,0.452626225,457.967975]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,16477508008.0,50899.0,null,17255019352.0,309240.0,4346.381193,null,2.247554342,4346.369119]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,20023444133.0,63720.0,null,20576597128.0,363636.0,5326.224468,null,2.745854391,5326.266438]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2387223485.0,46418.0,null,2873314602.0,298660.0,708.056216,null,0.6791613,707.956503]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2511938223.0,47327.0,null,2998112324.0,308596.0,743.732494,null,0.691656505,743.625178]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,59241120332.0,49174.0,null,47039614769.0,297144.0,15663.717652,null,3.453488883,15663.778389]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,69214846727.0,63639.0,null,55083687413.0,346040.0,18396.995674,null,4.061624835,18397.045368]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2457757825.0,48106.0,null,2938584424.0,289212.0,721.397791,null,0.685674148,721.291111]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,6491462413.0,54649.0,null,6933043035.0,322212.0,1774.960096,null,1.212170219,1774.893974]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"hyper"}},"inflate":{"Ok":{"runs":[{"stats":{"stats":[null,6060736706.0,29051.0,null,12110159814.0,181940.0,1555.817091,null,1.590091682,1555.805922]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,6476536189.0,31281.0,null,12837532088.0,192692.0,1663.848759,null,1.698685813,1663.846145]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,537542916.0,13367.0,null,828576753.0,133596.0,158.215034,null,0.188249186,158.213801]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,6373400184.0,33519.0,null,12714740441.0,201176.0,1639.770756,null,1.652917443,1639.770753]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,9887693764.0,56915.0,null,16636443337.0,294196.0,2567.098733,null,2.380121917,2567.104191]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,10671888713.0,58230.0,null,17830589404.0,300108.0,2781.68045,null,2.50740558,2781.681832]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,730527723.0,18201.0,null,1149602184.0,159332.0,221.395174,null,0.243433627,221.355303]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,10563323418.0,58463.0,null,17641702670.0,301944.0,2757.819686,null,2.462188147,2757.82228]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,32304804819.0,71325.0,null,51766281721.0,328284.0,8236.667535,null,8.002278939,8236.621851]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,33022046381.0,75246.0,null,52956217226.0,339772.0,8398.953294,null,8.100203146,8398.965734]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,714182516.0,17499.0,null,1122968915.0,155892.0,212.795385,null,0.239240788,212.775957]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,31222703346.0,76197.0,null,50658714710.0,350380.0,7949.347806,null,7.924926246,7949.330334]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"inflate"}},"issue-46449":{"Ok":{"runs":[{"stats":{"stats":[null,232130020.0,6135.0,null,346431331.0,116052.0,72.780915,null,0.090648258,72.780133]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,286738370.0,7865.0,null,418506408.0,123748.0,88.427083,null,0.106283609,88.425332]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,171516037.0,7591.0,null,257904147.0,109888.0,58.736067,null,0.075607752,58.733427]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,261287496.0,8222.0,null,382201369.0,126296.0,82.554823,null,0.099568402,82.552556]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"io error 6144","path":"0-io-error-6144.patch"}}},{"stats":{"stats":[null,263629960.0,8208.0,null,381297561.0,126084.0,83.19466,null,0.100091409,83.192731]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"u32 3072","path":"1-u32-3072.patch"}}},{"stats":{"stats":[null,235981637.0,8209.0,null,344218975.0,125832.0,75.96847,null,0.092887702,75.964821]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"u8 3072","path":"2-u8-3072.patch"}}},{"stats":{"stats":[null,264675445.0,8212.0,null,381584674.0,125828.0,84.027587,null,0.100943392,84.034379]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"empty 3072","path":"3-empty-3072.patch"}}},{"stats":{"stats":[null,266767483.0,8209.0,null,383299101.0,126132.0,84.150857,null,0.101229811,84.147555]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"static str 6144","path":"4-static-str-6144.patch"}}},{"stats":{"stats":[null,807272682.0,10080.0,null,958078164.0,139624.0,234.44683,null,0.148946125,234.453428]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,902216226.0,11770.0,null,1085996039.0,146572.0,261.648651,null,0.170216548,261.640927]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,229868040.0,8734.0,null,320457428.0,122316.0,79.869929,null,0.092333145,79.867058]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,883983980.0,12233.0,null,1027956507.0,149296.0,259.675543,null,0.161031929,259.678547]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"io error 6144","path":"0-io-error-6144.patch"}}},{"stats":{"stats":[null,813144856.0,12220.0,null,957943619.0,148764.0,239.922948,null,0.15156746,239.915789]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"u32 3072","path":"1-u32-3072.patch"}}},{"stats":{"stats":[null,787843605.0,12275.0,null,909681072.0,148672.0,233.234389,null,0.14106036,233.233993]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"u8 3072","path":"2-u8-3072.patch"}}},{"stats":{"stats":[null,824393912.0,12241.0,null,959926507.0,148632.0,243.320678,null,0.151360767,243.340852]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"empty 3072","path":"3-empty-3072.patch"}}},{"stats":{"stats":[null,820855071.0,12125.0,null,965503947.0,148612.0,241.989914,null,0.152266636,241.982016]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"static str 6144","path":"4-static-str-6144.patch"}}},{"stats":{"stats":[null,2334748662.0,11736.0,null,2299161403.0,146652.0,636.220503,null,0.26898737,636.184797]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,2486903957.0,13730.0,null,2433261019.0,154612.0,680.031879,null,0.289140322,680.023168]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,228098422.0,8705.0,null,322073619.0,120804.0,77.554534,null,0.090795561,77.541708]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,2400537753.0,13996.0,null,2361388188.0,156176.0,655.318247,null,0.302560188,655.329877]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"io error 6144","path":"0-io-error-6144.patch"}}},{"stats":{"stats":[null,1413079946.0,13181.0,null,1425512092.0,152824.0,400.000483,null,0.188207894,400.001544]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"u32 3072","path":"1-u32-3072.patch"}}},{"stats":{"stats":[null,1292080856.0,12977.0,null,1325250271.0,151584.0,368.657064,null,0.180108373,368.656731]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":2,"name":"u8 3072","path":"2-u8-3072.patch"}}},{"stats":{"stats":[null,1304078558.0,12987.0,null,1357888969.0,152188.0,371.144953,null,0.188405708,371.155062]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":3,"name":"empty 3072","path":"3-empty-3072.patch"}}},{"stats":{"stats":[null,1334784582.0,12966.0,null,1365925943.0,152480.0,378.293847,null,0.189600121,378.295496]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":4,"name":"static str 6144","path":"4-static-str-6144.patch"}}}],"name":"issue-46449"}},"keccak":{"Ok":{"runs":[{"stats":{"stats":[null,20593447144.0,140682.0,null,40665080043.0,500348.0,5298.324408,null,5.316610703,5298.32529]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,22229138081.0,147812.0,null,43143661771.0,524016.0,5716.874007,null,5.751572768,5716.875284]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1678904512.0,34022.0,null,2010871506.0,201724.0,468.276241,null,0.485380063,468.275968]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,28895042260.0,336588.0,null,51478475983.0,1089112.0,7557.981359,null,7.551615458,7557.961727]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,30569475141.0,337190.0,null,54780181504.0,1247724.0,8002.721037,null,7.959509817,8002.741551]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1998558775.0,42466.0,null,2721579548.0,240972.0,567.843637,null,0.583694883,567.831588]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,26052929090.0,281062.0,null,51899832363.0,1002000.0,6791.522475,null,6.840449496,6791.522344]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27908736014.0,286592.0,null,55096920927.0,1043704.0,7269.776708,null,7.23428829,7269.802422]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1999185367.0,43596.0,null,2659836587.0,242952.0,560.583709,null,0.573050437,560.582371]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"keccak"}},"packed-simd":{"Err":"ErrorMessage { msg: \"expected success, got exit code: 101\\n\\nstderr=    Checking cfg-if v0.1.6\\n    Checking packed_simd v0.3.0 (/tmp/.tmpw9k3iE)\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:5:1\\n    |\\n5   | / impl_const_p!(\\n6   | |     [*const T; 2]: cptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n7   | |     /// A vector with 2 `*const T` lanes\\n8   | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:10:1\\n    |\\n10  | / impl_mut_p!(\\n11  | |     [*mut T; 2]: mptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n12  | |     /// A vector with 2 `*mut T` lanes\\n13  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:15:1\\n    |\\n15  | / impl_const_p!(\\n16  | |     [*const T; 4]: cptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n17  | |     /// A vector with 4 `*const T` lanes\\n18  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:20:1\\n    |\\n20  | / impl_mut_p!(\\n21  | |     [*mut T; 4]: mptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n22  | |     /// A vector with 4 `*mut T` lanes\\n23  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:25:1\\n    |\\n25  | / impl_const_p!(\\n26  | |     [*const T; 8]: cptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n27  | |     /// A vector with 8 `*const T` lanes\\n28  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:30:1\\n    |\\n30  | / impl_mut_p!(\\n31  | |     [*mut T; 8]: mptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n32  | |     /// A vector with 8 `*mut T` lanes\\n33  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:5:1\\n    |\\n5   | / impl_const_p!(\\n6   | |     [*const T; 2]: cptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n7   | |     /// A vector with 2 `*const T` lanes\\n8   | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:10:1\\n    |\\n10  | / impl_mut_p!(\\n11  | |     [*mut T; 2]: mptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n12  | |     /// A vector with 2 `*mut T` lanes\\n13  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:15:1\\n    |\\n15  | / impl_const_p!(\\n16  | |     [*const T; 4]: cptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n17  | |     /// A vector with 4 `*const T` lanes\\n18  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:20:1\\n    |\\n20  | / impl_mut_p!(\\n21  | |     [*mut T; 4]: mptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n22  | |     /// A vector with 4 `*mut T` lanes\\n23  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:25:1\\n    |\\n25  | / impl_const_p!(\\n26  | |     [*const T; 8]: cptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n27  | |     /// A vector with 8 `*const T` lanes\\n28  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:30:1\\n    |\\n30  | / impl_mut_p!(\\n31  | |     [*mut T; 8]: mptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n32  | |     /// A vector with 8 `*mut T` lanes\\n33  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror: aborting due to 232 previous errors\\n\\nFor more information about this error, try `rustc --explain E0658`.\\nerror: Could not compile `packed_simd`.\\n\\nTo learn more, run the command again with --verbose.\\n\\n\\n stdout=\" }\n\nstack backtrace:\n   0:     0x5623421133bd - backtrace::backtrace::libunwind::trace::h8397bdb6a24b9f40\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/libunwind.rs:53\n                         - backtrace::backtrace::trace::h125f2cf00fdf546b\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/mod.rs:42\n   1:     0x562342113552 - backtrace::capture::Backtrace::new_unresolved::h4d6de04be21bce48\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/capture.rs:88\n   2:     0x56234211286c - failure::backtrace::internal::InternalBacktrace::new::hc3b584ab8d252034\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/backtrace/internal.rs:44\n                         - failure::backtrace::Backtrace::new::h6f39e1906f974748\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/backtrace/mod.rs:111\n   3:     0x5623420ae470 - <failure::error::error_impl::ErrorImpl as core::convert::From<F>>::from::h2fd1b3a4ef3bebbf\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/error/error_impl.rs:19\n                         - <failure::error::Error as core::convert::From<F>>::from::hd1f148dfe530685d\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/error/mod.rs:36\n                         - failure::error_message::err_msg::h361242fbf0484899\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/error_message.rs:12\n                         - collector::command_output::h10ec8cf3e6f97b45\n                        at collector/src/lib.rs:527\n   4:     0x562341d9cafa - collector::execute::CargoProcess::run_rustc::h061e683ca8dccf36\n                        at collector/src/bin/rustc-perf-collector/execute.rs:229\n   5:     0x562341da4722 - collector::execute::Benchmark::measure::h2d0f9223356097f9\n                        at collector/src/bin/rustc-perf-collector/execute.rs:708\n   6:     0x562341db6541 - collector::bench_commit::hfdb1fac25c1605dc\n                        at collector/src/bin/rustc-perf-collector/main.rs:191\n   7:     0x562341dc5a1b - collector::main_result::hc71525e6d78bdd83\n                        at collector/src/bin/rustc-perf-collector/main.rs:511\n   8:     0x562341dbb96e - collector::main::hdbaeb352a8e60c44\n                        at collector/src/bin/rustc-perf-collector/main.rs:264\n   9:     0x562341d6fe22 - std::rt::lang_start::{{closure}}::h8ccb8ec391a6ef8d\n                        at /rustc/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/libstd/rt.rs:64\n  10:     0x56234213a0d2 - {{closure}}\n                        at src/libstd/rt.rs:49\n                         - do_call<closure,i32>\n                        at src/libstd/panicking.rs:293\n  11:     0x562342144d39 - __rust_maybe_catch_panic\n                        at src/libpanic_unwind/lib.rs:87\n  12:     0x56234213ac9c - try<i32,closure>\n                        at src/libstd/panicking.rs:272\n                         - catch_unwind<closure,i32>\n                        at src/libstd/panic.rs:388\n                         - lang_start_internal\n                        at src/libstd/rt.rs:48\n  13:     0x562341dc9d57 - main\n  14:     0x7f7c7a50482f - __libc_start_main\n  15:     0x562341d65518 - _start\n  16:                0x0 - <unknown>"},"piston-image":{"Ok":{"runs":[{"stats":{"stats":[null,7091997181.0,26727.0,null,8652335542.0,203084.0,1819.203866,null,1.854176391,1819.203239]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,8798785630.0,40498.0,null,10659778752.0,258744.0,2265.94228,null,2.304017037,2265.94027]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1734126855.0,37126.0,null,2178154570.0,238564.0,487.413953,null,0.492348389,487.403369]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1801117207.0,37600.0,null,2268920015.0,247044.0,505.499206,null,0.495758417,505.5085]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,35131808486.0,95284.0,null,36636066399.0,473036.0,9297.473953,null,4.023051195,9297.472814]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,39625210581.0,101112.0,null,41028985761.0,507876.0,10504.356705,null,4.690513652,10504.31239]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3351051921.0,63091.0,null,3942288996.0,381580.0,970.65579,null,0.941867652,970.552649]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,3427959809.0,64189.0,null,4243438453.0,392108.0,990.167155,null,0.948057619,990.046105]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,147403736829.0,87385.0,null,120366717097.0,437504.0,38977.833672,null,7.830897494,38977.922429]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,162330968926.0,106814.0,null,128428421627.0,502108.0,43028.832523,null,8.252970028,43028.957133]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,3286832660.0,64797.0,null,4037099319.0,363240.0,936.839518,null,0.895313129,936.76857]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,5168110731.0,66689.0,null,6243350113.0,379068.0,1417.266021,null,1.288830828,1417.155734]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"piston-image"}},"regex":{"Ok":{"runs":[{"stats":{"stats":[null,3574756910.0,19023.0,null,3959782156.0,170908.0,926.541118,null,0.944438645,926.540143]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,4522921178.0,29878.0,null,5070672034.0,214552.0,1178.944625,null,1.238429931,1178.942947]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1142272145.0,26294.0,null,1502281661.0,193692.0,325.136538,null,0.323924123,325.1344]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1867012735.0,29974.0,null,2254355991.0,215972.0,514.502151,null,0.527578127,514.491336]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"compile one","path":"0-compile-one.patch"}}},{"stats":{"stats":[null,1199539660.0,26734.0,null,1553889094.0,202372.0,343.757608,null,0.340812751,343.745062]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"is valid cap letter","path":"1-is-valid-cap-letter.patch"}}},{"stats":{"stats":[null,1221461062.0,27066.0,null,1600946893.0,204364.0,346.486652,null,0.373056348,346.498488]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"expand","path":"2-expand.patch"}}},{"stats":{"stats":[null,1886066457.0,29989.0,null,2275758586.0,216124.0,520.265991,null,0.518842856,520.265544]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"Compiler new","path":"3-Compiler-new.patch"}}},{"stats":{"stats":[null,1862741973.0,29990.0,null,2274843428.0,215808.0,514.266761,null,0.537958039,514.27626]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"reverse","path":"4-reverse.patch"}}},{"stats":{"stats":[null,1177536799.0,26731.0,null,1539582637.0,201900.0,336.112613,null,0.335917324,336.111736]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":5,"name":"byte frequencies","path":"5-byte-frequencies.patch"}}},{"stats":{"stats":[null,1572407898.0,29528.0,null,1982843839.0,213984.0,436.940675,null,0.464988045,436.940305]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":6,"name":"sparse set","path":"6-sparse-set.patch"}}},{"stats":{"stats":[null,1352795368.0,27245.0,null,1723999772.0,204776.0,379.472653,null,0.377242005,379.486424]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":7,"name":"Job","path":"7-Job.patch"}}},{"stats":{"stats":[null,1423606120.0,29420.0,null,1775265181.0,213112.0,400.255231,null,0.413528815,400.253483]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":8,"name":"println","path":"8-println.patch"}}},{"stats":{"stats":[null,27374812875.0,78708.0,null,22843099848.0,411524.0,7320.70741,null,2.194331536,7320.707897]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,29706034042.0,78541.0,null,25678822633.0,415332.0,7945.478288,null,2.643103885,7945.498161]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1804834593.0,41736.0,null,2259010094.0,275836.0,538.908285,null,0.515838226,538.860754]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,6239484854.0,55034.0,null,6866450667.0,331776.0,1711.962981,null,0.980519265,1711.896917]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"compile one","path":"0-compile-one.patch"}}},{"stats":{"stats":[null,1904523016.0,42372.0,null,2344405074.0,285332.0,566.576017,null,0.532360321,566.500064]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"is valid cap letter","path":"1-is-valid-cap-letter.patch"}}},{"stats":{"stats":[null,2567326783.0,44953.0,null,3075725655.0,294968.0,737.717452,null,0.63245694,737.646977]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"expand","path":"2-expand.patch"}}},{"stats":{"stats":[null,6407833574.0,55327.0,null,6894763105.0,332488.0,1759.506214,null,0.999232653,1759.441618]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"Compiler new","path":"3-Compiler-new.patch"}}},{"stats":{"stats":[null,6265488633.0,56681.0,null,6895876494.0,337788.0,1727.282822,null,0.977018402,1727.21396]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"reverse","path":"4-reverse.patch"}}},{"stats":{"stats":[null,1836954264.0,41934.0,null,2286714552.0,278828.0,546.294329,null,0.519163804,546.21433]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":5,"name":"byte frequencies","path":"5-byte-frequencies.patch"}}},{"stats":{"stats":[null,20086764003.0,81461.0,null,17613872093.0,429968.0,5438.848542,null,1.519818782,5438.819711]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":6,"name":"sparse set","path":"6-sparse-set.patch"}}},{"stats":{"stats":[null,19766134878.0,81784.0,null,16960141041.0,431032.0,5351.17654,null,1.446305842,5351.163327]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":7,"name":"Job","path":"7-Job.patch"}}},{"stats":{"stats":[null,3001905802.0,47850.0,null,3683307064.0,306332.0,859.924693,null,0.660754448,859.857025]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":8,"name":"println","path":"8-println.patch"}}},{"stats":{"stats":[null,83280512149.0,63627.0,null,66213011443.0,350564.0,22027.142831,null,4.542046932,22027.193642]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,91176117762.0,74922.0,null,71760464011.0,389760.0,24171.555812,null,4.937748834,24171.643519]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1829236675.0,41252.0,null,2284661104.0,261368.0,532.100489,null,0.502107297,532.048468]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,52356563036.0,74932.0,null,41861165883.0,394876.0,13925.905712,null,2.96729715,13925.940244]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"compile one","path":"0-compile-one.patch"}}},{"stats":{"stats":[null,2093167708.0,42261.0,null,2570895501.0,274516.0,604.25258,null,0.522842761,604.172411]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"is valid cap letter","path":"1-is-valid-cap-letter.patch"}}},{"stats":{"stats":[null,2132911727.0,42355.0,null,2614076043.0,274788.0,619.286393,null,0.535386132,619.238297]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":2,"name":"expand","path":"2-expand.patch"}}},{"stats":{"stats":[null,52221573959.0,74827.0,null,41876789688.0,395888.0,13891.557596,null,2.960586117,13891.590002]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":3,"name":"Compiler new","path":"3-Compiler-new.patch"}}},{"stats":{"stats":[null,52217234851.0,74821.0,null,41886310364.0,395840.0,13881.330178,null,2.969503619,13881.347651]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":4,"name":"reverse","path":"4-reverse.patch"}}},{"stats":{"stats":[null,1856487223.0,41532.0,null,2310672790.0,264752.0,540.681347,null,0.510141507,540.613307]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":5,"name":"byte frequencies","path":"5-byte-frequencies.patch"}}},{"stats":{"stats":[null,71577652059.0,77609.0,null,58102777728.0,405284.0,19019.549298,null,3.597374075,19019.614646]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":6,"name":"sparse set","path":"6-sparse-set.patch"}}},{"stats":{"stats":[null,71172228862.0,77282.0,null,57829288158.0,404336.0,18915.591182,null,3.486938105,18915.647981]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":7,"name":"Job","path":"7-Job.patch"}}},{"stats":{"stats":[null,9792177712.0,56530.0,null,12855539070.0,322548.0,2576.80729,null,1.904225031,2576.749354]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":8,"name":"println","path":"8-println.patch"}}}],"name":"regex"}},"regression-31157":{"Ok":{"runs":[{"stats":{"stats":[null,887241325.0,8036.0,null,1221970501.0,126836.0,239.62786,null,0.257436797,239.615644]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,1101735689.0,11224.0,null,1490591898.0,140044.0,297.441343,null,0.316173678,297.439191]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,269735973.0,10675.0,null,399049645.0,122752.0,87.093103,null,0.100891864,87.091232]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,368244436.0,11357.0,null,514780019.0,140548.0,113.471716,null,0.12748457,113.481]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,7034041153.0,28291.0,null,7618531651.0,215588.0,1885.533494,null,0.871962738,1885.539277]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,7687599633.0,32338.0,null,8492391502.0,232136.0,2060.777613,null,1.020610376,2060.771425]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,655807587.0,17491.0,null,850841384.0,167164.0,203.016104,null,0.223313941,202.99326]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,822424513.0,19682.0,null,1058302725.0,188976.0,250.630714,null,0.236113366,250.602345]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,26318273798.0,28601.0,null,24651079683.0,214360.0,6899.700559,null,2.625994927,6899.741063]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27808404920.0,35127.0,null,25811543922.0,238256.0,7309.323446,null,2.745662089,7309.344692]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,673338578.0,18588.0,null,858910954.0,164348.0,205.998397,null,0.222499491,205.957945]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,9346716796.0,30278.0,null,9915915320.0,221520.0,2464.965481,null,1.347437778,2464.950017]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"regression-31157"}},"ripgrep":{"Ok":{"runs":[{"stats":{"stats":[null,2887448884.0,17515.0,null,3474496085.0,167312.0,752.28748,null,0.79291967,752.287369]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3725058106.0,26966.0,null,4456949581.0,206040.0,974.209236,null,1.015225769,974.207795]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,820886140.0,23698.0,null,1159867057.0,184880.0,242.843908,null,0.244365017,242.842472]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,975600737.0,25071.0,null,1346908578.0,198976.0,283.294329,null,0.302034995,283.292685]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,20064339153.0,107934.0,null,21140490055.0,342664.0,5517.488412,null,3.045907244,5517.494965]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,23186099297.0,121636.0,null,24702817140.0,370616.0,6419.947071,null,3.561416739,6419.917039]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,5150598470.0,95414.0,null,6438698575.0,283732.0,1629.69522,null,1.599662263,1629.625714]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,5349519345.0,95910.0,null,6619026740.0,290312.0,1683.151221,null,1.640013641,1683.075321]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,154686403218.0,184056.0,null,122430939975.0,642340.0,41173.499245,null,7.904368978,41173.540001]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,171025122390.0,184831.0,null,133286168879.0,635044.0,45621.476399,null,8.307996906,45621.657791]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,4380848045.0,90119.0,null,6803542299.0,302812.0,1344.729433,null,1.292227898,1344.6309]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,7320181582.0,98875.0,null,10317342830.0,356304.0,2101.386623,null,1.765169755,2101.320958]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"ripgrep"}},"script-servo":{"Ok":{"runs":[{"stats":{"stats":[null,174266719509.0,718621.0,null,189563802367.0,2430416.0,44569.335652,null,44.613806142,44569.384334]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,217095285454.0,1130380.0,null,245756276534.0,3891320.0,55820.00708,null,55.863962523,55820.045455]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,76088105717.0,1058812.0,null,88550601143.0,4254208.0,20299.904628,null,19.589700039,20299.909489]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,76327391896.0,1056120.0,null,88665652420.0,4251108.0,20836.543675,null,20.087422609,20836.553742]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"debugging println in dependency","path":"0-debugging-println-in-dependency.patch"}}},{"stats":{"stats":[null,78398651812.0,1055130.0,null,91562231225.0,4217152.0,20876.80176,null,20.156801225,20876.812117]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"println","path":"1-println.patch"}}},{"stats":{"stats":[null,168472190483.0,1317594.0,null,187963064880.0,4809216.0,43817.436732,null,43.073591997,43817.453714]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"commit 8b0f58c8a","path":"2-commit-8b0f58c8a.patch"}}},{"stats":{"stats":[null,762189152454.0,1911827.0,null,772563344610.0,5472556.0,200973.60342,null,92.240684606,200973.744798]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,1464204202609.0,3033464.0,null,1697526526205.0,8490956.0,387101.066867,null,197.750106925,387101.453431]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,104219579903.0,1481109.0,null,119767274438.0,9099948.0,30474.94233,null,43.904174339,30473.01376]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,122834300984.0,1581232.0,null,139157252205.0,8979412.0,35248.977509,null,45.951732194,35246.820461]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"debugging println in dependency","path":"0-debugging-println-in-dependency.patch"}}},{"stats":{"stats":[null,110777750208.0,1500435.0,null,126571917420.0,9151988.0,31703.383096,null,42.782599912,31701.848683]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"println","path":"1-println.patch"}}},{"stats":{"stats":[null,1304262099286.0,3207763.0,null,1497968321875.0,9515952.0,346709.728082,null,165.527499188,346709.965268]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"commit 8b0f58c8a","path":"2-commit-8b0f58c8a.patch"}}},{"stats":{"stats":[null,2985090425730.0,2582121.0,null,2245908334679.0,4400536.0,790793.0062,null,185.699393029,790793.490325]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,4178975803219.0,3309448.0,null,3221508890945.0,5465012.0,1111215.303147,null,214.081338102,1111218.467025]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,101842456221.0,1403293.0,null,113386681491.0,5785792.0,28326.609996,null,26.291568583,28325.773953]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1491040767169.0,2142984.0,null,1148458403587.0,6916568.0,397303.791923,null,85.5174928,397304.05716]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"debugging println in dependency","path":"0-debugging-println-in-dependency.patch"}}},{"stats":{"stats":[null,414073864019.0,1756960.0,null,419582245462.0,6643916.0,108712.818161,null,67.756105158,108712.504513]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"println","path":"1-println.patch"}}},{"stats":{"stats":[null,4067137100206.0,3559245.0,null,3119492898336.0,6743332.0,1082881.772953,null,197.484729306,1082884.19598]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":2,"name":"commit 8b0f58c8a","path":"2-commit-8b0f58c8a.patch"}}}],"name":"script-servo"}},"sentry-cli":{"Ok":{"runs":[{"stats":{"stats":[null,9016161811.0,35138.0,null,11379513677.0,250656.0,2314.02589,null,2.3399309,2314.026314]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,11286339741.0,53925.0,null,14354406183.0,325300.0,2903.704686,null,2.922031817,2903.702284]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2629334111.0,47801.0,null,3602888097.0,295644.0,727.003339,null,0.709982616,727.002036]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,3318928652.0,50206.0,null,4307947184.0,312804.0,910.099734,null,0.89872804,910.108188]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,53535330174.0,343741.0,null,61376370539.0,955772.0,14255.778736,null,10.412912172,14255.792387]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,68965735631.0,280756.0,null,71372846467.0,708072.0,18652.438126,null,9.546594895,18652.567731]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,12497903746.0,211192.0,null,14469002965.0,497324.0,3861.775416,null,3.784897161,3861.612345]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,17773673518.0,237372.0,null,19563535533.0,599880.0,5193.495909,null,4.321239909,5193.376674]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,355045568526.0,239877.0,null,289699199519.0,776044.0,93944.059714,null,19.087473043,93944.116048]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,399898559354.0,249878.0,null,315997126293.0,753356.0,106012.045821,null,21.015290442,106012.244333]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,8069678822.0,159715.0,null,8955544549.0,515848.0,2360.236391,null,2.23639762,2360.031899]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,220891737607.0,226476.0,null,174525693588.0,723712.0,58754.856079,null,11.570057339,58754.938783]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"sentry-cli"}},"serde":{"Ok":{"runs":[{"stats":{"stats":[null,19615852316.0,41527.0,null,29581759323.0,256324.0,4975.145493,null,5.025969574,4975.145707]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,22867105376.0,65301.0,null,33429375248.0,351876.0,5821.008652,null,5.856504804,5821.023482]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3298316044.0,63879.0,null,4218193844.0,334220.0,907.877935,null,0.89547571,907.876084]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,21748684573.0,49598.0,null,32422124552.0,298916.0,5533.231872,null,5.434680087,5533.239049]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,25664314739.0,78287.0,null,37339181064.0,410700.0,6564.011659,null,6.438016262,6564.041404]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3899293861.0,73019.0,null,5145861893.0,380348.0,1085.959552,null,1.062491714,1085.938784]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,23116635263.0,51471.0,null,33332622906.0,306616.0,5903.916104,null,5.449453697,5903.902424]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27004672620.0,80276.0,null,38259430021.0,418624.0,6930.228366,null,6.426220565,6930.212389]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,3839148879.0,72186.0,null,5140220421.0,376860.0,1068.869287,null,1.04822223,1068.837459]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"serde"}},"style-servo":{"Ok":{"runs":[{"stats":{"stats":[null,106493734718.0,332767.0,null,121522171531.0,1366072.0,27075.217922,null,27.130467316,27075.237301]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,132159515940.0,573289.0,null,152713711808.0,2204872.0,33815.813093,null,33.853351524,33815.827341]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,39765880441.0,508277.0,null,47786994783.0,2123468.0,10610.565516,null,10.223524686,10610.569671]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,77833913759.0,571996.0,null,92516877300.0,2355896.0,20457.712923,null,20.075063634,20457.720926]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,82702126560.0,591034.0,null,95291767523.0,2447572.0,21698.863509,null,21.303094192,21698.859298]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"b9b3e592dd cherry picked","path":"1-b9b3e592dd-cherry-picked.patch"}}},{"stats":{"stats":[null,278433766352.0,755118.0,null,296884013955.0,2778012.0,72794.472322,null,41.583792632,72794.518191]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,439315961331.0,1099383.0,null,533724189593.0,3457152.0,115747.540656,null,66.628330057,115748.059682]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,51386244734.0,701886.0,null,62208819346.0,3616888.0,14660.591037,null,17.138442209,14659.95538]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,248430167140.0,998999.0,null,300147723548.0,3880580.0,66394.756796,null,40.163690409,66394.660285]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,345471840045.0,1113467.0,null,424909403352.0,4010284.0,91918.127187,null,50.350501991,91918.325897]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"b9b3e592dd cherry picked","path":"1-b9b3e592dd-cherry-picked.patch"}}},{"stats":{"stats":[null,968799656548.0,732636.0,null,797299664364.0,2297200.0,255968.076485,null,61.486270661,255968.261673]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,1492770238731.0,1050293.0,null,1253147018808.0,2997120.0,396508.610148,null,83.081611054,396509.548023]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,46155697474.0,669220.0,null,53977629951.0,2793408.0,12894.237101,null,11.972787333,12893.610441]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1258757771510.0,1129287.0,null,1058253729655.0,3472076.0,335209.549093,null,62.031997729,335210.186373]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,1357413492925.0,1150556.0,null,1129058140059.0,3446892.0,361566.944254,null,66.696728359,361567.731074]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"b9b3e592dd cherry picked","path":"1-b9b3e592dd-cherry-picked.patch"}}}],"name":"style-servo"}},"syn":{"Ok":{"runs":[{"stats":{"stats":[null,2632289670.0,14864.0,null,3226126566.0,151852.0,701.042712,null,0.718941006,701.05127]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3348310657.0,22887.0,null,4085438701.0,184300.0,876.784302,null,0.89456721,876.792445]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,957753809.0,21436.0,null,1325488424.0,165556.0,274.619854,null,0.277686749,274.618597]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1162354710.0,22715.0,null,1535679514.0,185152.0,330.403141,null,0.334371615,330.394731]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,10793534393.0,36416.0,null,11898292266.0,244580.0,2850.474763,null,1.466253734,2850.500228]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,12954699054.0,47733.0,null,14450057634.0,290084.0,3457.196704,null,1.747896348,3457.26343]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1436092690.0,32787.0,null,1908105299.0,227512.0,429.958148,null,0.416784164,429.90493]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2144203488.0,37049.0,null,2689289163.0,257872.0,628.990977,null,0.523170518,628.929357]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,54581772398.0,41312.0,null,44599384677.0,261344.0,14470.009129,null,2.94035917,14470.040652]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,60329242630.0,52910.0,null,48165615596.0,304380.0,16032.892723,null,3.244508714,16032.951307]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1466585476.0,32986.0,null,1925545224.0,219520.0,428.69379,null,0.411223539,428.655287]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,31009634458.0,50623.0,null,24406399457.0,298792.0,8269.366408,null,1.666612788,8269.350957]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"syn"}},"tokio-webpush-simple":{"Ok":{"runs":[{"stats":{"stats":[null,1277110601.0,11301.0,null,1755591807.0,148768.0,344.409223,null,0.362449656,344.407321]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,1691533617.0,17390.0,null,2266157056.0,173184.0,452.882002,null,0.471107691,452.879951]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,430181177.0,16187.0,null,634838245.0,148432.0,135.162856,null,0.145996935,135.160461]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1107387463.0,19557.0,null,1451033137.0,182524.0,310.121707,null,0.319854052,310.12059]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,1042774765.0,19768.0,null,1382790733.0,183764.0,293.803646,null,0.304213851,293.801924]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"minor change","path":"1-minor-change.patch"}}},{"stats":{"stats":[null,15611437794.0,91721.0,null,17573121721.0,303576.0,4268.341275,null,2.472626423,4268.354663]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,18567034228.0,103673.0,null,20896937594.0,340248.0,5112.92053,null,2.839317646,5113.0232]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,4206125612.0,85609.0,null,5192201556.0,271784.0,1339.062233,null,1.331655562,1338.984457]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,17595173184.0,109051.0,null,19400610989.0,359376.0,4921.301348,null,2.587985574,4921.376869]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,17484756449.0,109215.0,null,19409989425.0,363828.0,4888.443307,null,2.552972413,4888.372152]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"minor change","path":"1-minor-change.patch"}}},{"stats":{"stats":[null,86027114079.0,79302.0,null,68098919678.0,338984.0,22852.94151,null,4.161084834,22852.942457]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,101891453261.0,84815.0,null,78302222630.0,359764.0,27128.850137,null,4.635347068,27128.940856]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2295178524.0,59477.0,null,2740245065.0,258652.0,721.104767,null,0.704851651,720.986081]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,100995700855.0,89720.0,null,76732923906.0,380380.0,26926.288956,null,4.286383103,26926.397008]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,67707969443.0,87768.0,null,53388335891.0,377108.0,18069.369247,null,3.352864617,18069.379131]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"minor change","path":"1-minor-change.patch"}}}],"name":"tokio-webpush-simple"}},"tuple-stress":{"Ok":{"runs":[{"stats":{"stats":[null,12424559143.0,90097.0,null,18200279309.0,434708.0,3205.74514,null,3.278525723,3205.745338]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,15557251365.0,98036.0,null,23564405963.0,467352.0,4008.393114,null,4.044702664,4008.407328]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3994692593.0,75253.0,null,6922062512.0,366912.0,1095.700874,null,1.132582526,1095.689406]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,14935430594.0,106284.0,null,23610861871.0,503112.0,3867.238735,null,3.901901732,3867.218778]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"new row","path":"0-new-row.patch"}}},{"stats":{"stats":[null,12727092805.0,100689.0,null,18719087780.0,457104.0,3387.379315,null,3.403155982,3387.370395]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,15384717785.0,110641.0,null,24106041177.0,500032.0,4012.393164,null,4.006173324,4012.366473]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,4074355287.0,83652.0,null,7304429104.0,387092.0,1149.557036,null,1.180554705,1149.537155]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,15368488513.0,117151.0,null,24072538647.0,528764.0,4027.150016,null,4.020897248,4027.126612]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"new row","path":"0-new-row.patch"}}},{"stats":{"stats":[null,13054300378.0,93954.0,null,18750319841.0,440676.0,3402.954966,null,3.414708822,3402.950284]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,15166505167.0,108775.0,null,24051537539.0,499924.0,4021.488698,null,4.013772625,4021.462107]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,4019841219.0,82115.0,null,7248319063.0,386020.0,1129.794997,null,1.16001127,1129.79988]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,15673357822.0,114687.0,null,23994120930.0,522256.0,4092.642295,null,4.085325814,4092.635769]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"new row","path":"0-new-row.patch"}}}],"name":"tuple-stress"}},"ucd":{"Ok":{"runs":[{"stats":{"stats":[null,19962448053.0,114725.0,null,34621081792.0,534772.0,5175.267612,null,5.244284795,5175.267637]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,24044302774.0,124973.0,null,44181776795.0,576932.0,6187.380479,null,6.222860654,6187.381292]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,6253584837.0,125382.0,null,12329150596.0,568896.0,1726.170029,null,1.756037144,1726.168948]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,22486854629.0,132425.0,null,37728297646.0,612452.0,5832.588197,null,5.466458891,5832.605937]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,26372012880.0,142216.0,null,47574614832.0,669296.0,6836.398145,null,6.394684103,6836.427875]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,6415611298.0,127272.0,null,12463018249.0,607592.0,1787.049169,null,1.808751756,1787.028231]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,26583709791.0,142526.0,null,42620900254.0,664592.0,6966.708113,null,5.731477608,6966.686628]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,31067996719.0,154482.0,null,52139182019.0,709268.0,8102.944887,null,6.500434629,8102.952169]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,6795242590.0,129238.0,null,12613528282.0,614508.0,1883.024517,null,1.888754822,1882.995336]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"ucd"}},"unicode_normalization":{"Ok":{"runs":[{"stats":{"stats":[null,14525001424.0,26042.0,null,31023880699.0,187452.0,3678.025333,null,3.715258054,3678.026389]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,15662206052.0,25609.0,null,34986941301.0,193080.0,3963.929234,null,3.99994934,3963.951076]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,670262948.0,15637.0,null,1217136150.0,149320.0,194.22688,null,0.227835116,194.224569]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,14446259100.0,26430.0,null,32288908025.0,195984.0,3662.056113,null,3.677352871,3662.05688]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,15265706707.0,35166.0,null,32323170064.0,230096.0,3884.094272,null,3.883693135,3884.088915]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,16528897723.0,34186.0,null,36658400508.0,234016.0,4199.084885,null,4.174751551,4199.088146]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,871677105.0,21243.0,null,1701850879.0,177904.0,255.766797,null,0.284814332,255.775897]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,15176851146.0,32625.0,null,33574669956.0,224084.0,3856.234019,null,3.868847486,3856.221485]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,15694618617.0,33738.0,null,33512124299.0,233016.0,3985.036262,null,3.990282618,3985.033998]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,17000521862.0,35823.0,null,37834118602.0,242444.0,4316.928974,null,4.294423594,4316.925642]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,871508046.0,21277.0,null,1699185815.0,178576.0,253.904152,null,0.284599556,253.910476]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,15002767603.0,32285.0,null,33576085331.0,222932.0,3812.970263,null,3.826725416,3812.986107]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"unicode_normalization"}},"unify-linearly":{"Ok":{"runs":[{"stats":{"stats":[null,227276336.0,5399.0,null,345866081.0,103404.0,69.796136,null,0.088289968,69.79471]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,268457825.0,6737.0,null,391459120.0,108528.0,82.063791,null,0.100158981,82.052286]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,121406504.0,5866.0,null,177613840.0,90952.0,43.470513,null,0.061002414,43.46807]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,154585111.0,6636.0,null,228142692.0,107932.0,53.100888,null,0.071200257,53.098478]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,513339427.0,13202.0,null,748639088.0,124580.0,166.474725,null,0.166187146,166.456291]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,581704386.0,15031.0,null,823028267.0,132028.0,185.731422,null,0.18222783,185.701085]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,337729558.0,13482.0,null,514946453.0,114188.0,120.300924,null,0.133852847,120.299111]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,460526512.0,14941.0,null,640567102.0,131812.0,155.349111,null,0.151415467,155.341257]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,503391183.0,12337.0,null,752035945.0,123696.0,160.614985,null,0.16794034,160.619779]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,575868004.0,14329.0,null,841460306.0,132028.0,182.391167,null,0.181932422,182.39585]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,337338760.0,13185.0,null,506104444.0,112960.0,117.971166,null,0.133645196,117.96706]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,370527831.0,13633.0,null,541856758.0,119824.0,128.044828,null,0.139003562,128.029927]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}}],"name":"unify-linearly"}},"unused-warnings":{"Ok":{"runs":[{"stats":{"stats":[null,1787389086.0,34657.0,null,2456550435.0,213988.0,494.249189,null,0.512227107,494.249269]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,2644696521.0,58406.0,null,3420194448.0,309372.0,730.382135,null,0.74849094,730.380815]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2262841018.0,64740.0,null,2918961976.0,324576.0,644.860087,null,0.622541466,644.860476]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2539762256.0,64905.0,null,3127968513.0,336632.0,717.709084,null,0.695576164,717.709735]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,2028674243.0,40895.0,null,2787587863.0,232208.0,578.213831,null,0.585817913,578.20735]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,2894449627.0,65738.0,null,3784796708.0,329404.0,819.656787,null,0.82757637,819.6606]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2498680540.0,71818.0,null,3237937148.0,341292.0,733.208369,null,0.706696737,733.197103]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2808105296.0,72262.0,null,3475274779.0,357684.0,809.180679,null,0.775318195,809.176212]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,2071923393.0,41614.0,null,2815685372.0,237240.0,585.068306,null,0.58755666,585.055146]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,2908641833.0,65610.0,null,3811718551.0,331436.0,824.367341,null,0.826437447,824.363392]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2551578920.0,71384.0,null,3234711649.0,340748.0,743.483669,null,0.717889831,743.480991]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,2766789675.0,71998.0,null,3441590749.0,346916.0,799.557658,null,0.76899686,799.554475]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}}],"name":"unused-warnings"}},"webrender":{"Ok":{"runs":[{"stats":{"stats":[null,12744799151.0,48993.0,null,14052470536.0,302700.0,3260.91593,null,3.330309814,3260.91544]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,16349569880.0,76393.0,null,18466540734.0,412312.0,4200.840761,null,4.2633729,4200.848951]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3972733214.0,73536.0,null,4829278859.0,395876.0,1113.000343,null,1.104230862,1113.00035]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,4878901193.0,75733.0,null,5750455729.0,411364.0,1318.768908,null,1.309059834,1318.769484]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,96221287953.0,249160.0,null,98991119462.0,1052988.0,25552.002043,null,9.657948274,25552.013007]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,108741419867.0,259617.0,null,115469675463.0,1045424.0,28839.684946,null,11.712229943,28839.746795]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,7481090349.0,132467.0,null,9169617630.0,747596.0,2134.968934,null,2.061589491,2134.834337]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,8690836384.0,135063.0,null,10373687193.0,764856.0,2455.430575,null,2.335427776,2455.261344]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,405817712285.0,343709.0,null,315549487539.0,1379784.0,107711.395192,null,20.267259481,107711.525005]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,455750047479.0,341110.0,null,355269204823.0,1265108.0,121122.938507,null,22.304995935,121123.199423]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,7638822926.0,136713.0,null,9034831634.0,762976.0,2184.055206,null,2.06674813,2183.928792]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,37959689519.0,198548.0,null,40683955698.0,941808.0,10270.135114,null,4.261164741,10270.062322]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"webrender"}},"wg-grammar":{"Ok":{"runs":[{"stats":{"stats":[null,8781497514.0,24011.0,null,14227832480.0,180792.0,2236.636262,null,2.293597389,2236.6358]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,9726758720.0,26546.0,null,15600930809.0,191940.0,2478.093126,null,2.51498813,2478.090961]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,752183394.0,19039.0,null,1204063443.0,157360.0,219.135709,null,0.246397607,219.134467]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,9049290587.0,26283.0,null,14679013649.0,207388.0,2308.016403,null,2.352871122,2308.02414]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,10176372945.0,28705.0,null,16260255266.0,216928.0,2598.180966,null,2.609995645,2598.188539]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,832268740.0,22554.0,null,1371369276.0,179256.0,245.258651,null,0.272582705,245.254942]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,9473650833.0,27690.0,null,15305188842.0,213532.0,2421.610004,null,2.42978164,2421.594064]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,10565294909.0,29667.0,null,16892017388.0,221048.0,2703.131661,null,2.655479908,2703.08243]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,850802592.0,22685.0,null,1388102221.0,180148.0,251.82052,null,0.275987279,251.816901]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"wg-grammar"}}},"triple":"x86_64-unknown-linux-gnu"}
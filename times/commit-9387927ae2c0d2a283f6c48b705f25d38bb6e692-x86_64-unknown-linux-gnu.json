{"commit":{"sha":"9387927ae2c0d2a283f6c48b705f25d38bb6e692","date":"2019-04-17T22:24:11+00:00"},"benchmarks":{"cargo":{"Ok":{"runs":[{"stats":{"stats":[null,28163647772.0,79616.0,null,33911519624.0,424052.0,7189.235723,null,7.225792925,7189.238846]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,33899100239.0,125044.0,null,41430849309.0,571776.0,8663.353398,null,8.682102844,8663.35747]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,9084061039.0,109481.0,null,11719288612.0,538276.0,2417.411105,null,2.354472402,2417.410219]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,10628730890.0,111170.0,null,13195870833.0,552304.0,2812.60835,null,2.74753575,2812.608247]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,177922939978.0,408935.0,null,180868117269.0,1581380.0,47069.68227,null,18.677842752,47069.654374]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,199351835672.0,428934.0,null,206512845893.0,1505064.0,52869.12099,null,21.737039665,52869.326265]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,15732836824.0,213856.0,null,19041493831.0,1159744.0,4359.334269,null,4.25893057,4359.112779]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,55035895179.0,322936.0,null,59678975851.0,1521552.0,14772.741477,null,7.679018882,14772.640279]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,805013111403.0,429821.0,null,630371100976.0,1350416.0,213242.575049,null,38.464363771,213242.705691]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,973922515025.0,440817.0,null,753166466847.0,1324564.0,258341.188753,null,43.113487767,258341.656168]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,13024876410.0,215947.0,null,14868079493.0,1008876.0,3621.102558,null,3.308265092,3620.893819]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,576940440148.0,381701.0,null,456418660796.0,1333468.0,153340.224732,null,24.685092352,153340.423508]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"cargo"}},"clap-rs":{"Ok":{"runs":[{"stats":{"stats":[null,14413749907.0,47400.0,null,18754852672.0,256300.0,3675.48718,null,3.712398252,3675.487598]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,24420178595.0,96631.0,null,39453738944.0,447072.0,6260.221642,null,6.296215745,6260.221286]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,6280480330.0,181942.0,null,10182871239.0,811480.0,1794.205852,null,1.790911817,1794.226559]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,9510375026.0,183926.0,null,13987176136.0,825544.0,2622.211286,null,2.62393049,2622.220722]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,58699333305.0,247271.0,null,71447308086.0,980492.0,15388.384078,null,9.272698735,15388.396004]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,79540239501.0,236327.0,null,96288060055.0,959392.0,20863.349115,null,11.994387458,20863.347047]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,8527383282.0,205613.0,null,12902855842.0,944168.0,2436.594916,null,2.38928572,2436.535135]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,42339070511.0,341108.0,null,51120193063.0,1419924.0,11287.038813,null,7.49893047,11287.02397]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,208873905635.0,148428.0,null,202810318690.0,480344.0,54308.331206,null,25.69920058,54308.36478]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,240925746697.0,199339.0,null,232440898126.0,657608.0,62940.21296,null,26.640428609,62940.244793]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,8345018314.0,205342.0,null,12718433271.0,915012.0,2382.666982,null,2.327834521,2382.592498]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,130379931990.0,274685.0,null,126347016475.0,1171088.0,34420.258042,null,13.375824604,34420.297881]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"clap-rs"}},"coercions":{"Ok":{"runs":[{"stats":{"stats":[null,2954737766.0,27434.0,null,5390356383.0,185892.0,775.297878,null,0.809420612,775.307735]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3760300712.0,28964.0,null,7101582296.0,194160.0,988.534967,null,1.006934971,988.543415]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,913447142.0,23495.0,null,1730400573.0,160204.0,264.770235,null,0.301779283,264.769389]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1004767994.0,23600.0,null,1877335686.0,175124.0,288.419204,null,0.306267158,288.417063]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,3782293007.0,31313.0,null,7113812391.0,204468.0,991.205808,null,1.009084688,991.203647]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add static arr item","path":"1-add-static-arr-item.patch"}}},{"stats":{"stats":[null,4119782519.0,56678.0,null,7254879197.0,278964.0,1131.313782,null,1.157286286,1131.299683]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,4952928162.0,59237.0,null,8941712001.0,290348.0,1347.032621,null,1.3252109,1347.026524]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1192647166.0,32981.0,null,2228643930.0,178100.0,370.416867,null,0.404214309,370.406219]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2184433944.0,54992.0,null,3707944464.0,276276.0,647.355899,null,0.580666983,647.361186]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4982672362.0,61751.0,null,8950693674.0,290436.0,1360.851547,null,1.312932824,1360.837807]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add static arr item","path":"1-add-static-arr-item.patch"}}},{"stats":{"stats":[null,3441700552.0,35783.0,null,6183709470.0,210248.0,925.900729,null,0.95025138,925.897296]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,4255048784.0,37341.0,null,7884808559.0,217236.0,1130.661686,null,1.124218987,1130.6274]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1083912472.0,30279.0,null,2038853574.0,177608.0,326.983377,null,0.358167366,326.988571]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1486523388.0,32381.0,null,2636905838.0,201488.0,432.826651,null,0.424487436,432.811972]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4304580954.0,39089.0,null,7866295359.0,216280.0,1145.845098,null,1.13745253,1145.841662]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"add static arr item","path":"1-add-static-arr-item.patch"}}}],"name":"coercions"}},"cranelift-codegen":{"Ok":{"runs":[{"stats":{"stats":[null,23401615699.0,105850.0,null,30047025810.0,515728.0,6019.422702,null,6.084012325,6019.416849]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,27926415922.0,126941.0,null,36383750019.0,583132.0,7158.984165,null,7.201018641,7158.98746]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,5475888424.0,86843.0,null,6998411219.0,436520.0,1511.779191,null,1.486431832,1511.777075]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,59273278559.0,171592.0,null,69179532550.0,746304.0,15486.870109,null,9.109279993,15486.880795]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,71399518335.0,190507.0,null,85854653356.0,826616.0,18707.262962,null,11.305315895,18707.322338]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,8665404936.0,150557.0,null,12008747394.0,734948.0,2445.190204,null,2.34571242,2445.062514]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,267432556519.0,280825.0,null,226641175174.0,1165372.0,70539.538985,null,20.074378728,70539.58963]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,315823922576.0,285093.0,null,260505297715.0,1045300.0,83704.23745,null,20.927808154,83704.490738]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,8531707163.0,145951.0,null,11889399885.0,731200.0,2445.610497,null,2.327870656,2445.45516]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"cranelift-codegen"}},"crates.io":{"Ok":{"runs":[{"stats":{"stats":[null,24752148347.0,65394.0,null,32287425524.0,379756.0,6328.162345,null,6.37283668,6328.151914]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,29726964994.0,106005.0,null,38714151352.0,537620.0,7598.555984,null,7.639285572,7598.55784]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,7222353635.0,103920.0,null,9020971566.0,528224.0,1950.39495,null,1.875299608,1950.393149]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,7952088798.0,104637.0,null,9993444861.0,538284.0,2129.611166,null,2.044779579,2129.607939]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,109854067138.0,251832.0,null,116235543563.0,1139344.0,29023.341403,null,12.847238524,29023.316385]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,120233932221.0,265377.0,null,130712568608.0,1173092.0,31798.130953,null,14.90677168,31798.186552]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,11276750625.0,165494.0,null,14040442778.0,927304.0,3179.618616,null,3.023203063,3179.425782]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,16033147702.0,181796.0,null,19293855084.0,992884.0,4419.963757,null,3.784708651,4419.743028]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,435538825286.0,238213.0,null,350237433316.0,974324.0,115142.235818,null,23.570949877,115142.295352]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,494227714269.0,273376.0,null,394633424925.0,1073268.0,130968.852805,null,25.423610202,130969.038794]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,11272529187.0,164359.0,null,13719056874.0,816620.0,3112.356671,null,2.882697426,3112.151997]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,57876892640.0,202426.0,null,58704249592.0,956840.0,15401.593765,null,6.10959962,15401.501925]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"crates.io"}},"ctfe-stress-2":{"Ok":{"runs":[{"stats":{"stats":[null,31450284021.0,42941.0,null,68217588761.0,254496.0,7933.25938,null,7.95167017,7933.258452]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,39618561023.0,107773.0,null,91707618128.0,504828.0,10096.90973,null,10.134960444,10096.907903]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2580679299.0,121450.0,null,5652622671.0,554276.0,860.419057,null,0.895567258,860.416968]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,31266962679.0,43292.0,null,67839035703.0,254944.0,7893.236631,null,7.925881824,7893.234024]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,42198822114.0,176178.0,null,100492664054.0,764000.0,10823.45286,null,10.855796139,10823.459986]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3968600379.0,233198.0,null,8397251125.0,979760.0,1342.541107,null,1.377973856,1342.537819]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,25926184811.0,43393.0,null,55746121529.0,260268.0,6549.962495,null,6.616882047,6549.960241]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,36553668814.0,189717.0,null,87503684724.0,741580.0,9426.824932,null,9.457575849,9426.847106]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,3974060803.0,233143.0,null,8396101649.0,979516.0,1352.582493,null,1.387700346,1352.581498]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"ctfe-stress-2"}},"deep-vector":{"Ok":{"runs":[{"stats":{"stats":[null,4166912392.0,51307.0,null,6991627312.0,286480.0,1101.877532,null,1.139921872,1101.889422]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,4590341791.0,53731.0,null,7974802194.0,295872.0,1208.241622,null,1.244188596,1208.25285]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1262006534.0,33598.0,null,2507179888.0,199640.0,356.635831,null,0.390595002,356.624345]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,4576197909.0,53969.0,null,7994369729.0,298240.0,1208.229264,null,1.225838238,1208.228499]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4574463979.0,52449.0,null,7990006222.0,291808.0,1203.516515,null,1.238183342,1203.503382]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add vec item","path":"1-add-vec-item.patch"}}},{"stats":{"stats":[null,6257550340.0,81614.0,null,10136353033.0,382824.0,1679.447866,null,1.689442994,1679.48215]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,6857571640.0,83797.0,null,11546249169.0,393300.0,1843.45651,null,1.823091605,1843.466945]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1615760190.0,42862.0,null,3199301649.0,225360.0,476.905591,null,0.506840016,476.874439]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,6745830970.0,82186.0,null,11539938798.0,387780.0,1820.448072,null,1.77538824,1820.460889]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,6849462776.0,84540.0,null,11535407738.0,395168.0,1853.401648,null,1.825986584,1853.40665]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"add vec item","path":"1-add-vec-item.patch"}}},{"stats":{"stats":[null,11710637083.0,140654.0,null,17193393283.0,592208.0,3116.941321,null,3.100223762,3116.93487]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,12199059288.0,144077.0,null,18810333821.0,604484.0,3277.32322,null,3.242133248,3277.311206]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1605532600.0,42329.0,null,3158273400.0,225292.0,471.083555,null,0.501028975,471.059944]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,12267901505.0,145104.0,null,18554972235.0,610100.0,3250.033503,null,3.197235819,3250.026401]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,12155174592.0,142185.0,null,18566716953.0,603124.0,3228.857658,null,3.194851849,3228.871497]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"add vec item","path":"1-add-vec-item.patch"}}}],"name":"deep-vector"}},"deeply-nested":{"Ok":{"runs":[{"stats":{"stats":[null,273930668.0,5751.0,null,428519042.0,110516.0,82.789137,null,0.100908782,82.778194]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,311907983.0,7300.0,null,486678207.0,120140.0,94.049939,null,0.112149576,94.04766]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,122226606.0,6041.0,null,179350533.0,92284.0,43.670591,null,0.060783918,43.667557]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,576840731.0,8650.0,null,775839313.0,130168.0,168.292709,null,0.157422366,168.293762]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,632426927.0,10248.0,null,849105195.0,137088.0,184.027185,null,0.17064992,184.002182]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,187316299.0,7475.0,null,270138618.0,112476.0,64.86267,null,0.079723917,64.850599]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,906593031.0,7716.0,null,1277718582.0,128152.0,247.596221,null,0.205513458,247.592647]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,953196869.0,9337.0,null,1350225932.0,135144.0,261.681036,null,0.21818705,261.687134]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,180743341.0,7348.0,null,267820434.0,111340.0,61.748665,null,0.0780183,61.753579]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"deeply-nested"}},"encoding":{"Ok":{"runs":[{"stats":{"stats":[null,1598777336.0,12229.0,null,1909998307.0,144160.0,423.58782,null,0.442498449,423.586565]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,2051552106.0,18710.0,null,2446305528.0,171136.0,544.86361,null,0.563187356,544.86082]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,622044068.0,18289.0,null,858907914.0,162708.0,185.125368,null,0.194506423,185.122887]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,665538300.0,18281.0,null,925644969.0,168924.0,196.716526,null,0.2049243,196.714019]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,6741307491.0,31013.0,null,7706978087.0,227800.0,1799.487303,null,0.914295323,1799.48647]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,8534388064.0,37518.0,null,9444685017.0,251716.0,2303.027855,null,1.12685334,2303.012397]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,866834475.0,22944.0,null,1182062790.0,188468.0,274.757282,null,0.26482677,274.710278]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,966361965.0,23481.0,null,1287492850.0,195828.0,301.229703,null,0.302388451,301.158534]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,20006142155.0,33819.0,null,18126924337.0,238792.0,5310.302274,null,1.441343668,5310.318522]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,22270332973.0,39482.0,null,20214219305.0,259784.0,5936.756525,null,1.623785203,5936.775082]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,876722119.0,23071.0,null,1193165233.0,187732.0,268.976281,null,0.261859125,268.931154]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1326954083.0,24269.0,null,1691605554.0,200612.0,385.680349,null,0.349550567,385.629242]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"encoding"}},"futures":{"Ok":{"runs":[{"stats":{"stats":[null,2908329055.0,11848.0,null,3997413649.0,141636.0,751.361847,null,0.769455142,751.360861]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3541750506.0,19199.0,null,4692660736.0,171032.0,919.759536,null,0.93880653,919.756853]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,677036654.0,18650.0,null,937297380.0,161964.0,200.959175,null,0.211913472,200.958091]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,695151684.0,18672.0,null,947799690.0,162804.0,205.343962,null,0.21219655,205.356132]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,4138501495.0,15880.0,null,5240073791.0,164616.0,1083.798224,null,0.91141451,1083.782435]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,5053513445.0,24074.0,null,6223882794.0,195956.0,1335.12739,null,1.119126301,1335.115059]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,831749943.0,21736.0,null,1113445525.0,180372.0,253.131623,null,0.267896988,253.103805]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,835247871.0,21751.0,null,1125494228.0,180484.0,253.554052,null,0.251908518,253.551274]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,6123905319.0,18011.0,null,6605709357.0,173620.0,1613.327541,null,0.970299204,1613.312371]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,7210001693.0,25352.0,null,7659292858.0,201956.0,1910.023162,null,1.171924669,1910.014891]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,812807457.0,21689.0,null,1107038212.0,179536.0,244.962906,null,0.263359712,244.957981]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,822623042.0,21733.0,null,1118855550.0,180088.0,247.478536,null,0.247912828,247.461377]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"futures"}},"helloworld":{"Ok":{"runs":[{"stats":{"stats":[null,127689914.0,4932.0,null,191705475.0,100164.0,44.436794,null,0.062920864,44.435094]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,149132113.0,6130.0,null,216278680.0,105344.0,51.695487,null,0.069737076,51.691979]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,114222572.0,5569.0,null,169132082.0,90284.0,41.153058,null,0.059211563,41.160816]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,143050353.0,6241.0,null,209927340.0,105988.0,49.99637,null,0.068307509,49.993071]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,359336892.0,12018.0,null,523156885.0,119200.0,124.975753,null,0.132931683,124.961714]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,393533241.0,13480.0,null,571206896.0,124900.0,136.012886,null,0.142905745,136.006007]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,314195816.0,12701.0,null,473695455.0,108336.0,113.502159,null,0.12679883,113.477623]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,383237168.0,13778.0,null,550406950.0,126416.0,133.294228,null,0.13990143,133.286746]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,377023613.0,11944.0,null,549424847.0,121392.0,129.113451,null,0.135705639,129.107661]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,411286904.0,13351.0,null,596428324.0,127176.0,138.867967,null,0.144265424,138.862214]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,306964697.0,12490.0,null,471030969.0,108008.0,110.374507,null,0.125739743,110.369657]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,396978990.0,13639.0,null,577876047.0,128608.0,135.508548,null,0.141489546,135.504021]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"helloworld"}},"html5ever":{"Ok":{"runs":[{"stats":{"stats":[null,6337173166.0,35786.0,null,9340933511.0,230412.0,1635.427781,null,1.701372913,1635.436474]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,7703703446.0,42213.0,null,11828914226.0,258072.0,1994.700041,null,2.05205338,1994.700202]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2256320316.0,37163.0,null,3968758917.0,238112.0,618.906648,null,0.620781975,618.904655]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2677297445.0,38369.0,null,4485899243.0,248464.0,726.501964,null,0.728920891,726.501075]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,9914703714.0,50431.0,null,13394825922.0,298220.0,2594.297898,null,2.116943392,2594.302724]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,11947074504.0,62854.0,null,16687486848.0,346708.0,3151.734312,null,2.537364783,3151.764957]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2696759555.0,48336.0,null,4509407263.0,295592.0,765.129926,null,0.74923508,765.069802]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,3150165261.0,50599.0,null,5066261990.0,309528.0,883.412667,null,0.864160276,883.357875]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,27160796484.0,78338.0,null,27036412299.0,385836.0,7213.651233,null,2.756708887,7213.662456]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27853432115.0,69841.0,null,28216648600.0,372176.0,7378.719818,null,3.02761657,7378.717648]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2798398960.0,50607.0,null,4626142495.0,303284.0,792.197372,null,0.757384315,792.142625]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,3379509563.0,52250.0,null,5300345871.0,317336.0,935.981194,null,0.868922214,935.935838]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"html5ever"}},"hyper":{"Ok":{"runs":[{"stats":{"stats":[null,4325960404.0,21311.0,null,4737587925.0,179776.0,1122.936208,null,1.148614297,1122.947901]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,5482801185.0,34424.0,null,6053943689.0,232952.0,1426.371078,null,1.462004481,1426.369015]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1544101185.0,33387.0,null,1913977214.0,222432.0,440.658542,null,0.451292906,440.657048]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1648162672.0,34109.0,null,2002277343.0,232072.0,464.225008,null,0.457091917,464.224581]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,16406538277.0,49873.0,null,17249820021.0,307396.0,4334.897184,null,2.259324224,4334.888811]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,19964945209.0,63852.0,null,20607926603.0,360328.0,5318.938753,null,2.760886154,5318.907034]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2396905457.0,46392.0,null,2871824828.0,298560.0,708.067452,null,0.685276472,707.972639]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2560240119.0,47321.0,null,2999775751.0,308316.0,749.835168,null,0.696610231,749.713451]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,59385417240.0,49575.0,null,47041153557.0,297768.0,15702.602949,null,3.509073497,15702.621077]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,69510179827.0,62940.0,null,55107723748.0,344936.0,18473.681087,null,4.076754212,18473.676175]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2464673347.0,48135.0,null,2938506598.0,289216.0,720.167223,null,0.685172003,720.064794]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,6391850655.0,54772.0,null,6931983005.0,321808.0,1749.882722,null,1.198710047,1749.801002]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"hyper"}},"inflate":{"Ok":{"runs":[{"stats":{"stats":[null,5988513501.0,28769.0,null,12107420350.0,179152.0,1536.968029,null,1.5715513,1536.967734]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,6430973128.0,31550.0,null,12851738412.0,191916.0,1652.618521,null,1.686928271,1652.61776]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,538827251.0,13355.0,null,827983423.0,133196.0,159.096531,null,0.191955538,159.108877]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,6367147146.0,33567.0,null,12716126827.0,200792.0,1637.518161,null,1.651052064,1637.517167]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,9844602890.0,57586.0,null,16641005845.0,295896.0,2560.585667,null,2.371135223,2560.59402]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,10621453257.0,60918.0,null,17854715265.0,311344.0,2773.033019,null,2.503468749,2773.022805]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,732750626.0,18173.0,null,1149967108.0,159308.0,221.299791,null,0.245527197,221.277129]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,10445409770.0,63558.0,null,17634713112.0,313240.0,2729.160024,null,2.438931216,2729.164792]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,32145789791.0,71391.0,null,51928647972.0,346532.0,8219.23773,null,7.976055623,8219.217362]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,32821842473.0,75703.0,null,52898084385.0,346228.0,8371.979222,null,8.087212822,8371.953805]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,711468606.0,17487.0,null,1122043572.0,155836.0,211.947061,null,0.237293728,211.952313]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,31098068595.0,74859.0,null,50555434633.0,346928.0,7900.511249,null,7.880763953,7900.496907]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"inflate"}},"issue-46449":{"Ok":{"runs":[{"stats":{"stats":[null,234039700.0,6131.0,null,346305684.0,115532.0,73.32916,null,0.091386146,73.328674]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,288642592.0,7911.0,null,418361319.0,124364.0,89.419252,null,0.107786352,89.441381]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,174176581.0,7577.0,null,257908536.0,109588.0,59.493242,null,0.076142208,59.491297]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,264772036.0,8223.0,null,382542682.0,126132.0,83.510301,null,0.100555905,83.507677]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"io error 6144","path":"0-io-error-6144.patch"}}},{"stats":{"stats":[null,272047589.0,8218.0,null,381594353.0,126012.0,85.68224,null,0.102724067,85.680465]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"u32 3072","path":"1-u32-3072.patch"}}},{"stats":{"stats":[null,234500127.0,8215.0,null,344218513.0,125876.0,75.900699,null,0.092809543,75.897571]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"u8 3072","path":"2-u8-3072.patch"}}},{"stats":{"stats":[null,260616411.0,8213.0,null,381660637.0,125632.0,82.54817,null,0.099594744,82.545965]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"empty 3072","path":"3-empty-3072.patch"}}},{"stats":{"stats":[null,266853399.0,8217.0,null,382983367.0,126136.0,84.009467,null,0.101059725,84.015845]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"static str 6144","path":"4-static-str-6144.patch"}}},{"stats":{"stats":[null,811074752.0,9819.0,null,957187506.0,138072.0,236.430333,null,0.148696549,236.426106]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,910175866.0,11749.0,null,1085105312.0,146656.0,264.313422,null,0.170050674,264.323761]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,225360718.0,8712.0,null,320512221.0,122012.0,79.369653,null,0.092207976,79.352051]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,881801093.0,12237.0,null,1028086936.0,148552.0,257.975283,null,0.161074795,257.944703]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"io error 6144","path":"0-io-error-6144.patch"}}},{"stats":{"stats":[null,814869742.0,12208.0,null,957241634.0,148664.0,240.701556,null,0.152269017,240.701993]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"u32 3072","path":"1-u32-3072.patch"}}},{"stats":{"stats":[null,776531996.0,12080.0,null,910713379.0,147844.0,229.447586,null,0.142417517,229.479352]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"u8 3072","path":"2-u8-3072.patch"}}},{"stats":{"stats":[null,823908460.0,12093.0,null,960350139.0,148300.0,241.646018,null,0.1504954,241.657728]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"empty 3072","path":"3-empty-3072.patch"}}},{"stats":{"stats":[null,830437287.0,12121.0,null,965972566.0,148740.0,244.064864,null,0.152032025,244.059265]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"static str 6144","path":"4-static-str-6144.patch"}}},{"stats":{"stats":[null,2346918067.0,11695.0,null,2300992280.0,146084.0,639.664502,null,0.268949521,639.65049]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,2495124528.0,13721.0,null,2436493648.0,154304.0,682.290048,null,0.294722137,682.273086]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,227037717.0,8738.0,null,322217751.0,120968.0,77.595827,null,0.090946738,77.589518]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,2377200222.0,13990.0,null,2361125155.0,155904.0,649.442805,null,0.295101707,649.452228]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"io error 6144","path":"0-io-error-6144.patch"}}},{"stats":{"stats":[null,1405307496.0,13079.0,null,1427374591.0,152312.0,397.579587,null,0.189361954,397.58573]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"u32 3072","path":"1-u32-3072.patch"}}},{"stats":{"stats":[null,1290967293.0,13019.0,null,1325397326.0,151656.0,367.18001,null,0.178310387,367.150848]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":2,"name":"u8 3072","path":"2-u8-3072.patch"}}},{"stats":{"stats":[null,1313933040.0,13012.0,null,1357137089.0,151852.0,374.355204,null,0.189435474,374.340903]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":3,"name":"empty 3072","path":"3-empty-3072.patch"}}},{"stats":{"stats":[null,1318203692.0,13019.0,null,1367377030.0,152228.0,374.273394,null,0.188876582,374.261572]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":4,"name":"static str 6144","path":"4-static-str-6144.patch"}}}],"name":"issue-46449"}},"keccak":{"Ok":{"runs":[{"stats":{"stats":[null,20648695169.0,140904.0,null,40664083833.0,501508.0,5337.692829,null,5.356172435,5337.694539]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,22014433374.0,147200.0,null,43104165469.0,523500.0,5666.137806,null,5.700817143,5666.138027]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1653053873.0,34003.0,null,2009638153.0,201636.0,461.585563,null,0.478831497,461.584251]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,28759888520.0,334121.0,null,51478287105.0,1230536.0,7519.050026,null,7.512947948,7519.038721]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,30407401239.0,337546.0,null,54779678721.0,1248384.0,7963.152222,null,7.926107685,7963.159617]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2004944439.0,42460.0,null,2718364882.0,240460.0,564.219364,null,0.58046873,564.226359]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,25963588789.0,280063.0,null,51900157350.0,1017788.0,6768.930877,null,6.768569924,6768.933256]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27941639696.0,285595.0,null,55105031607.0,1043172.0,7273.951686,null,7.244613617,7273.971085]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1988355207.0,43594.0,null,2664747215.0,242984.0,556.042381,null,0.574306566,556.061921]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"keccak"}},"packed-simd":{"Err":"ErrorMessage { msg: \"expected success, got exit code: 101\\n\\nstderr=    Checking cfg-if v0.1.6\\n    Checking packed_simd v0.3.0 (/tmp/.tmp0RAmzB)\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:5:1\\n    |\\n5   | / impl_const_p!(\\n6   | |     [*const T; 2]: cptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n7   | |     /// A vector with 2 `*const T` lanes\\n8   | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:10:1\\n    |\\n10  | / impl_mut_p!(\\n11  | |     [*mut T; 2]: mptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n12  | |     /// A vector with 2 `*mut T` lanes\\n13  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:15:1\\n    |\\n15  | / impl_const_p!(\\n16  | |     [*const T; 4]: cptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n17  | |     /// A vector with 4 `*const T` lanes\\n18  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:20:1\\n    |\\n20  | / impl_mut_p!(\\n21  | |     [*mut T; 4]: mptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n22  | |     /// A vector with 4 `*mut T` lanes\\n23  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:25:1\\n    |\\n25  | / impl_const_p!(\\n26  | |     [*const T; 8]: cptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n27  | |     /// A vector with 8 `*const T` lanes\\n28  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:525:36\\n    |\\n525 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:30:1\\n    |\\n30  | / impl_mut_p!(\\n31  | |     [*mut T; 8]: mptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n32  | |     /// A vector with 8 `*mut T` lanes\\n33  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:5:1\\n    |\\n5   | / impl_const_p!(\\n6   | |     [*const T; 2]: cptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n7   | |     /// A vector with 2 `*const T` lanes\\n8   | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:10:1\\n    |\\n10  | / impl_mut_p!(\\n11  | |     [*mut T; 2]: mptrx2, msizex2, usizex2, isizex2 | test_v128 | x0, x1 | From: |\\n12  | |     /// A vector with 2 `*mut T` lanes\\n13  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:15:1\\n    |\\n15  | / impl_const_p!(\\n16  | |     [*const T; 4]: cptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n17  | |     /// A vector with 4 `*const T` lanes\\n18  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:20:1\\n    |\\n20  | / impl_mut_p!(\\n21  | |     [*mut T; 4]: mptrx4, msizex4, usizex4, isizex4 | test_v256 | x0, x1, x2, x3 | From: |\\n22  | |     /// A vector with 4 `*mut T` lanes\\n23  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:25:1\\n    |\\n25  | / impl_const_p!(\\n26  | |     [*const T; 8]: cptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n27  | |     /// A vector with 8 `*const T` lanes\\n28  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n   --> src/api/minimal/ptr.rs:711:36\\n    |\\n711 |                           target_ptr.align_offset(crate::mem::align_of::<Self>())\\n    |                                      ^^^^^^^^^^^^\\n    | \\n   ::: src/vPtr.rs:30:1\\n    |\\n30  | / impl_mut_p!(\\n31  | |     [*mut T; 8]: mptrx8, msizex8, usizex8, isizex8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 | From: |\\n32  | |     /// A vector with 8 `*mut T` lanes\\n33  | | );\\n    | |__- in this macro invocation\\n    |\\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n    = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:18:36\\n   |\\n18 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/from_slice.rs:49:32\\n   |\\n49 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:19:36\\n   |\\n19 |                           target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                      ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:5:1\\n   |\\n5  | / impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |\\n6  | |         From: |\\n7  | |         /// A 16-bit vector with 2 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v16.rs:9:1\\n   |\\n9  | / impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |\\n10 | |         From: |\\n11 | |         /// A 16-bit vector with 2 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:5:1\\n   |\\n5  | / impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |\\n6  | |         From: |\\n7  | |         /// A 32-bit vector with 4 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:9:1\\n   |\\n9  | / impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |\\n10 | |         From: |\\n11 | |         /// A 32-bit vector with 4 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:18:1\\n   |\\n18 | / impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |\\n19 | |         From: i8x2, u8x2 |\\n20 | |         /// A 32-bit vector with 2 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v32.rs:22:1\\n   |\\n22 | / impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |\\n23 | |         From: u8x2 |\\n24 | |         /// A 32-bit vector with 2 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:5:1\\n   |\\n5  | / impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n6  | |         From: |\\n7  | |         /// A 64-bit vector with 8 `i8` lanes.\\n8  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:9:1\\n   |\\n9  | / impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n10 | |         From: |\\n11 | |         /// A 64-bit vector with 8 `u8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:18:1\\n   |\\n18 | / impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |\\n19 | |         From: i8x4, u8x4 |\\n20 | |         /// A 64-bit vector with 4 `i16` lanes.\\n21 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:22:1\\n   |\\n22 | / impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |\\n23 | |         From: u8x4 |\\n24 | |         /// A 64-bit vector with 4 `u16` lanes.\\n25 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:31:1\\n   |\\n31 | / impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |\\n32 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n33 | |         /// A 64-bit vector with 2 `i32` lanes.\\n34 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:35:1\\n   |\\n35 | / impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |\\n36 | |         From: u8x2, u16x2 |\\n37 | |         /// A 64-bit vector with 2 `u32` lanes.\\n38 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v64.rs:43:1\\n   |\\n43 | / impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |\\n44 | |         From: i8x2, u8x2, i16x2, u16x2 |\\n45 | |         /// A 64-bit vector with 2 `f32` lanes.\\n46 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:5:1\\n   |\\n5  | / impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n7  | |         From: |\\n8  | |         /// A 128-bit vector with 16 `i8` lanes.\\n9  | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:10:1\\n   |\\n10 | / impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |\\n11 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n12 | |         From: |\\n13 | |         /// A 128-bit vector with 16 `u8` lanes.\\n14 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:21:1\\n   |\\n21 | / impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n22 | |         From: i8x8, u8x8 |\\n23 | |         /// A 128-bit vector with 8 `i16` lanes.\\n24 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:25:1\\n   |\\n25 | / impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n26 | |         From: u8x8 |\\n27 | |         /// A 128-bit vector with 8 `u16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:34:1\\n   |\\n34 | / impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |\\n35 | |         From: i8x4, u8x4, i16x4, u16x4  |\\n36 | |         /// A 128-bit vector with 4 `i32` lanes.\\n37 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:38:1\\n   |\\n38 | / impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |\\n39 | |         From: u8x4, u16x4 |\\n40 | |         /// A 128-bit vector with 4 `u32` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:42:1\\n   |\\n42 | / impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |\\n43 | |         From: i8x4, u8x4, i16x4, u16x4 |\\n44 | |         /// A 128-bit vector with 4 `f32` lanes.\\n45 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:51:1\\n   |\\n51 | / impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |\\n52 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |\\n53 | |         /// A 128-bit vector with 2 `i64` lanes.\\n54 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:55:1\\n   |\\n55 | / impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |\\n56 | |         From: u8x2, u16x2, u32x2 |\\n57 | |         /// A 128-bit vector with 2 `u64` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:59:1\\n   |\\n59 | / impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |\\n60 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |\\n61 | |         /// A 128-bit vector with 2 `f64` lanes.\\n62 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:68:1\\n   |\\n68 | / impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |\\n69 | |         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types\\n70 | |         /// A 128-bit vector with 1 `i128` lane.\\n71 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v128.rs:72:1\\n   |\\n72 | / impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |\\n73 | |         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types\\n74 | |         /// A 128-bit vector with 1 `u128` lane.\\n75 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:5:1\\n   |\\n5  | / impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n8  | |         From: |\\n9  | |         /// A 256-bit vector with 32 `i8` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:11:1\\n   |\\n11 | / impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |\\n12 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n13 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n14 | |         From: |\\n15 | |         /// A 256-bit vector with 32 `u8` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:24:1\\n   |\\n24 | / impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |\\n25 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n26 | |         From: i8x16, u8x16 |\\n27 | |         /// A 256-bit vector with 16 `i16` lanes.\\n28 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:29:1\\n   |\\n29 | / impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |\\n30 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n31 | |         From: u8x16 |\\n32 | |         /// A 256-bit vector with 16 `u16` lanes.\\n33 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:40:1\\n   |\\n40 | / impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |\\n41 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n42 | |         /// A 256-bit vector with 8 `i32` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:44:1\\n   |\\n44 | / impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n45 | |         From: u8x8, u16x8 |\\n46 | |         /// A 256-bit vector with 8 `u32` lanes.\\n47 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:48:1\\n   |\\n48 | / impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n49 | |         From: i8x8, u8x8, i16x8, u16x8 |\\n50 | |         /// A 256-bit vector with 8 `f32` lanes.\\n51 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:57:1\\n   |\\n57 | / impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |\\n58 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |\\n59 | |         /// A 256-bit vector with 4 `i64` lanes.\\n60 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:61:1\\n   |\\n61 | / impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |\\n62 | |         From: u8x4, u16x4, u32x4 |\\n63 | |         /// A 256-bit vector with 4 `u64` lanes.\\n64 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:65:1\\n   |\\n65 | / impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |\\n66 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |\\n67 | |         /// A 256-bit vector with 4 `f64` lanes.\\n68 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:74:1\\n   |\\n74 | / impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |\\n75 | |         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |\\n76 | |         /// A 256-bit vector with 2 `i128` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v256.rs:78:1\\n   |\\n78 | / impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |\\n79 | |         From: u8x2, u16x2, u32x2, u64x2 |\\n80 | |         /// A 256-bit vector with 2 `u128` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:5:1\\n   |\\n5  | / impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |\\n6  | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n7  | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n8  | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n11 | |         /// A 512-bit vector with 64 `i8` lanes.\\n12 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:13:1\\n   |\\n13 | / impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |\\n14 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n15 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,\\n16 | |         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,\\n...  |\\n19 | |         /// A 512-bit vector with 64 `u8` lanes.\\n20 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:30:1\\n   |\\n30 | / impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |\\n31 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n32 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n33 | |         From: i8x32, u8x32 |\\n34 | |         /// A 512-bit vector with 32 `i16` lanes.\\n35 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:36:1\\n   |\\n36 | / impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |\\n37 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,\\n38 | |         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |\\n39 | |         From: u8x32 |\\n40 | |         /// A 512-bit vector with 32 `u16` lanes.\\n41 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:49:1\\n   |\\n49 | / impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |\\n50 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n51 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n52 | |         /// A 512-bit vector with 16 `i32` lanes.\\n53 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:54:1\\n   |\\n54 | / impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |\\n55 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n56 | |         From: u8x16, u16x16 |\\n57 | |         /// A 512-bit vector with 16 `u32` lanes.\\n58 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:59:1\\n   |\\n59 | / impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |\\n60 | |         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |\\n61 | |         From: i8x16, u8x16, i16x16, u16x16 |\\n62 | |         /// A 512-bit vector with 16 `f32` lanes.\\n63 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:70:1\\n   |\\n70 | / impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n71 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |\\n72 | |         /// A 512-bit vector with 8 `i64` lanes.\\n73 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:74:1\\n   |\\n74 | / impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n75 | |         From: u8x8, u16x8, u32x8 |\\n76 | |         /// A 512-bit vector with 8 `u64` lanes.\\n77 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:78:1\\n   |\\n78 | / impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |\\n79 | |         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |\\n80 | |         /// A 512-bit vector with 8 `f64` lanes.\\n81 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:87:1\\n   |\\n87 | / impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |\\n88 | |         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |\\n89 | |         /// A 512-bit vector with 4 `i128` lanes.\\n90 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/v512.rs:91:1\\n   |\\n91 | / impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |\\n92 | |         From: u8x4, u16x4, u32x4, u64x4 |\\n93 | |         /// A 512-bit vector with 4 `u128` lanes.\\n94 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:6:1\\n   |\\n6  | / impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |\\n7  | |         x0, x1|\\n8  | |         From: |\\n9  | |         /// A vector with 2 `isize` lanes.\\n10 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:12:1\\n   |\\n12 | / impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |\\n13 | |         x0, x1|\\n14 | |         From: |\\n15 | |         /// A vector with 2 `usize` lanes.\\n16 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:23:1\\n   |\\n23 | / impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |\\n24 | |         x0, x1, x2, x3 |\\n25 | |         From: |\\n26 | |         /// A vector with 4 `isize` lanes.\\n27 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:28:1\\n   |\\n28 | / impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |\\n29 | |         x0, x1, x2, x3|\\n30 | |         From: |\\n31 | |         /// A vector with 4 `usize` lanes.\\n32 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:39:1\\n   |\\n39 | / impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |\\n40 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n41 | |         From: |\\n42 | |         /// A vector with 4 `isize` lanes.\\n43 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror[E0658]: use of unstable library feature \\'align_offset\\'\\n  --> src/api/slice/write_to_slice.rs:54:32\\n   |\\n54 |                       target_ptr.align_offset(crate::mem::align_of::<Self>()),\\n   |                                  ^^^^^^^^^^^^\\n   | \\n  ::: src/vSize.rs:44:1\\n   |\\n44 | / impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |\\n45 | |         x0, x1, x2, x3, x4, x5, x6, x7 |\\n46 | |         From: |\\n47 | |         /// A vector with 8 `usize` lanes.\\n48 | | );\\n   | |__- in this macro invocation\\n   |\\n   = note: for more information, see https://github.com/rust-lang/rust/issues/44488\\n   = help: add #![feature(align_offset)] to the crate attributes to enable\\n\\nerror: aborting due to 232 previous errors\\n\\nFor more information about this error, try `rustc --explain E0658`.\\nerror: Could not compile `packed_simd`.\\n\\nTo learn more, run the command again with --verbose.\\n\\n\\n stdout=\" }\n\nstack backtrace:\n   0:     0x55fa428f13bd - backtrace::backtrace::libunwind::trace::h8397bdb6a24b9f40\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/libunwind.rs:53\n                         - backtrace::backtrace::trace::h125f2cf00fdf546b\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/mod.rs:42\n   1:     0x55fa428f1552 - backtrace::capture::Backtrace::new_unresolved::h4d6de04be21bce48\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/capture.rs:88\n   2:     0x55fa428f086c - failure::backtrace::internal::InternalBacktrace::new::hc3b584ab8d252034\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/backtrace/internal.rs:44\n                         - failure::backtrace::Backtrace::new::h6f39e1906f974748\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/backtrace/mod.rs:111\n   3:     0x55fa4288c470 - <failure::error::error_impl::ErrorImpl as core::convert::From<F>>::from::h2fd1b3a4ef3bebbf\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/error/error_impl.rs:19\n                         - <failure::error::Error as core::convert::From<F>>::from::hd1f148dfe530685d\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/error/mod.rs:36\n                         - failure::error_message::err_msg::h361242fbf0484899\n                        at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/failure-0.1.5/src/error_message.rs:12\n                         - collector::command_output::h10ec8cf3e6f97b45\n                        at collector/src/lib.rs:527\n   4:     0x55fa4257aafa - collector::execute::CargoProcess::run_rustc::h061e683ca8dccf36\n                        at collector/src/bin/rustc-perf-collector/execute.rs:229\n   5:     0x55fa42582722 - collector::execute::Benchmark::measure::h2d0f9223356097f9\n                        at collector/src/bin/rustc-perf-collector/execute.rs:708\n   6:     0x55fa42594541 - collector::bench_commit::hfdb1fac25c1605dc\n                        at collector/src/bin/rustc-perf-collector/main.rs:191\n   7:     0x55fa425a3a1b - collector::main_result::hc71525e6d78bdd83\n                        at collector/src/bin/rustc-perf-collector/main.rs:511\n   8:     0x55fa4259996e - collector::main::hdbaeb352a8e60c44\n                        at collector/src/bin/rustc-perf-collector/main.rs:264\n   9:     0x55fa4254de22 - std::rt::lang_start::{{closure}}::h8ccb8ec391a6ef8d\n                        at /rustc/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/libstd/rt.rs:64\n  10:     0x55fa429180d2 - {{closure}}\n                        at src/libstd/rt.rs:49\n                         - do_call<closure,i32>\n                        at src/libstd/panicking.rs:293\n  11:     0x55fa42922d39 - __rust_maybe_catch_panic\n                        at src/libpanic_unwind/lib.rs:87\n  12:     0x55fa42918c9c - try<i32,closure>\n                        at src/libstd/panicking.rs:272\n                         - catch_unwind<closure,i32>\n                        at src/libstd/panic.rs:388\n                         - lang_start_internal\n                        at src/libstd/rt.rs:48\n  13:     0x55fa425a7d57 - main\n  14:     0x7fcb65f2282f - __libc_start_main\n  15:     0x55fa42543518 - _start\n  16:                0x0 - <unknown>"},"piston-image":{"Ok":{"runs":[{"stats":{"stats":[null,7175099339.0,26716.0,null,8656009899.0,202280.0,1841.275459,null,1.878936442,1841.291755]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,8770406498.0,40509.0,null,10654849636.0,258648.0,2258.030183,null,2.294022166,2258.028172]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1728602614.0,37136.0,null,2177752600.0,238448.0,491.772524,null,0.497174857,491.762037]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1828187504.0,37598.0,null,2269539120.0,247368.0,514.419683,null,0.5047396,514.419211]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,35634509769.0,101426.0,null,36631942450.0,503524.0,9432.337531,null,4.027832843,9432.34995]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,39576385817.0,101143.0,null,40995546433.0,505024.0,10482.147626,null,4.706756244,10482.130796]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3164289476.0,62889.0,null,3943343100.0,381016.0,919.308739,null,0.889113237,919.217591]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,3443852246.0,64191.0,null,4241837873.0,392204.0,992.861506,null,0.92913335,992.766074]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,148126153722.0,86544.0,null,120453755887.0,434008.0,39142.104826,null,7.956754296,39142.140348]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,162167617697.0,108165.0,null,128426526564.0,501028.0,42980.899386,null,8.260380553,42981.035255]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,3282682950.0,64627.0,null,4043094137.0,362200.0,937.003856,null,0.89291995,936.92203]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,5178361922.0,67349.0,null,6245870684.0,380440.0,1419.391782,null,1.297134508,1419.298436]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"piston-image"}},"regex":{"Ok":{"runs":[{"stats":{"stats":[null,3557385442.0,19019.0,null,3958840871.0,170240.0,922.173712,null,0.951552352,922.173167]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,4533649277.0,29896.0,null,5068057072.0,215116.0,1181.559193,null,1.255033772,1181.557775]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1137675899.0,26299.0,null,1501228726.0,193772.0,324.598335,null,0.323182065,324.597317]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1856033715.0,29982.0,null,2254469829.0,215844.0,507.412124,null,0.529721955,507.410863]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"compile one","path":"0-compile-one.patch"}}},{"stats":{"stats":[null,1180088979.0,26745.0,null,1553095150.0,202664.0,338.38809,null,0.336433301,338.386959]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"is valid cap letter","path":"1-is-valid-cap-letter.patch"}}},{"stats":{"stats":[null,1223585109.0,27063.0,null,1600316189.0,204344.0,348.493346,null,0.366441974,348.492985]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"expand","path":"2-expand.patch"}}},{"stats":{"stats":[null,1870232390.0,29991.0,null,2275736889.0,215892.0,511.987514,null,0.512354986,511.986176]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"Compiler new","path":"3-Compiler-new.patch"}}},{"stats":{"stats":[null,1860975162.0,29991.0,null,2274553829.0,215996.0,511.826143,null,0.531484544,511.824677]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"reverse","path":"4-reverse.patch"}}},{"stats":{"stats":[null,1154712093.0,26731.0,null,1538349147.0,202016.0,330.341025,null,0.330858245,330.339526]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":5,"name":"byte frequencies","path":"5-byte-frequencies.patch"}}},{"stats":{"stats":[null,1594694163.0,29530.0,null,1981017756.0,213792.0,442.509418,null,0.47713355,442.524057]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":6,"name":"sparse set","path":"6-sparse-set.patch"}}},{"stats":{"stats":[null,1364360529.0,27254.0,null,1724465884.0,204856.0,384.105741,null,0.383968585,384.10558]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":7,"name":"Job","path":"7-Job.patch"}}},{"stats":{"stats":[null,1420012265.0,29425.0,null,1774932343.0,213304.0,397.332498,null,0.432133068,397.33162]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":8,"name":"println","path":"8-println.patch"}}},{"stats":{"stats":[null,27186067857.0,76365.0,null,22842152916.0,401344.0,7266.638862,null,2.206847283,7266.651026]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,29145770590.0,78342.0,null,25706974773.0,414448.0,7786.02186,null,2.638299963,7786.079108]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1854159540.0,41717.0,null,2258150358.0,275316.0,552.952816,null,0.528712576,552.908223]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,6264515052.0,55708.0,null,6863558644.0,333708.0,1724.031242,null,0.982183834,1723.976837]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"compile one","path":"0-compile-one.patch"}}},{"stats":{"stats":[null,1901898788.0,42093.0,null,2343331151.0,283556.0,568.224535,null,0.531974161,568.120435]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"is valid cap letter","path":"1-is-valid-cap-letter.patch"}}},{"stats":{"stats":[null,2565930092.0,45006.0,null,3075428618.0,294492.0,741.032502,null,0.634801038,740.970241]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"expand","path":"2-expand.patch"}}},{"stats":{"stats":[null,6241963355.0,55505.0,null,6897255838.0,333328.0,1712.922093,null,0.988588631,1712.868331]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":3,"name":"Compiler new","path":"3-Compiler-new.patch"}}},{"stats":{"stats":[null,6262840872.0,56377.0,null,6892577984.0,336232.0,1720.992182,null,0.975447519,1720.938695]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":4,"name":"reverse","path":"4-reverse.patch"}}},{"stats":{"stats":[null,1840313641.0,41995.0,null,2286503431.0,278320.0,548.40314,null,0.523463034,548.30542]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":5,"name":"byte frequencies","path":"5-byte-frequencies.patch"}}},{"stats":{"stats":[null,20273192483.0,81683.0,null,17600827556.0,430696.0,5482.067584,null,1.502525278,5482.056782]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":6,"name":"sparse set","path":"6-sparse-set.patch"}}},{"stats":{"stats":[null,19394389204.0,81621.0,null,16939668545.0,429320.0,5247.295723,null,1.409280318,5247.305171]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":7,"name":"Job","path":"7-Job.patch"}}},{"stats":{"stats":[null,3033071117.0,47798.0,null,3687034544.0,306020.0,866.948068,null,0.661303059,866.863665]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":8,"name":"println","path":"8-println.patch"}}},{"stats":{"stats":[null,83151996324.0,63510.0,null,66231198687.0,349704.0,21999.032374,null,4.532336063,21999.065507]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,91571785765.0,75220.0,null,71787294472.0,394312.0,24275.611295,null,4.94994523,24275.671762]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1835795150.0,41262.0,null,2285687750.0,261452.0,536.509305,null,0.506236179,536.456585]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,51982328356.0,74846.0,null,41866479545.0,393988.0,13821.443854,null,2.962138956,13821.471176]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"compile one","path":"0-compile-one.patch"}}},{"stats":{"stats":[null,2083879446.0,42263.0,null,2572487007.0,274200.0,603.955217,null,0.522376694,603.893171]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"is valid cap letter","path":"1-is-valid-cap-letter.patch"}}},{"stats":{"stats":[null,2146416380.0,42338.0,null,2614461919.0,274500.0,619.31673,null,0.55817423,619.254462]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":2,"name":"expand","path":"2-expand.patch"}}},{"stats":{"stats":[null,52006811474.0,74739.0,null,41904605473.0,394172.0,13836.73382,null,2.953085873,13836.772732]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":3,"name":"Compiler new","path":"3-Compiler-new.patch"}}},{"stats":{"stats":[null,52189812675.0,74986.0,null,41898748109.0,394284.0,13869.258019,null,2.969037765,13869.289788]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":4,"name":"reverse","path":"4-reverse.patch"}}},{"stats":{"stats":[null,1859813166.0,41491.0,null,2310522418.0,264440.0,541.57907,null,0.510668043,541.546206]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":5,"name":"byte frequencies","path":"5-byte-frequencies.patch"}}},{"stats":{"stats":[null,71470958133.0,77101.0,null,58106048143.0,404648.0,18980.181384,null,3.572344622,18980.250525]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":6,"name":"sparse set","path":"6-sparse-set.patch"}}},{"stats":{"stats":[null,71709579034.0,76714.0,null,57869974320.0,404440.0,19054.832625,null,3.504401945,19054.871054]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":7,"name":"Job","path":"7-Job.patch"}}},{"stats":{"stats":[null,9730087368.0,56605.0,null,12849830600.0,328968.0,2566.525581,null,1.907466661,2566.479536]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":8,"name":"println","path":"8-println.patch"}}}],"name":"regex"}},"regression-31157":{"Ok":{"runs":[{"stats":{"stats":[null,885540640.0,8030.0,null,1222060088.0,126448.0,238.691001,null,0.256850121,238.689474]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,1101513429.0,11210.0,null,1489590725.0,139732.0,296.651117,null,0.31465574,296.649417]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,268690228.0,10674.0,null,398964707.0,122984.0,86.925237,null,0.101011543,86.922978]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,364392412.0,11322.0,null,514605874.0,140204.0,112.656855,null,0.12633128,112.654776]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,7091218020.0,27743.0,null,7612866461.0,213384.0,1894.038972,null,0.873301173,1894.042369]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,7737772847.0,32554.0,null,8489696437.0,233300.0,2072.876742,null,1.016048518,2072.885085]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,657302433.0,17451.0,null,852201444.0,167396.0,204.314787,null,0.226260117,204.303549]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,838002905.0,19663.0,null,1060031934.0,189344.0,254.652208,null,0.239948624,254.637247]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,26219332200.0,28716.0,null,24651320950.0,214184.0,6877.013855,null,2.63680346,6877.055122]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27859851789.0,34928.0,null,25809744804.0,234588.0,7320.997353,null,2.742747279,7320.997192]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,673320501.0,18583.0,null,858337488.0,164064.0,205.989376,null,0.22174698,205.962293]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,9391047337.0,30221.0,null,9926904110.0,222300.0,2473.149719,null,1.376098208,2473.126588]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"regression-31157"}},"ripgrep":{"Ok":{"runs":[{"stats":{"stats":[null,2915847202.0,17527.0,null,3473177612.0,166588.0,759.76632,null,0.797329163,759.764589]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3758321384.0,27004.0,null,4459946699.0,206448.0,982.837345,null,1.020645572,982.835952]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,820574141.0,23695.0,null,1159859356.0,184928.0,243.02458,null,0.24439201,243.022851]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,979094000.0,25076.0,null,1346919455.0,198872.0,282.785044,null,0.312277128,282.782865]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,19721170091.0,105172.0,null,21145180643.0,331668.0,5407.767454,null,3.070687862,5407.770401]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,22702524292.0,118441.0,null,24678208092.0,373516.0,6245.419177,null,3.548849011,6245.460271]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,5061775612.0,92963.0,null,6430351558.0,283188.0,1617.213276,null,1.585892116,1617.140349]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,5317815356.0,93469.0,null,6606023610.0,290124.0,1670.023459,null,1.627424136,1669.959668]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,155166146157.0,184213.0,null,122474444727.0,640236.0,41311.007757,null,7.862582629,41311.061953]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,170448190331.0,186236.0,null,133297690744.0,635212.0,45466.463011,null,8.289587697,45466.531895]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,4337767033.0,90780.0,null,6780431170.0,302312.0,1327.630745,null,1.274358676,1327.524586]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,7304754971.0,99427.0,null,10307993642.0,355100.0,2108.720934,null,1.775730776,2108.603144]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"ripgrep"}},"script-servo":{"Ok":{"runs":[{"stats":{"stats":[null,172062671962.0,708585.0,null,189536360860.0,2428252.0,44432.458084,null,44.473692095,44432.484122]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,216056171609.0,1115162.0,null,245485260397.0,3887544.0,56051.11966,null,56.093890311,56051.162164]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,75591123871.0,1054793.0,null,88583521045.0,4232144.0,20646.994077,null,19.92427795,20646.996369]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,77289361752.0,1055071.0,null,88767220786.0,4170452.0,20661.284696,null,19.918156876,20661.287728]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"debugging println in dependency","path":"0-debugging-println-in-dependency.patch"}}},{"stats":{"stats":[null,78716963194.0,1056150.0,null,91550315404.0,4229876.0,20999.405496,null,21.685456997,20999.402657]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"println","path":"1-println.patch"}}},{"stats":{"stats":[null,166945594739.0,1326203.0,null,188013202007.0,4805088.0,44062.356648,null,43.317192061,44062.355226]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"commit 8b0f58c8a","path":"2-commit-8b0f58c8a.patch"}}},{"stats":{"stats":[null,809890186327.0,2150534.0,null,773041832633.0,6395840.0,214348.026803,null,90.831251494,214348.18886]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,1495888587604.0,3046353.0,null,1699789029716.0,8573464.0,394970.388662,null,190.859185205,394971.303618]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,104319792119.0,1505590.0,null,119567772538.0,9130160.0,30414.945644,null,42.701733428,30412.865869]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,122372091647.0,1535764.0,null,138952275092.0,8966776.0,35260.655194,null,42.187572144,35259.275286]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"debugging println in dependency","path":"0-debugging-println-in-dependency.patch"}}},{"stats":{"stats":[null,112059430187.0,1497162.0,null,126699097203.0,8200636.0,31909.189642,null,44.747303922,31906.714404]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"println","path":"1-println.patch"}}},{"stats":{"stats":[null,1291365119110.0,3165363.0,null,1499470144683.0,9461060.0,343189.783369,null,161.451694658,343189.984219]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":2,"name":"commit 8b0f58c8a","path":"2-commit-8b0f58c8a.patch"}}},{"stats":{"stats":[null,2976003646206.0,2550256.0,null,2244402503476.0,4263352.0,787872.650281,null,184.121306042,787873.001908]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,4166339682895.0,3309090.0,null,3223993753175.0,5412304.0,1108052.148454,null,213.138085606,1108053.748058]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,101895048135.0,1415121.0,null,113451923928.0,5794600.0,28186.365756,null,26.193505654,28185.42877]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1493015291450.0,2197179.0,null,1148648293219.0,7261576.0,398330.563255,null,85.043999961,398330.652005]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"debugging println in dependency","path":"0-debugging-println-in-dependency.patch"}}},{"stats":{"stats":[null,415053916293.0,1758776.0,null,420371323211.0,6599536.0,109370.612187,null,68.225861918,109370.119882]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"println","path":"1-println.patch"}}},{"stats":{"stats":[null,4065202798564.0,3518597.0,null,3117304730352.0,6665372.0,1082588.82053,null,197.271050608,1082590.761013]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":2,"name":"commit 8b0f58c8a","path":"2-commit-8b0f58c8a.patch"}}}],"name":"script-servo"}},"sentry-cli":{"Ok":{"runs":[{"stats":{"stats":[null,9106886992.0,35140.0,null,11384503493.0,250028.0,2335.157729,null,2.353230195,2335.156858]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,11265738492.0,53999.0,null,14367314294.0,325788.0,2901.358162,null,2.91976174,2901.356974]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2608605690.0,47818.0,null,3603073010.0,296072.0,722.538817,null,0.70780795,722.540007]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,3329634640.0,50215.0,null,4307232586.0,312760.0,904.218253,null,0.890016627,904.21803]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,53197685889.0,334587.0,null,61390345755.0,955536.0,14233.982128,null,10.442374689,14233.955664]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,69126184669.0,291725.0,null,71412652089.0,711756.0,18788.846366,null,9.602602425,18788.908732]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,12672638492.0,220803.0,null,14458982423.0,497056.0,3840.595373,null,3.763403482,3840.443823]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,17815368479.0,246833.0,null,19558212190.0,597768.0,5232.249156,null,4.357488486,5232.110016]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,356738062869.0,240170.0,null,290245778319.0,773992.0,94354.976947,null,19.384790003,94355.024813]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,399481417480.0,243423.0,null,315889316963.0,756572.0,105909.458594,null,20.881799141,105909.645872]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,8020328265.0,153480.0,null,8956008824.0,515076.0,2349.146462,null,2.222671935,2348.955177]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,220430541199.0,226360.0,null,174417086709.0,717068.0,58615.192177,null,11.600330417,58615.282529]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"sentry-cli"}},"serde":{"Ok":{"runs":[{"stats":{"stats":[null,19717455250.0,41518.0,null,29577844036.0,255728.0,4999.538107,null,5.031500055,4999.548439]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,22854886307.0,65381.0,null,33432021279.0,351768.0,5819.145187,null,5.853467318,5819.145191]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3366578355.0,63886.0,null,4217245945.0,334100.0,924.936011,null,0.912131216,924.935096]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,21759395474.0,50039.0,null,32417187552.0,299924.0,5536.030054,null,5.432799279,5536.026977]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,25668694769.0,78580.0,null,37315304788.0,412028.0,6564.262378,null,6.43150294,6564.294829]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3859241281.0,73097.0,null,5143627916.0,380712.0,1081.405853,null,1.061347806,1081.382969]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,23066747025.0,51281.0,null,33327454256.0,305440.0,5894.479441,null,5.443418015,5894.45232]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,27131889961.0,79937.0,null,38239002479.0,418600.0,6955.009422,null,6.455012365,6955.007524]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,3846185437.0,72239.0,null,5135774057.0,376996.0,1067.941701,null,1.048342109,1067.930185]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"serde"}},"style-servo":{"Ok":{"runs":[{"stats":{"stats":[null,107078376159.0,330858.0,null,121573369369.0,1373140.0,27224.488126,null,27.260886558,27224.476171]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,131585681083.0,593862.0,null,152815753359.0,2246784.0,33678.315736,null,33.731537227,33678.323141]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,39767075216.0,512220.0,null,47766481395.0,2123168.0,10663.863761,null,10.29273099,10663.86697]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,78228311548.0,575802.0,null,92460681991.0,2354536.0,20572.008818,null,20.190359248,20571.989723]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,83986769586.0,592984.0,null,95297497155.0,2451152.0,21819.702676,null,21.424238439,21819.715392]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"b9b3e592dd cherry picked","path":"1-b9b3e592dd-cherry-picked.patch"}}},{"stats":{"stats":[null,279463314462.0,746525.0,null,296977787512.0,2728716.0,73302.579881,null,41.745901293,73302.632956]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,441415313212.0,1058120.0,null,531608063224.0,3364548.0,116438.585764,null,66.784503272,116439.416528]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,51306167094.0,698063.0,null,62217532954.0,3620800.0,14594.847246,null,17.088344746,14594.324829]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,250305719821.0,1016553.0,null,300606179718.0,3936568.0,66992.383544,null,40.152604637,66992.226036]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,349400852894.0,1144096.0,null,423607867602.0,4052796.0,92884.248572,null,50.669903525,92884.162271]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"b9b3e592dd cherry picked","path":"1-b9b3e592dd-cherry-picked.patch"}}},{"stats":{"stats":[null,974234891281.0,728082.0,null,796781712149.0,2393672.0,257389.035392,null,61.466958093,257389.206237]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,1494850784971.0,1061308.0,null,1252204415652.0,3010008.0,396865.078541,null,82.995147134,396865.623088]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,46789792107.0,672265.0,null,53979667862.0,2791600.0,12797.314615,null,11.880969552,12796.661608]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,1258456004230.0,1134184.0,null,1057544570936.0,3500148.0,335192.998169,null,61.869943249,335193.443379]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,1361822948963.0,1145601.0,null,1128593837503.0,3550216.0,362497.966551,null,66.730802103,362498.628104]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"b9b3e592dd cherry picked","path":"1-b9b3e592dd-cherry-picked.patch"}}}],"name":"style-servo"}},"syn":{"Ok":{"runs":[{"stats":{"stats":[null,2647094104.0,14872.0,null,3229478482.0,151964.0,691.572743,null,0.709398059,691.572016]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,3344824638.0,22875.0,null,4081948197.0,184212.0,877.261075,null,0.895443835,877.259089]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,968097094.0,21437.0,null,1325463806.0,165424.0,278.145274,null,0.283469422,278.14312]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1152777358.0,22722.0,null,1535999772.0,184836.0,331.199205,null,0.336246507,331.19747]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,10795798635.0,36305.0,null,11895600866.0,243996.0,2857.43718,null,1.476330901,2857.414226]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,13026839317.0,47903.0,null,14461231155.0,291516.0,3473.271585,null,1.749571867,3473.285951]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,1452445929.0,32746.0,null,1907571438.0,227332.0,432.392747,null,0.419822866,432.324183]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2152495491.0,37175.0,null,2687346525.0,257976.0,623.48833,null,0.515074542,623.44674]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,55129412332.0,42010.0,null,44831899867.0,262756.0,14583.382961,null,2.946644978,14583.399229]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,60656187990.0,52851.0,null,48385866552.0,303916.0,16085.044546,null,3.252977749,16085.069792]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,1475306615.0,33156.0,null,1924654004.0,219724.0,431.580622,null,0.414560288,431.5302]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,30838698914.0,50615.0,null,24469779251.0,298336.0,8225.183034,null,1.667229056,8225.195249]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"syn"}},"tokio-webpush-simple":{"Ok":{"runs":[{"stats":{"stats":[null,1284967778.0,11286.0,null,1756559403.0,146728.0,343.802947,null,0.36446732,343.816273]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,1681000903.0,17396.0,null,2266506052.0,173356.0,451.462053,null,0.469368621,451.460546]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,433130969.0,16177.0,null,635199831.0,148704.0,135.43573,null,0.145625988,135.424137]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,1103784447.0,19573.0,null,1451411726.0,182332.0,308.813085,null,0.318573543,308.811509]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,1052181541.0,19777.0,null,1382491611.0,183564.0,296.4144,null,0.306425161,296.412362]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"minor change","path":"1-minor-change.patch"}}},{"stats":{"stats":[null,15377433242.0,91360.0,null,17572899772.0,298868.0,4212.782414,null,2.430463145,4212.777318]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,18614660606.0,104374.0,null,20898350168.0,343176.0,5126.906925,null,2.842350384,5126.981403]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,4206907856.0,85518.0,null,5201226647.0,271956.0,1345.356649,null,1.335206594,1345.270761]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,17319206270.0,108820.0,null,19389622589.0,361600.0,4837.061413,null,2.572259872,4837.213342]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,17721806394.0,110468.0,null,19382169426.0,367836.0,4915.662631,null,2.546265946,4915.771168]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":1,"name":"minor change","path":"1-minor-change.patch"}}},{"stats":{"stats":[null,86083896941.0,78852.0,null,68109297445.0,339240.0,22872.59899,null,4.172168161,22872.64843]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,101886737058.0,87152.0,null,78353621053.0,368608.0,27133.206962,null,4.605995917,27133.257447]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2279423748.0,59478.0,null,2741295965.0,258608.0,713.347625,null,0.691265268,713.218151]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,100622373764.0,89727.0,null,76770803204.0,378372.0,26826.464701,null,4.285244147,26826.515171]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,67799055899.0,87883.0,null,53416186057.0,377540.0,18092.545632,null,3.349486926,18092.521566]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":1,"name":"minor change","path":"1-minor-change.patch"}}}],"name":"tokio-webpush-simple"}},"tuple-stress":{"Ok":{"runs":[{"stats":{"stats":[null,12604397004.0,89249.0,null,18203714641.0,430760.0,3251.388592,null,3.322667085,3251.388773]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,15078740211.0,97131.0,null,23519907599.0,464128.0,3890.13493,null,3.926931133,3890.126336]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3857706734.0,74693.0,null,6910200052.0,364744.0,1058.741751,null,1.095751519,1058.731522]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,15068381353.0,105838.0,null,23558422290.0,498420.0,3900.841952,null,3.937276763,3900.832252]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"new row","path":"0-new-row.patch"}}},{"stats":{"stats":[null,12851652038.0,100383.0,null,18731458975.0,458788.0,3356.00693,null,3.365883297,3355.999815]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,15409050696.0,110499.0,null,24078056287.0,499672.0,4018.965011,null,4.012484283,4018.954175]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,4092577357.0,83637.0,null,7294424158.0,385972.0,1150.63392,null,1.182294472,1150.629946]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,15233561633.0,116261.0,null,24073602313.0,524844.0,3984.155667,null,3.979086915,3984.146684]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"new row","path":"0-new-row.patch"}}},{"stats":{"stats":[null,12762196415.0,97138.0,null,18698572252.0,452740.0,3324.348675,null,3.341122862,3324.343047]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,15420856577.0,106949.0,null,24118635042.0,492384.0,4012.753941,null,4.005559751,4012.750464]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,4158354436.0,82485.0,null,7238496404.0,387496.0,1175.898655,null,1.206920173,1175.891123]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,15365041700.0,115198.0,null,24011964875.0,525048.0,4013.794622,null,4.007025882,4013.789795]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"new row","path":"0-new-row.patch"}}}],"name":"tuple-stress"}},"ucd":{"Ok":{"runs":[{"stats":{"stats":[null,20007716245.0,113851.0,null,34555504240.0,533016.0,5142.915678,null,5.202298612,5142.91736]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,23762891675.0,126664.0,null,44279819500.0,583324.0,6114.294568,null,6.150218443,6114.286011]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,6261521187.0,125423.0,null,12305237819.0,569056.0,1744.159139,null,1.772116272,1744.159412]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,22363816454.0,132860.0,null,37670395178.0,631020.0,5800.045095,null,5.447893644,5800.051238]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,26224206296.0,144616.0,null,47519962712.0,678580.0,6798.07589,null,6.338935528,6798.057293]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,6359160356.0,127323.0,null,12517571544.0,607532.0,1769.06705,null,1.7922137,1769.042951]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,26754400900.0,141148.0,null,42578435344.0,644136.0,6964.557837,null,5.801317974,6964.533055]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,31116427309.0,151906.0,null,52157223339.0,701896.0,8114.270229,null,6.448712823,8114.237853]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,6424582556.0,128998.0,null,12544239211.0,613804.0,1791.935174,null,1.795200511,1791.917667]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"ucd"}},"unicode_normalization":{"Ok":{"runs":[{"stats":{"stats":[null,14582103565.0,25463.0,null,31014474849.0,185112.0,3689.545634,null,3.726624266,3689.544499]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,15614801205.0,25702.0,null,34969587582.0,193356.0,3949.593619,null,3.985076647,3949.612519]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,682875396.0,15673.0,null,1217829439.0,149412.0,196.305009,null,0.228768755,196.303776]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,14422748939.0,26541.0,null,32270304605.0,197324.0,3652.311732,null,3.666834113,3652.31333]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,15260227886.0,34816.0,null,32318245355.0,228520.0,3877.111408,null,3.882540827,3877.106398]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,16704824244.0,34555.0,null,36648699556.0,235120.0,4243.294945,null,4.220231828,4243.28069]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,869523384.0,21256.0,null,1701274474.0,177992.0,254.755555,null,0.287316777,254.737272]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,14965502021.0,32555.0,null,33554154380.0,223532.0,3801.59768,null,3.814308967,3801.576623]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,15716675716.0,35943.0,null,33510402525.0,234752.0,3989.94038,null,3.994166942,3989.947995]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,17081736926.0,35677.0,null,37835382106.0,241576.0,4336.953521,null,4.316958668,4336.939398]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,879388972.0,21276.0,null,1698411121.0,178308.0,256.733751,null,0.288958475,256.7392]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,14950848641.0,32155.0,null,33559563561.0,222384.0,3797.814042,null,3.811402088,3797.811699]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"unicode_normalization"}},"unify-linearly":{"Ok":{"runs":[{"stats":{"stats":[null,227358578.0,5399.0,null,346202966.0,103632.0,70.7377,null,0.08867061,70.73596]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,270223910.0,6739.0,null,391608067.0,109248.0,82.766405,null,0.100768209,82.76455]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,122458858.0,5870.0,null,177639300.0,91516.0,43.551489,null,0.060838575,43.548849]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,155016940.0,6638.0,null,228091134.0,107764.0,53.846571,null,0.071613919,53.843597]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,518278162.0,13185.0,null,747643224.0,124108.0,166.956378,null,0.166687461,166.938036]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,576641917.0,14910.0,null,823638158.0,131756.0,184.555088,null,0.180911709,184.55317]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,344350628.0,13465.0,null,515773380.0,113724.0,121.563975,null,0.134811691,121.559717]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,462840530.0,14823.0,null,640909842.0,131412.0,156.35936,null,0.152900218,156.332508]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,501407212.0,12313.0,null,751651613.0,123208.0,159.41122,null,0.166909458,159.416031]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,580871850.0,14313.0,null,841206907.0,131404.0,183.03515,null,0.183285876,183.018833]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,338820582.0,13240.0,null,505747609.0,113304.0,119.022655,null,0.133778889,119.017913]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,367082906.0,13654.0,null,541396473.0,120544.0,126.963291,null,0.138901418,126.947096]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}}],"name":"unify-linearly"}},"unused-warnings":{"Ok":{"runs":[{"stats":{"stats":[null,1802773158.0,33904.0,null,2454397271.0,208296.0,491.748516,null,0.509878476,491.748379]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,2654353153.0,58416.0,null,3415507222.0,307876.0,731.885009,null,0.749963511,731.883012]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2278804836.0,64578.0,null,2917575551.0,322024.0,651.705098,null,0.627786471,651.704259]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2533672184.0,64910.0,null,3125772557.0,336028.0,728.564569,null,0.704363495,728.564122]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,2030531389.0,41775.0,null,2786485791.0,233980.0,574.675272,null,0.583142715,574.660213]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,2936239928.0,65605.0,null,3779631920.0,329232.0,829.693892,null,0.838288604,829.687535]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,2512879670.0,71801.0,null,3236075425.0,341040.0,732.457118,null,0.707297309,732.435548]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,2803102509.0,72387.0,null,3472252998.0,357236.0,808.25539,null,0.77801239,808.250639]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}},{"stats":{"stats":[null,2066464026.0,40621.0,null,2814140037.0,232480.0,580.537755,null,0.583372208,580.536609]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,2917619452.0,64741.0,null,3802145771.0,329420.0,824.041548,null,0.825753901,824.008777]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,2519400499.0,71562.0,null,3232753948.0,340888.0,732.862679,null,0.706197834,732.851313]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,2799818949.0,71861.0,null,3440355161.0,347164.0,804.930337,null,0.773095843,804.928525]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"dummy fn","path":"0-dummy-fn.patch"}}}],"name":"unused-warnings"}},"webrender":{"Ok":{"runs":[{"stats":{"stats":[null,12735758452.0,48974.0,null,14055668868.0,303192.0,3275.427489,null,3.335151729,3275.427338]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,16227256338.0,76476.0,null,18455801554.0,412052.0,4169.256294,null,4.237542574,4169.256232]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,3964840326.0,73534.0,null,4824379508.0,395544.0,1091.672766,null,1.102986513,1091.662432]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,4915066876.0,75726.0,null,5749304757.0,411232.0,1332.13753,null,1.337549807,1332.126943]},"check":true,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,97440411434.0,250375.0,null,98920508834.0,1055188.0,25840.433932,null,9.682193836,25840.419877]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,109777040269.0,262773.0,null,115488292948.0,1080592.0,29123.445873,null,11.625376024,29123.535222]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,7575196313.0,133663.0,null,9171838042.0,749880.0,2156.550053,null,2.09105177,2156.397091]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,8716226435.0,135023.0,null,10387560157.0,762836.0,2482.04184,null,2.361978375,2481.864999]},"check":false,"release":false,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}},{"stats":{"stats":[null,398656438775.0,337714.0,null,315525578454.0,1350980.0,105836.136706,null,20.405126601,105836.174121]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,450717235255.0,345917.0,null,355909624471.0,1243852.0,119787.698319,null,22.474563274,119787.855739]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,7614964644.0,136784.0,null,9043273189.0,761380.0,2167.969499,null,2.049503107,2167.84689]},"check":false,"release":true,"state":"IncrementalClean"},{"stats":{"stats":[null,37692884724.0,201910.0,null,40706894611.0,947816.0,10214.090644,null,4.205390921,10214.05213]},"check":false,"release":true,"state":{"IncrementalPatched":{"index":0,"name":"println","path":"0-println.patch"}}}],"name":"webrender"}},"wg-grammar":{"Ok":{"runs":[{"stats":{"stats":[null,8858708923.0,24352.0,null,14219603915.0,182296.0,2255.962777,null,2.307282409,2255.961906]},"check":true,"release":false,"state":"Clean"},{"stats":{"stats":[null,9767944103.0,26549.0,null,15637103914.0,191648.0,2489.554133,null,2.526101258,2489.544185]},"check":true,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,744585246.0,19042.0,null,1203819677.0,157576.0,216.832042,null,0.243394215,216.831113]},"check":true,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,9113334033.0,25782.0,null,14743123639.0,205324.0,2322.703903,null,2.372855372,2322.681007]},"check":false,"release":false,"state":"Clean"},{"stats":{"stats":[null,10238182499.0,28474.0,null,16255183167.0,216212.0,2612.311979,null,2.626115389,2612.298627]},"check":false,"release":false,"state":"IncrementalStart"},{"stats":{"stats":[null,834781692.0,22547.0,null,1370327653.0,178896.0,245.833037,null,0.273065068,245.828635]},"check":false,"release":false,"state":"IncrementalClean"},{"stats":{"stats":[null,9496237814.0,27797.0,null,15298411986.0,213740.0,2426.04607,null,2.434324669,2426.0293]},"check":false,"release":true,"state":"Clean"},{"stats":{"stats":[null,10528622893.0,30072.0,null,16861645661.0,222668.0,2693.215156,null,2.641914348,2693.198975]},"check":false,"release":true,"state":"IncrementalStart"},{"stats":{"stats":[null,850525045.0,22700.0,null,1387348626.0,180112.0,250.469238,null,0.271994759,250.485343]},"check":false,"release":true,"state":"IncrementalClean"}],"name":"wg-grammar"}}},"triple":"x86_64-unknown-linux-gnu"}
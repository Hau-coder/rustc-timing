{"commit":{"sha":"78e95bb7ac92f8f92654705a47cef652b6a0b259","date":"2017-08-27T10:02:51+00:00"},"benchmarks":{"futures-rs-test-all":{"Ok":[{"name":"futures-rs-test-all","runs":[{"stats":[{"name":"instructions:u","cnt":18664742901.0},{"name":"cycles:u","cnt":15490679082.0},{"name":"task-clock","cnt":3773.636506},{"name":"cpu-clock","cnt":3959.644143},{"name":"faults","cnt":21148.0},{"name":"max-rss","cnt":275112.0}]}]}]},"helloworld":{"Ok":[{"name":"helloworld","runs":[{"stats":[{"name":"instructions:u","cnt":1280678199.0},{"name":"cycles:u","cnt":837418938.0},{"name":"task-clock","cnt":131.913339},{"name":"cpu-clock","cnt":244.242072},{"name":"faults","cnt":12947.0},{"name":"max-rss","cnt":128904.0}]}]}]},"html5ever-2016-08-25":{"Err":"Error(Msg(\"expected success, got exit code: 2\\n\\nstderr=    Updating registry `https://github.com/rust-lang/crates.io-index`\\nwarning: spurious network error (2 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_sTidx.lock\\': Too many open files\\nwarning: spurious network error (1 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_t7idx.lock\\': Too many open files\\nerror: failed to load source for a dependency on `mac`\\n\\nCaused by:\\n  Unable to update registry https://github.com/rust-lang/crates.io-index\\n\\nCaused by:\\n  failed to fetch `https://github.com/rust-lang/crates.io-index`\\n\\nCaused by:\\n  [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_4xidx.lock\\': Too many open files\\nmake: *** [all] Error 101\\n\\n\\n stdout=/home/alex/code/rustc-perf/cache/78e95bb7ac92f8f92654705a47cef652b6a0b259/cargo/bin/cargo rustc  -- -Ztime-passes\\nmakefile:4: recipe for target \\'all\\' failed\\n\"), State { next_error: None, backtrace: None })"},"hyper.0.5.0":{"Ok":[{"name":"hyper.0.5.0","runs":[{"stats":[{"name":"instructions:u","cnt":24210463922.0},{"name":"cycles:u","cnt":20411714030.0},{"name":"task-clock","cnt":5188.442279},{"name":"cpu-clock","cnt":5188.443409},{"name":"faults","cnt":12017.0},{"name":"max-rss","cnt":322156.0}]}]}]},"inflate-0.1.0":{"Ok":[{"name":"inflate-0.1.0","runs":[{"stats":[{"name":"instructions:u","cnt":23454895930.0},{"name":"cycles:u","cnt":12905406887.0},{"name":"task-clock","cnt":3307.682498},{"name":"cpu-clock","cnt":3307.681495},{"name":"faults","cnt":28159.0},{"name":"max-rss","cnt":304860.0}]}]}]},"issue-20936-deep-vector":{"Ok":[{"name":"issue-20936-deep-vector","runs":[{"stats":[{"name":"instructions:u","cnt":14261674587.0},{"name":"cycles:u","cnt":8462782997.0},{"name":"task-clock","cnt":2194.20711},{"name":"cpu-clock","cnt":2245.692317},{"name":"faults","cnt":86574.0},{"name":"max-rss","cnt":264432.0}]}]}]},"issue-32062-equality-relations-complexity":{"Ok":[{"name":"issue-32062-equality-relations-complexity","runs":[{"stats":[{"name":"instructions:u","cnt":2048276652.0},{"name":"cycles:u","cnt":1340522567.0},{"name":"task-clock","cnt":255.127798},{"name":"cpu-clock","cnt":375.271638},{"name":"faults","cnt":17170.0},{"name":"max-rss","cnt":138188.0}]}]}]},"issue-32278-big-array-of-strings":{"Ok":[{"name":"issue-32278-big-array-of-strings","runs":[{"stats":[{"name":"instructions:u","cnt":8896924212.0},{"name":"cycles:u","cnt":5987674239.0},{"name":"task-clock","cnt":1457.128126},{"name":"cpu-clock","cnt":1583.038751},{"name":"faults","cnt":30095.0},{"name":"max-rss","cnt":376404.0}]}]}]},"issue-43572-unused-uses":{"Ok":[{"name":"issue-43572-unused-uses","runs":[{"stats":[{"name":"instructions:u","cnt":2836404363.0},{"name":"cycles:u","cnt":1865435465.0},{"name":"task-clock","cnt":466.04175},{"name":"cpu-clock","cnt":513.754069},{"name":"faults","cnt":23196.0},{"name":"max-rss","cnt":160708.0}]}]}]},"jld-day15-parser":{"Ok":[{"name":"jld-day15-parser","runs":[{"stats":[{"name":"instructions:u","cnt":7449161732.0},{"name":"cycles:u","cnt":5487679913.0},{"name":"task-clock","cnt":1408.635005},{"name":"cpu-clock","cnt":1434.362677},{"name":"faults","cnt":14673.0},{"name":"max-rss","cnt":170816.0}]}]}]},"piston-image-0.10.3":{"Err":"Error(Msg(\"expected success, got exit code: 2\\n\\nstderr=    Updating registry `https://github.com/rust-lang/crates.io-index`\\nwarning: spurious network error (2 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_E5idx.lock\\': Too many open files\\nwarning: spurious network error (1 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_HRidx.lock\\': Too many open files\\nerror: failed to load source for a dependency on `glob`\\n\\nCaused by:\\n  Unable to update registry https://github.com/rust-lang/crates.io-index\\n\\nCaused by:\\n  failed to fetch `https://github.com/rust-lang/crates.io-index`\\n\\nCaused by:\\n  [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_Stidx.lock\\': Too many open files\\nmake: *** [all] Error 101\\n\\n\\n stdout=/home/alex/code/rustc-perf/cache/78e95bb7ac92f8f92654705a47cef652b6a0b259/cargo/bin/cargo rustc  -- -Ztime-passes\\nmakefile:4: recipe for target \\'all\\' failed\\n\"), State { next_error: None, backtrace: None })"},"regex-0.1.80":{"Err":"Error(Msg(\"expected success, got exit code: 2\\n\\nstderr=    Updating registry `https://github.com/rust-lang/crates.io-index`\\nwarning: spurious network error (2 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_3vidx.lock\\': Too many open files\\nwarning: spurious network error (1 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_Etidx.lock\\': Too many open files\\nerror: failed to load source for a dependency on `utf8-ranges`\\n\\nCaused by:\\n  Unable to update registry https://github.com/rust-lang/crates.io-index\\n\\nCaused by:\\n  failed to fetch `https://github.com/rust-lang/crates.io-index`\\n\\nCaused by:\\n  [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_PDidx.lock\\': Too many open files\\nmake: *** [all@010-baseline] Error 101\\n\\n\\n stdout=/home/alex/code/rustc-perf/cache/78e95bb7ac92f8f92654705a47cef652b6a0b259/cargo/bin/cargo rustc  -- -Ztime-passes\\nmakefile:9: recipe for target \\'all@010-baseline\\' failed\\n\"), State { next_error: None, backtrace: None })"},"regex.0.1.30":{"Ok":[{"name":"regex.0.1.30","runs":[{"stats":[{"name":"instructions:u","cnt":11670523513.0},{"name":"cycles:u","cnt":9124975060.0},{"name":"task-clock","cnt":2331.013976},{"name":"cpu-clock","cnt":2331.012886},{"name":"faults","cnt":8910.0},{"name":"max-rss","cnt":224888.0}]}]}]},"rust-encoding-0.3.0":{"Err":"Error(Msg(\"expected success, got exit code: 2\\n\\nstderr=    Updating registry `https://github.com/rust-lang/crates.io-index`\\nwarning: spurious network error (2 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_unidx.lock\\': Too many open files\\nwarning: spurious network error (1 tries remaining): [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_Opidx.lock\\': Too many open files\\nerror: failed to load source for a dependency on `getopts`\\n\\nCaused by:\\n  Unable to update registry https://github.com/rust-lang/crates.io-index\\n\\nCaused by:\\n  failed to fetch `https://github.com/rust-lang/crates.io-index`\\n\\nCaused by:\\n  [2/-1] failed to create locked file \\'/home/alex/.cargo/registry/index/github.com-1ecc6299db9ec823/.git/objects/pack/pack_git2_8jidx.lock\\': Too many open files\\nmake: *** [all] Error 101\\n\\n\\n stdout=/home/alex/code/rustc-perf/cache/78e95bb7ac92f8f92654705a47cef652b6a0b259/cargo/bin/cargo rustc  -- -Ztime-passes\\nmakefile:4: recipe for target \\'all\\' failed\\n\"), State { next_error: None, backtrace: None })"},"style-9b276565":{"Err":"Error(Msg(\"expected success, got exit code: 2\\n\\nstderr=   Compiling libc v0.2.28\\n   Compiling stable_deref_trait v1.0.0\\n   Compiling fnv v1.0.5\\n   Compiling pdqsort v0.1.2\\n   Compiling unicode-xid v0.0.4\\n   Compiling heapsize v0.4.1\\n   Compiling lazy_static v0.2.8\\n   Compiling rayon-core v1.2.1\\n   Compiling futures v0.1.14\\n   Compiling siphasher v0.2.2\\n   Compiling scopeguard v0.3.2\\n   Compiling either v1.1.0\\n   Compiling cfg-if v0.1.2\\n   Compiling itoa v0.3.1\\n   Compiling rustc-serialize v0.3.24\\n   Compiling unicode-segmentation v1.2.0\\n   Compiling log v0.3.8\\n   Compiling byteorder v1.1.0\\n   Compiling procedural-masquerade v0.1.2\\n   Compiling odds v0.2.25\\n   Compiling bit-vec v0.4.4\\n   Compiling void v1.0.2\\n   Compiling num-traits v0.1.40\\n   Compiling smallvec v0.4.1\\n   Compiling nsstring_vendor v0.1.0 (file:///tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/components/style/gecko_bindings/nsstring_vendor)\\n   Compiling same-file v0.1.3\\n   Compiling bitflags v0.7.0\\n   Compiling serde v1.0.10\\n   Compiling precomputed-hash v0.1.0\\n   Compiling atomic_refcell v0.1.1\\n   Compiling matches v0.1.6\\n   Compiling quote v0.3.15\\n   Compiling owning_ref v0.3.3\\n   Compiling synom v0.11.3\\n   Compiling coco v0.1.1\\n   Compiling phf_shared v0.7.21\\n   Compiling rand v0.3.15\\n   Compiling time v0.1.38\\n   Compiling thread-id v3.2.0\\n   Compiling num_cpus v1.6.2\\n   Compiling unreachable v0.1.1\\n   Compiling nodrop v0.1.9\\n   Compiling walkdir v1.0.7\\n   Compiling unicode-bidi v0.3.4\\n   Compiling num-integer v0.1.35\\n   Compiling phf v0.7.21\\n   Compiling syn v0.11.11\\n   Compiling ordered-float v0.4.0\\n   Compiling servo_arc v0.0.1 (file:///tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/components/servo_arc)\\n   Compiling arrayvec v0.3.23\\n   Compiling arraydeque v0.2.3\\n   Compiling style v0.0.1 (file:///tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/components/style)\\n   Compiling parking_lot_core v0.2.2\\n   Compiling phf_generator v0.7.21\\n   Compiling phf_codegen v0.7.21\\n   Compiling parking_lot v0.4.4\\n   Compiling selectors v0.19.0 (file:///tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/components/selectors)\\n   Compiling rayon v0.8.2\\n   Compiling app_units v0.5.1\\n   Compiling euclid v0.15.1\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:165:5\\n    |\\n165 | /     pub fn post_mul<NewDst>(&self, mat: &TypedTransform2D<T, Dst, NewDst>) -> TypedTransform2D<T, Src, NewDst> {\\n166 | |         TypedTransform2D::row_major(\\n167 | |             self.m11 * mat.m11 + self.m12 * mat.m21,\\n168 | |             self.m11 * mat.m12 + self.m12 * mat.m22,\\n...   |\\n173 | |         )\\n174 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:179:5\\n    |\\n179 | /     pub fn pre_mul<NewSrc>(&self, mat: &TypedTransform2D<T, NewSrc, Src>) -> TypedTransform2D<T, NewSrc, Dst> {\\n180 | |         mat.post_mul(self)\\n181 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:195:5\\n    |\\n195 | /     pub fn post_translate(&self, v: TypedVector2D<T, Dst>) -> Self {\\n196 | |         self.post_mul(&TypedTransform2D::create_translation(v.x, v.y))\\n197 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:201:5\\n    |\\n201 | /     pub fn pre_translate(&self, v: TypedVector2D<T, Src>) -> Self {\\n202 | |         self.pre_mul(&TypedTransform2D::create_translation(v.x, v.y))\\n203 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:217:5\\n    |\\n217 | /     pub fn post_scale(&self, x: T, y: T) -> Self {\\n218 | |         self.post_mul(&TypedTransform2D::create_scale(x, y))\\n219 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:223:5\\n    |\\n223 | /     pub fn pre_scale(&self, x: T, y: T) -> Self {\\n224 | |         TypedTransform2D::row_major(\\n225 | |             self.m11 * x, self.m12,\\n226 | |             self.m21,     self.m22 * y,\\n227 | |             self.m31,     self.m32\\n228 | |         )\\n229 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:245:5\\n    |\\n245 | /     pub fn post_rotate(&self, theta: Radians<T>) -> Self {\\n246 | |         self.post_mul(&TypedTransform2D::create_rotation(theta))\\n247 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:251:5\\n    |\\n251 | /     pub fn pre_rotate(&self, theta: Radians<T>) -> Self {\\n252 | |         self.pre_mul(&TypedTransform2D::create_rotation(theta))\\n253 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:258:5\\n    |\\n258 | /     pub fn transform_point(&self, point: &TypedPoint2D<T, Src>) -> TypedPoint2D<T, Dst> {\\n259 | |         TypedPoint2D::new(point.x * self.m11 + point.y * self.m21 + self.m31,\\n260 | |                           point.x * self.m12 + point.y * self.m22 + self.m32)\\n261 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:266:5\\n    |\\n266 | /     pub fn transform_vector(&self, vec: &TypedVector2D<T, Src>) -> TypedVector2D<T, Dst> {\\n267 | |         vec2(vec.x * self.m11 + vec.y * self.m21,\\n268 | |              vec.x * self.m12 + vec.y * self.m22)\\n269 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:275:5\\n    |\\n275 | /     pub fn transform_rect(&self, rect: &TypedRect<T, Src>) -> TypedRect<T, Dst> {\\n276 | |         TypedRect::from_points(&[\\n277 | |             self.transform_point(&rect.origin),\\n278 | |             self.transform_point(&rect.top_right()),\\n...   |\\n281 | |         ])\\n282 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform2d.rs:291:5\\n    |\\n291 | /     pub fn inverse(&self) -> Option<TypedTransform2D<T, Dst, Src>> {\\n292 | |         let det = self.determinant();\\n293 | |\\n294 | |         let _0: T = Zero::zero();\\n...   |\\n309 | |         ))\\n310 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform3d.rs:374:5\\n    |\\n374 | /     pub fn mul_s(&self, x: T) -> Self {\\n375 | |         TypedTransform3D::row_major(\\n376 | |             self.m11 * x, self.m12 * x, self.m13 * x, self.m14 * x,\\n377 | |             self.m21 * x, self.m22 * x, self.m23 * x, self.m24 * x,\\n...   |\\n380 | |         )\\n381 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform3d.rs:461:5\\n    |\\n461 | /     pub fn pre_translate(&self, v: TypedVector3D<T, Src>) -> Self {\\n462 | |         self.pre_mul(&TypedTransform3D::create_translation(v.x, v.y, v.z))\\n463 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform3d.rs:467:5\\n    |\\n467 | /     pub fn post_translate(&self, v: TypedVector3D<T, Dst>) -> Self {\\n468 | |         self.post_mul(&TypedTransform3D::create_translation(v.x, v.y, v.z))\\n469 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform3d.rs:484:5\\n    |\\n484 | /     pub fn pre_scale(&self, x: T, y: T, z: T) -> Self {\\n485 | |         TypedTransform3D::row_major(\\n486 | |             self.m11 * x, self.m12,     self.m13,     self.m14,\\n487 | |             self.m21    , self.m22 * y, self.m23,     self.m24,\\n...   |\\n490 | |         )\\n491 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform3d.rs:495:5\\n    |\\n495 | /     pub fn post_scale(&self, x: T, y: T, z: T) -> Self {\\n496 | |         self.post_mul(&TypedTransform3D::create_scale(x, y, z))\\n497 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform3d.rs:538:5\\n    |\\n538 | /     pub fn post_rotate(&self, x: T, y: T, z: T, theta: Radians<T>) -> Self {\\n539 | |         self.post_mul(&TypedTransform3D::create_rotation(x, y, z, theta))\\n540 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/transform3d.rs:544:5\\n    |\\n544 | /     pub fn pre_rotate(&self, x: T, y: T, z: T, theta: Radians<T>) -> Self {\\n545 | |         self.pre_mul(&TypedTransform3D::create_rotation(x, y, z, theta))\\n546 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/point.rs:237:5\\n    |\\n237 | /     pub fn round(&self) -> Self {\\n238 | |         point2(self.x.round(), self.y.round())\\n239 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/point.rs:249:5\\n    |\\n249 | /     pub fn ceil(&self) -> Self {\\n250 | |         point2(self.x.ceil(), self.y.ceil())\\n251 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/point.rs:261:5\\n    |\\n261 | /     pub fn floor(&self) -> Self {\\n262 | |         point2(self.x.floor(), self.y.floor())\\n263 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/point.rs:548:5\\n    |\\n548 | /     pub fn round(&self) -> Self {\\n549 | |         point3(self.x.round(), self.y.round(), self.z.round())\\n550 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/point.rs:559:5\\n    |\\n559 | /     pub fn ceil(&self) -> Self {\\n560 | |         point3(self.x.ceil(), self.y.ceil(), self.z.ceil())\\n561 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/point.rs:570:5\\n    |\\n570 | /     pub fn floor(&self) -> Self {\\n571 | |         point3(self.x.floor(), self.y.floor(), self.z.floor())\\n572 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/rect.rs:171:5\\n    |\\n171 | /     pub fn translate(&self, by: &TypedVector2D<T, U>) -> Self {\\n172 | |         Self::new(self.origin + *by, self.size)\\n173 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/rect.rs:196:5\\n    |\\n196 | /     pub fn inflate(&self, width: T, height: T) -> Self {\\n197 | |         TypedRect::new(\\n198 | |             TypedPoint2D::new(self.origin.x - width, self.origin.y - height),\\n199 | |             TypedSize2D::new(self.size.width + width + width, self.size.height + height + height),\\n200 | |         )\\n201 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/rect.rs:205:5\\n    |\\n205 | /     pub fn inflate_typed(&self, width: Length<T, U>, height: Length<T, U>) -> Self {\\n206 | |         self.inflate(width.get(), height.get())\\n207 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/rect.rs:226:5\\n    |\\n226 | /     pub fn translate_by_size(&self, size: &TypedSize2D<T, U>) -> Self {\\n227 | |         self.translate(&size.to_vector())\\n228 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/rect.rs:398:5\\n    |\\n398 | /     pub fn round(&self) -> Self {\\n399 | |         let origin = self.origin.round();\\n400 | |         let size = self.origin.add_size(&self.size).round() - origin;\\n401 | |         TypedRect::new(origin, TypedSize2D::new(size.x, size.y))\\n402 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/rect.rs:407:5\\n    |\\n407 | /     pub fn round_in(&self) -> Self {\\n408 | |         let origin = self.origin.ceil();\\n409 | |         let size = self.origin.add_size(&self.size).floor() - origin;\\n410 | |         TypedRect::new(origin, TypedSize2D::new(size.x, size.y))\\n411 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/rect.rs:416:5\\n    |\\n416 | /     pub fn round_out(&self) -> Self {\\n417 | |         let origin = self.origin.floor();\\n418 | |         let size = self.origin.add_size(&self.size).ceil() - origin;\\n419 | |         TypedRect::new(origin, TypedSize2D::new(size.x, size.y))\\n420 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/vector.rs:270:5\\n    |\\n270 | /     pub fn round(&self) -> Self {\\n271 | |         vec2(self.x.round(), self.y.round())\\n272 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/vector.rs:282:5\\n    |\\n282 | /     pub fn ceil(&self) -> Self {\\n283 | |         vec2(self.x.ceil(), self.y.ceil())\\n284 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/vector.rs:294:5\\n    |\\n294 | /     pub fn floor(&self) -> Self {\\n295 | |         vec2(self.x.floor(), self.y.floor())\\n296 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/vector.rs:617:5\\n    |\\n617 | /     pub fn round(&self) -> Self {\\n618 | |         vec3(self.x.round(), self.y.round(), self.z.round())\\n619 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/vector.rs:628:5\\n    |\\n628 | /     pub fn ceil(&self) -> Self {\\n629 | |         vec3(self.x.ceil(), self.y.ceil(), self.z.ceil())\\n630 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\nwarning: `#[must_use]` on methods is experimental (see issue #43302)\\n   --> /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.15.1/src/vector.rs:639:5\\n    |\\n639 | /     pub fn floor(&self) -> Self {\\n640 | |         vec3(self.x.floor(), self.y.floor(), self.z.floor())\\n641 | |     }\\n    | |_____^\\n    |\\n    = help: add #![feature(fn_must_use)] to the crate attributes to enable\\n\\n   Compiling cssparser v0.17.0\\n   Compiling synstructure v0.5.2\\n   Compiling cssparser-macros v0.3.0\\n   Compiling style_derive v0.0.1 (file:///tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/components/style_derive)\\nwarning: variable does not need to be mutable\\n   --> components/selectors/matching.rs:461:39\\n    |\\n461 |                                       mut context: &mut LocalMatchingContext<E::Impl>,\\n    |                                       ^^^^^^^^^^^\\n    |\\n    = note: #[warn(unused_mut)] on by default\\n\\nwarning: variable does not need to be mutable\\n    --> components/selectors/parser.rs:1472:5\\n     |\\n1472 |     mut builder: &mut SelectorBuilder<Impl>)\\n     |     ^^^^^^^^^^^\\n\\n   Compiling style_traits v0.0.1 (file:///tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/components/style_traits)\\nwarning: doc comment not used by rustdoc\\n   --> components/style/values/specified/image.rs:688:17\\n    |\\n688 |                 /// `to` keyword is mandatory in modern syntax.\\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n    |\\n    = note: #[warn(unused_doc_comment)] on by default\\n\\nwarning: doc comment not used by rustdoc\\n   --> components/style/values/specified/image.rs:694:17\\n    |\\n694 |                 /// There is no `to` keyword in webkit prefixed syntax. If it\\'s consumed,\\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nwarning: doc comment not used by rustdoc\\n    --> /tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/target/debug/build/style-9bbf12a5b771ce0f/out/gecko_properties.rs:8443:9\\n     |\\n8443 |         /// XXXManishearth this should also handle text zoom\\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nerror[E0106]: missing lifetime specifier\\n   --> /tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/target/debug/build/style-9bbf12a5b771ce0f/out/gecko/bindings.rs:558:9\\n    |\\n558 |      -> RawGeckoNodeBorrowedOrNull;\\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter\\n    |\\n    = help: this function\\'s return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\\n    = help: consider giving it an explicit bounded or \\'static lifetime\\n\\nerror[E0106]: missing lifetime specifier\\n   --> /tmp/rustc-benchmark-style-9b276565.Cgt158bIgj5V/target/debug/build/style-9bbf12a5b771ce0f/out/gecko/bindings.rs:827:9\\n    |\\n827 |      -> RawServoAnimationValueBorrowedOrNull;\\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter\\n    |\\n    = help: this function\\'s return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\\n    = help: consider giving it an explicit bounded or \\'static lifetime\\n\\nerror: aborting due to 2 previous errors\\n\\nthread \\'main\\' panicked at \\'assertion failed: cmd.status().expect(\\\"failed to spawn\\\").success()\\', collector/src/bin/rustc-fake.rs:30:8\\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\\nerror: Could not compile `style`.\\n\\nTo learn more, run the command again with --verbose.\\nmake: *** [all@000-base] Error 101\\n\\n\\n stdout=/home/alex/code/rustc-perf/cache/78e95bb7ac92f8f92654705a47cef652b6a0b259/cargo/bin/cargo rustc  --features gecko --manifest-path components/style/Cargo.toml -- -Ztime-passes\\n39369432875;;instructions:u;6537755282;100.00;1.53;insn per cycle\\n25763212949;;cycles:u;6537755282;100.00;3.941;GHz\\n6537.743454;;task-clock;6537743454;100.00;1.000;CPUs utilized\\n6537.745732;;cpu-clock;6537743454;100.00;1.000;CPUs utilized\\n4604;;faults;6537743454;100.00;0.704;K/sec\\nmakefile:6: recipe for target \\'all@000-base\\' failed\\n\"), State { next_error: None, backtrace: None })"},"syntex-0.42.2":{"Ok":[{"name":"syntex-0.42.2@000-base","runs":[{"stats":[{"name":"instructions:u","cnt":135431035101.0},{"name":"cycles:u","cnt":109950236400.0},{"name":"task-clock","cnt":27851.010092},{"name":"cpu-clock","cnt":27851.031335},{"name":"faults","cnt":31516.0},{"name":"max-rss","cnt":939272.0}]}]},{"name":"syntex-0.42.2@010-incr","runs":[{"stats":[{"name":"instructions:u","cnt":211705708113.0},{"name":"cycles:u","cnt":199694003478.0},{"name":"task-clock","cnt":52762.330055},{"name":"cpu-clock","cnt":52762.363289},{"name":"faults","cnt":237090.0},{"name":"max-rss","cnt":966236.0}]}]},{"name":"syntex-0.42.2@020-clean","runs":[{"stats":[{"name":"instructions:u","cnt":55619850563.0},{"name":"cycles:u","cnt":39775773516.0},{"name":"task-clock","cnt":10196.14106},{"name":"cpu-clock","cnt":10195.936697},{"name":"faults","cnt":25013.0},{"name":"max-rss","cnt":965288.0}]}]}]},"tokio-webpush-simple":{"Ok":[{"name":"tokio-webpush-simple@000-base","runs":[{"stats":[{"name":"instructions:u","cnt":28402392876.0},{"name":"cycles:u","cnt":23749297548.0},{"name":"task-clock","cnt":5453.119788},{"name":"cpu-clock","cnt":6117.488683},{"name":"faults","cnt":43582.0},{"name":"max-rss","cnt":387456.0}]}]},{"name":"tokio-webpush-simple@010-incr","runs":[{"stats":[{"name":"instructions:u","cnt":43506220993.0},{"name":"cycles:u","cnt":39487438660.0},{"name":"task-clock","cnt":10451.246279},{"name":"cpu-clock","cnt":10510.961399},{"name":"faults","cnt":77603.0},{"name":"max-rss","cnt":407564.0}]}]},{"name":"tokio-webpush-simple@020-clean","runs":[{"stats":[{"name":"instructions:u","cnt":9642263710.0},{"name":"cycles:u","cnt":7439982848.0},{"name":"task-clock","cnt":1718.738603},{"name":"cpu-clock","cnt":2052.324896},{"name":"faults","cnt":49125.0},{"name":"max-rss","cnt":380244.0}]}]},{"name":"tokio-webpush-simple@030-minor-change","runs":[{"stats":[{"name":"instructions:u","cnt":43849538092.0},{"name":"cycles:u","cnt":39807080557.0},{"name":"task-clock","cnt":10235.891276},{"name":"cpu-clock","cnt":10564.44424},{"name":"faults","cnt":78880.0},{"name":"max-rss","cnt":410300.0}]}]}]},"tuple-stress":{"Ok":[{"name":"tuple-stress","runs":[{"stats":[{"name":"instructions:u","cnt":23659780914.0},{"name":"cycles:u","cnt":16458287375.0},{"name":"task-clock","cnt":4169.385184},{"name":"cpu-clock","cnt":4216.156319},{"name":"faults","cnt":36289.0},{"name":"max-rss","cnt":422988.0}]}]}]}},"triple":"x86_64-unknown-linux-gnu"}
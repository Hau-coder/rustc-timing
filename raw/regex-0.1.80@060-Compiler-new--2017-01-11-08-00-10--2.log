commit 52c03d1d619fd25c961bc9de59bcc942b660d5db
Merge: 0d03d51 099e7cb
Author: bors <bors@rust-lang.org>
Date:   Wed Jan 11 13:42:52 2017 +0000

    Auto merge of #38984 - alexcrichton:less-debuginfo, r=brson
    
    rustbuild: Don't enable debuginfo in rustc
    
    In #37280 we enabled line number debugging information in release artifacts,
    primarily to close out #36452 where debugging information was critical for MSVC
    builds of Rust to be useful in production. This commit, however, apparently had
    some unfortunate side effects.
    
    Namely it was noticed in #37477 that if `RUST_BACKTRACE=1` was set then any
    compiler error would take a very long time for the compiler to exit. The cause
    of the problem here was somewhat deep:
    
    * For all compiler errors, the compiler will `panic!` with a known value. This
      tears down the main compiler thread and allows cleaning up all the various
      resources. By default, however, this panic output is suppressed for "normal"
      compiler errors.
    * When `RUST_BACKTRACE=1` was set this caused every compiler error to generate a
      backtrace.
    * The libbacktrace library hits a pathological case where it spends a very long
      time in its custom allocation function, `backtrace_alloc`, because the
      compiler has so much debugging information. More information about this can be
      found in #29293 with a summary at the end of #37477.
    
    To solve this problem this commit simply removes debuginfo from the compiler but
    not from the standard library. This should allow us to keep #36452 closed while
    also closing #37477. I've measured the difference to be orders of magnitude
    faster than it was before, so we should see a much quicker time-to-exit after a
    compile error when `RUST_BACKTRACE=1` is set.
    
    Closes #37477
    Closes #37571
rustc 1.15.0-nightly (daf8c1dfc 2016-12-05)
-rwxr-xr-x 1 root root 9432 Dec  6 15:39 /usr/local/bin/rustc
rustc: ./regex-0.1.80@060-Compiler-new
git apply 060-Compiler-new.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..629328a 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -54,6 +54,7 @@ impl Compiler {
     ///
     /// Various options can be set before calling `compile` on an expression.
     pub fn new() -> Self {
+        {}
         Compiler {
             insts: vec![],
             compiled: Program::new(),
@@ -137,6 +138,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
makefile:42: recipe for target 'all@060-Compiler-new' failed
done

commit 3db197aa9d343c7974b06a9b18ae5f78d5c64637
Merge: 6d5ec58 fbc3f11
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 11 21:19:34 2016 +0000

    Auto merge of #38265 - bluss:mir-deaggregator-loop, r=nagisa
    
    Reinstate while loop in deaggregator pass
    
    A previous commit must have removed the `while let` loop here by
    mistake; for each basic block, it should find and deaggregate multiple
    statements in their index order, and the `curr` index tracks the
    progress through the block.
    
    This fixes both the case of deaggregating statements in separate
    basic blocks (preserving `curr` could prevent that) as well
    as multiple times in the same block (missing loop prevented that).
    
    The loop was lost in commit bda46c21fe30377b9587b584c64ffe99da6c14ce.
rustc: ./regex.0.1.30
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.042; rss: 54MB	parsing
Lines of code:             8558
Pre-expansion node count:  58049
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.030; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
Post-expansion node count: 68093
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.003; rss: 79MB	early lint checks
time: 0.000; rss: 79MB	AST validation
time: 0.005; rss: 80MB	name resolution
time: 0.005; rss: 86MB	lowering ast -> hir
time: 0.001; rss: 88MB	indexing hir
time: 0.001; rss: 88MB	attribute checking
time: 0.000; rss: 79MB	language item collection
time: 0.001; rss: 79MB	lifetime resolution
time: 0.000; rss: 79MB	looking for entry point
time: 0.000; rss: 79MB	looking for plugin registrar
time: 0.004; rss: 83MB	region resolution
time: 0.000; rss: 83MB	loop checking
time: 0.000; rss: 83MB	static item recursion checking
time: 0.027; rss: 84MB	compute_incremental_hashes_map
time: 0.000; rss: 84MB	load_dep_graph
time: 0.000; rss: 84MB	stability index
time: 0.001; rss: 84MB	stability checking
time: 0.005; rss: 85MB	type collecting
time: 0.000; rss: 85MB	variance inference
time: 0.000; rss: 85MB	impl wf inference
time: 0.009; rss: 88MB	coherence checking
time: 0.006; rss: 88MB	wf checking
time: 0.146; rss: 98MB	item-types checking
time: 0.106; rss: 100MB	item-bodies checking
time: 0.000; rss: 100MB	drop-impl checking
time: 0.020; rss: 101MB	const checking
time: 0.002; rss: 101MB	privacy checking
time: 0.001; rss: 101MB	intrinsic checking
time: 0.000; rss: 101MB	effect checking
time: 0.002; rss: 101MB	match checking
time: 0.001; rss: 101MB	liveness checking
time: 0.006; rss: 101MB	rvalue checking
time: 0.036; rss: 113MB	MIR dump
  time: 0.002; rss: 113MB	SimplifyCfg
  time: 0.005; rss: 113MB	QualifyAndPromoteConstants
  time: 0.008; rss: 113MB	TypeckMir
  time: 0.000; rss: 113MB	SimplifyBranches
  time: 0.001; rss: 113MB	SimplifyCfg
time: 0.016; rss: 113MB	MIR cleanup and validation
time: 0.018; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.002; rss: 113MB	death checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.019; rss: 113MB	lint checking
time: 0.000; rss: 113MB	resolving dependency formats
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.001; rss: 113MB	SimplifyCfg
  time: 0.003; rss: 114MB	EraseRegions
  time: 0.000; rss: 114MB	AddCallGuards
  time: 0.007; rss: 116MB	ElaborateDrops
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.002; rss: 116MB	SimplifyCfg
  time: 0.002; rss: 116MB	InstCombine
  time: 0.000; rss: 116MB	Deaggregator
  time: 0.000; rss: 116MB	CopyPropagation
  time: 0.002; rss: 116MB	SimplifyLocals
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	PreTrans
time: 0.020; rss: 116MB	MIR optimisations
  time: 0.018; rss: 119MB	write metadata
  time: 0.046; rss: 132MB	translation item collection
  time: 0.005; rss: 132MB	codegen unit partitioning
  time: 0.006; rss: 159MB	internalize symbols
time: 0.454; rss: 159MB	translation
time: 0.000; rss: 159MB	assert dep graph
time: 0.000; rss: 159MB	serialize dep graph
  time: 0.036; rss: 109MB	llvm function passes [0]
  time: 0.022; rss: 111MB	llvm module passes [0]
  time: 0.713; rss: 117MB	codegen passes [0]
  time: 0.000; rss: 117MB	codegen passes [0]
time: 0.831; rss: 116MB	LLVM passes
time: 0.000; rss: 116MB	serialize work products
time: 0.035; rss: 89MB	linking
done

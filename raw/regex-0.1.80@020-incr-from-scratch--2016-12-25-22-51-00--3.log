commit 5752eae5f5ce3517d36f6668619dd2c70e6d2d88
Merge: 44ad63e f262eea
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 26 00:47:50 2016 +0000

    Auto merge of #38598 - brson:em, r=alexcrichton
    
    Emscripten targets are Unix targets
    
    I suspect this will fix the errors compiling libc https://buildbot.rust-lang.org/builders/auto-linux-rustbuild-cross-opt/builds/689/steps/compile/logs/stdio that are occurring on every PR.
    
    Emscripten is basically a posix emulation layer for the web and I consider it a Unix.
    
    cc @alexcrichton
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.298; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.032; rss: 172MB	MIR cleanup and validation
time: 0.047; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.005; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.029; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.008; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.044; rss: 175MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.088; rss: 185MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.012; rss: 312MB	internalize symbols
time: 1.671; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.125; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 261MB	llvm function passes [3]
time: 0.000; rss: 261MB	llvm module passes [3]
time: 0.002; rss: 261MB	llvm function passes [1]
time: 0.001; rss: 261MB	llvm function passes [6]
time: 0.000; rss: 261MB	llvm module passes [1]
time: 0.001; rss: 261MB	llvm module passes [6]
time: 0.004; rss: 263MB	llvm function passes [0]
time: 0.001; rss: 263MB	llvm module passes [0]
time: 0.006; rss: 269MB	codegen passes [3]
time: 0.008; rss: 269MB	llvm function passes [17]
time: 0.008; rss: 269MB	llvm function passes [3]
time: 0.003; rss: 271MB	llvm module passes [3]
time: 0.015; rss: 271MB	codegen passes [6]
time: 0.020; rss: 271MB	llvm function passes [5]
time: 0.002; rss: 271MB	llvm function passes [9]
time: 0.001; rss: 271MB	llvm module passes [9]
time: 0.021; rss: 271MB	llvm function passes [2]
time: 0.021; rss: 271MB	codegen passes [1]
time: 0.005; rss: 271MB	llvm function passes [1]
time: 0.016; rss: 271MB	llvm module passes [17]
time: 0.002; rss: 275MB	llvm module passes [1]
time: 0.015; rss: 275MB	llvm function passes [6]
time: 0.010; rss: 275MB	llvm function passes [8]
time: 0.007; rss: 275MB	llvm module passes [6]
time: 0.042; rss: 275MB	llvm function passes [4]
time: 0.010; rss: 277MB	llvm module passes [8]
time: 0.049; rss: 279MB	llvm function passes [18]
time: 0.004; rss: 281MB	llvm function passes [16]
time: 0.035; rss: 292MB	codegen passes [9]
time: 0.053; rss: 294MB	codegen passes [0]
time: 0.007; rss: 294MB	llvm module passes [16]
time: 0.003; rss: 296MB	llvm function passes [0]
time: 0.001; rss: 296MB	llvm module passes [0]
time: 0.027; rss: 296MB	llvm function passes [10]
time: 0.012; rss: 302MB	llvm module passes [10]
time: 0.022; rss: 304MB	llvm function passes [13]
time: 0.001; rss: 304MB	llvm module passes [13]
time: 0.048; rss: 311MB	llvm function passes [9]
time: 0.042; rss: 311MB	codegen passes [0]
time: 0.000; rss: 311MB	codegen passes [15]
time: 0.019; rss: 313MB	llvm module passes [9]
time: 0.075; rss: 319MB	llvm function passes [14]
time: 0.091; rss: 319MB	llvm function passes [12]
time: 0.098; rss: 321MB	codegen passes [1]
time: 0.062; rss: 327MB	codegen passes [13]
time: 0.117; rss: 331MB	codegen passes [16]
time: 0.044; rss: 335MB	llvm module passes [14]
time: 0.166; rss: 351MB	codegen passes [17]
time: 0.214; rss: 355MB	llvm module passes [2]
time: 0.185; rss: 352MB	codegen passes [3]
time: 0.237; rss: 349MB	llvm module passes [5]
time: 0.203; rss: 343MB	codegen passes [8]
time: 0.401; rss: 364MB	llvm module passes [18]
time: 0.360; rss: 371MB	llvm module passes [12]
time: 0.491; rss: 372MB	llvm module passes [4]
time: 0.481; rss: 392MB	codegen passes [6]
time: 0.455; rss: 386MB	codegen passes [10]
time: 0.411; rss: 380MB	codegen passes [5]
time: 0.431; rss: 372MB	codegen passes [2]
time: 0.529; rss: 369MB	codegen passes [14]
time: 0.576; rss: 363MB	codegen passes [9]
time: 0.788; rss: 396MB	codegen passes [12]
time: 0.921; rss: 376MB	codegen passes [18]
time: 0.992; rss: 357MB	codegen passes [4]
time: 1.637; rss: 352MB	LLVM passes
time: 0.000; rss: 352MB	serialize work products
time: 0.206; rss: 170MB	linking
done

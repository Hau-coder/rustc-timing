commit 3f957ebeff8932637002574c9eae75a702b202b7
Merge: e571f2d d44bcbf
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 29 13:48:50 2016 +0000

    Auto merge of #38627 - rkruppe:ninja-build, r=alexcrichton
    
    Accept ninja-build binary in place of ninja
    
    See comment in the diff for rationale.
    
    r? @alexcrichton
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 94MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 94MB	stability checking
time: 0.012; rss: 96MB	type collecting
time: 0.001; rss: 96MB	variance inference
time: 0.001; rss: 96MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.123; rss: 111MB	item-types checking
time: 0.301; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.008; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.033; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.008; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.004; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.046; rss: 176MB	MIR optimisations
  time: 0.010; rss: 178MB	write metadata
  time: 0.088; rss: 183MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 312MB	internalize symbols
time: 1.687; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.109; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 255MB	llvm function passes [3]
time: 0.000; rss: 255MB	llvm module passes [3]
time: 0.002; rss: 255MB	llvm function passes [0]
time: 0.000; rss: 255MB	llvm module passes [0]
time: 0.003; rss: 258MB	llvm function passes [1]
time: 0.001; rss: 258MB	llvm function passes [17]
time: 0.000; rss: 258MB	llvm module passes [17]
time: 0.001; rss: 258MB	llvm module passes [1]
time: 0.007; rss: 263MB	codegen passes [3]
time: 0.008; rss: 269MB	llvm function passes [3]
time: 0.002; rss: 269MB	llvm function passes [9]
time: 0.017; rss: 269MB	llvm function passes [5]
time: 0.009; rss: 269MB	llvm function passes [18]
time: 0.003; rss: 269MB	llvm module passes [3]
time: 0.020; rss: 269MB	llvm function passes [4]
time: 0.004; rss: 273MB	llvm module passes [18]
time: 0.007; rss: 273MB	llvm module passes [9]
time: 0.023; rss: 273MB	codegen passes [0]
time: 0.009; rss: 273MB	llvm function passes [0]
time: 0.033; rss: 273MB	codegen passes [17]
time: 0.004; rss: 273MB	llvm function passes [17]
time: 0.002; rss: 273MB	llvm module passes [17]
time: 0.045; rss: 273MB	llvm function passes [2]
time: 0.021; rss: 277MB	llvm function passes [13]
time: 0.024; rss: 277MB	llvm function passes [14]
time: 0.002; rss: 277MB	llvm module passes [13]
time: 0.033; rss: 277MB	llvm function passes [15]
time: 0.043; rss: 279MB	llvm function passes [7]
time: 0.019; rss: 282MB	llvm module passes [0]
time: 0.012; rss: 282MB	llvm module passes [14]
time: 0.022; rss: 296MB	llvm module passes [15]
time: 0.003; rss: 296MB	llvm function passes [16]
time: 0.001; rss: 296MB	llvm module passes [16]
time: 0.057; rss: 296MB	codegen passes [9]
time: 0.000; rss: 296MB	codegen passes [9]
time: 0.084; rss: 300MB	codegen passes [1]
time: 0.025; rss: 307MB	llvm function passes [11]
time: 0.001; rss: 307MB	llvm module passes [11]
time: 0.079; rss: 317MB	llvm function passes [10]
time: 0.074; rss: 319MB	codegen passes [16]
time: 0.101; rss: 319MB	codegen passes [13]
time: 0.133; rss: 328MB	codegen passes [3]
time: 0.114; rss: 327MB	codegen passes [17]
time: 0.141; rss: 331MB	codegen passes [18]
time: 0.122; rss: 329MB	llvm function passes [6]
time: 0.116; rss: 331MB	llvm function passes [8]
time: 0.194; rss: 335MB	llvm module passes [5]
time: 0.019; rss: 336MB	llvm module passes [8]
time: 0.111; rss: 344MB	codegen passes [11]
time: 0.036; rss: 344MB	llvm module passes [6]
time: 0.165; rss: 345MB	codegen passes [0]
time: 0.245; rss: 353MB	llvm module passes [4]
time: 0.398; rss: 367MB	llvm module passes [7]
time: 0.340; rss: 373MB	codegen passes [15]
time: 0.399; rss: 374MB	llvm module passes [10]
time: 0.528; rss: 375MB	llvm module passes [2]
time: 0.412; rss: 386MB	codegen passes [14]
time: 0.403; rss: 385MB	codegen passes [4]
time: 0.465; rss: 378MB	codegen passes [5]
time: 0.463; rss: 370MB	codegen passes [6]
time: 0.697; rss: 383MB	codegen passes [8]
time: 0.617; rss: 391MB	codegen passes [7]
time: 0.683; rss: 393MB	codegen passes [2]
time: 0.852; rss: 362MB	codegen passes [10]
time: 1.526; rss: 359MB	LLVM passes
time: 0.000; rss: 359MB	serialize work products
time: 0.207; rss: 174MB	linking
done

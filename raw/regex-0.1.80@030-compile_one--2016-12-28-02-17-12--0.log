commit 17f1fba353d2545ee54589350a83681dc3156e70
Merge: 0807104 babb7da
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 07:05:07 2016 +0000

    Auto merge of #38589 - aidanhs:aphs-stage0-rustdoc-test, r=alexcrichton
    
    Teach `rustdoc --test` about `--sysroot`, pass it when testing rust
    
    This permits rustdoc tests to work in stage0.
    
    Logical continuation of #36586.
    
    Snippet from https://github.com/rust-lang/rust/issues/38575#issuecomment-269090724:
    
    > it should actually be possible to run all the libstd tests immediately after creating std of stage0-out - there's no reason to build librustc at all if you've just made a change to (for example) libcollections, `./x.py test src/libcollections --stage 0 -v --incremental` should just work
    
    This PR makes it so (or appears to in my testing).
    
    r? @alexcrichton
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.046; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.009; rss: 93MB	lowering ast -> hir
time: 0.002; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.001; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 94MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.023; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 94MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 102MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.123; rss: 112MB	item-types checking
time: 0.303; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.008; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.033; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.009; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.018; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.004; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.047; rss: 176MB	MIR optimisations
  time: 0.010; rss: 178MB	write metadata
  time: 0.090; rss: 183MB	translation item collection
  time: 0.015; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 312MB	internalize symbols
time: 1.745; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.130; rss: 321MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 256MB	llvm function passes [6]
time: 0.002; rss: 256MB	llvm function passes [3]
time: 0.003; rss: 258MB	llvm function passes [2]
time: 0.000; rss: 258MB	llvm module passes [2]
time: 0.001; rss: 258MB	llvm module passes [6]
time: 0.001; rss: 258MB	llvm module passes [3]
time: 0.004; rss: 258MB	llvm function passes [1]
time: 0.000; rss: 258MB	llvm module passes [1]
time: 0.006; rss: 261MB	codegen passes [2]
time: 0.008; rss: 263MB	llvm function passes [2]
time: 0.018; rss: 263MB	llvm function passes [0]
time: 0.015; rss: 263MB	codegen passes [6]
time: 0.021; rss: 263MB	llvm function passes [5]
time: 0.004; rss: 263MB	llvm module passes [2]
time: 0.002; rss: 265MB	llvm function passes [8]
time: 0.001; rss: 265MB	llvm module passes [8]
time: 0.021; rss: 265MB	codegen passes [1]
time: 0.008; rss: 265MB	llvm function passes [6]
time: 0.003; rss: 265MB	llvm module passes [6]
time: 0.034; rss: 271MB	llvm function passes [7]
time: 0.016; rss: 282MB	llvm function passes [1]
time: 0.040; rss: 286MB	codegen passes [3]
time: 0.002; rss: 286MB	llvm function passes [3]
time: 0.007; rss: 286MB	llvm module passes [1]
time: 0.001; rss: 286MB	llvm module passes [3]
time: 0.003; rss: 294MB	llvm function passes [16]
time: 0.000; rss: 296MB	codegen passes [17]
time: 0.040; rss: 299MB	llvm function passes [9]
time: 0.002; rss: 301MB	llvm module passes [9]
time: 0.004; rss: 303MB	llvm function passes [12]
time: 0.002; rss: 303MB	llvm module passes [12]
time: 0.036; rss: 303MB	codegen passes [3]
time: 0.033; rss: 303MB	llvm module passes [16]
time: 0.077; rss: 313MB	llvm function passes [11]
time: 0.103; rss: 313MB	llvm module passes [5]
time: 0.111; rss: 313MB	llvm module passes [0]
time: 0.033; rss: 311MB	llvm module passes [11]
time: 0.121; rss: 313MB	llvm function passes [10]
time: 0.175; rss: 317MB	llvm function passes [4]
time: 0.028; rss: 315MB	llvm module passes [10]
time: 0.139; rss: 317MB	llvm function passes [14]
time: 0.144; rss: 317MB	llvm function passes [13]
time: 0.169; rss: 319MB	codegen passes [2]
time: 0.096; rss: 317MB	codegen passes [16]
time: 0.140; rss: 317MB	codegen passes [8]
time: 0.152; rss: 315MB	llvm function passes [15]
time: 0.110; rss: 324MB	codegen passes [12]
time: 0.043; rss: 330MB	llvm module passes [14]
time: 0.129; rss: 336MB	codegen passes [9]
time: 0.046; rss: 338MB	llvm module passes [15]
time: 0.215; rss: 334MB	codegen passes [6]
time: 0.264; rss: 342MB	codegen passes [1]
time: 0.166; rss: 337MB	codegen passes [11]
time: 0.364; rss: 343MB	llvm module passes [7]
time: 0.366; rss: 363MB	llvm module passes [13]
time: 0.441; rss: 380MB	llvm module passes [4]
time: 0.452; rss: 375MB	codegen passes [5]
time: 0.445; rss: 372MB	codegen passes [0]
time: 0.401; rss: 362MB	codegen passes [10]
time: 0.430; rss: 356MB	codegen passes [14]
time: 0.637; rss: 369MB	codegen passes [15]
time: 0.926; rss: 399MB	codegen passes [7]
time: 0.853; rss: 369MB	codegen passes [13]
time: 0.917; rss: 348MB	codegen passes [4]
time: 1.644; rss: 346MB	LLVM passes
time: 0.000; rss: 346MB	serialize work products
time: 0.207; rss: 162MB	linking
done

commit 8d65c8d64edeadcfcc210fd70f44249d02daec41
Merge: 4d07320 14e4b00
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 24 00:22:00 2016 +0000

    Auto merge of #38268 - withoutboats:parse_where_higher_rank_hack, r=eddyb
    
    Prevent where < ident > from parsing.
    
    In order to be forward compatible with `where<'a>` syntax for higher
    rank parameters, prevent potential conflicts with UFCS from parsing
    correctly for the near term.
rustc: ./regex-0.1.80@050-expand
git apply 050-expand.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10693
Pre-expansion node count:  55405
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86878
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 90MB	language item collection
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::expand[0]::find_cap_ref[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because HirBody("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::expand[0]::expand[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Krate changed or was removed
time: 0.021; rss: 94MB	load_dep_graph
time: 0.002; rss: 94MB	stability index
time: 0.002; rss: 94MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 102MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.123; rss: 112MB	item-types checking
time: 0.301; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.008; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.033; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.029; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.008; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.004; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.046; rss: 176MB	MIR optimisations
  time: 0.010; rss: 178MB	write metadata
  time: 0.089; rss: 183MB	translation item collection
  time: 0.015; rss: 187MB	codegen unit partitioning
  time: 0.012; rss: 312MB	internalize symbols
time: 1.691; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.123; rss: 321MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 258MB	llvm function passes [3]
time: 0.000; rss: 258MB	llvm module passes [3]
time: 0.002; rss: 258MB	llvm function passes [0]
time: 0.001; rss: 258MB	llvm function passes [5]
time: 0.000; rss: 258MB	llvm module passes [0]
time: 0.001; rss: 258MB	llvm module passes [5]
time: 0.003; rss: 258MB	llvm function passes [1]
time: 0.001; rss: 258MB	llvm module passes [1]
time: 0.006; rss: 264MB	codegen passes [3]
time: 0.008; rss: 268MB	llvm function passes [3]
time: 0.016; rss: 268MB	llvm function passes [6]
time: 0.007; rss: 272MB	llvm function passes [10]
time: 0.015; rss: 272MB	codegen passes [5]
time: 0.004; rss: 272MB	llvm module passes [3]
time: 0.003; rss: 272MB	llvm module passes [10]
time: 0.021; rss: 272MB	codegen passes [0]
time: 0.012; rss: 272MB	llvm function passes [7]
time: 0.001; rss: 272MB	llvm module passes [7]
time: 0.009; rss: 272MB	llvm function passes [0]
time: 0.018; rss: 272MB	llvm function passes [17]
time: 0.002; rss: 272MB	llvm module passes [17]
time: 0.026; rss: 276MB	llvm function passes [5]
time: 0.046; rss: 276MB	llvm function passes [2]
time: 0.043; rss: 276MB	llvm function passes [11]
time: 0.019; rss: 281MB	llvm module passes [0]
time: 0.053; rss: 281MB	llvm function passes [4]
time: 0.035; rss: 285MB	llvm function passes [16]
time: 0.049; rss: 285MB	codegen passes [1]
time: 0.012; rss: 285MB	llvm module passes [5]
time: 0.002; rss: 284MB	llvm function passes [1]
time: 0.001; rss: 284MB	llvm module passes [1]
time: 0.006; rss: 284MB	llvm module passes [16]
time: 0.043; rss: 286MB	codegen passes [7]
time: 0.003; rss: 291MB	llvm function passes [20]
time: 0.004; rss: 291MB	llvm function passes [15]
time: 0.001; rss: 293MB	llvm module passes [20]
time: 0.035; rss: 297MB	llvm function passes [18]
time: 0.000; rss: 299MB	codegen passes [13]
time: 0.022; rss: 299MB	llvm module passes [15]
time: 0.034; rss: 299MB	codegen passes [1]
time: 0.075; rss: 316MB	llvm function passes [19]
time: 0.094; rss: 316MB	codegen passes [17]
time: 0.080; rss: 315MB	llvm function passes [7]
time: 0.075; rss: 324MB	llvm module passes [18]
time: 0.028; rss: 328MB	llvm module passes [7]
time: 0.097; rss: 328MB	codegen passes [20]
time: 0.098; rss: 340MB	codegen passes [15]
time: 0.177; rss: 347MB	codegen passes [3]
time: 0.188; rss: 352MB	codegen passes [10]
time: 0.184; rss: 351MB	codegen passes [0]
time: 0.242; rss: 351MB	llvm module passes [6]
time: 0.235; rss: 349MB	llvm module passes [2]
time: 0.309; rss: 369MB	codegen passes [16]
time: 0.354; rss: 367MB	llvm module passes [19]
time: 0.453; rss: 366MB	llvm module passes [11]
time: 0.500; rss: 379MB	llvm module passes [4]
time: 0.407; rss: 371MB	codegen passes [5]
time: 0.489; rss: 386MB	codegen passes [18]
time: 0.436; rss: 376MB	codegen passes [6]
time: 0.405; rss: 370MB	codegen passes [2]
time: 0.612; rss: 373MB	codegen passes [7]
time: 0.736; rss: 392MB	codegen passes [19]
time: 0.925; rss: 379MB	codegen passes [11]
time: 0.981; rss: 358MB	codegen passes [4]
time: 1.645; rss: 355MB	LLVM passes
time: 0.000; rss: 355MB	serialize work products
time: 0.205; rss: 172MB	linking
done

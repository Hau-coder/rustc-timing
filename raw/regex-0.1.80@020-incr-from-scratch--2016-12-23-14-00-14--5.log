commit 467a7f049bac0386097c6cd2c80966c8d7453ce8
Merge: 00b4019 c12fc66
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 23 18:43:12 2016 +0000

    Auto merge of #38533 - jseyfried:legacy_custom_derive_deprecation, r=nrc
    
    Allow legacy custom derive authors to disable warnings in downstream crates
    
    This PR allows legacy custom derive authors to use a pre-deprecated method `registry.register_custom_derive()` instead of `registry.register_syntax_extension()` to avoid downstream deprecation warnings.
    
    r? @nrc
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.298; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.040; rss: 149MB	const checking
time: 0.007; rss: 149MB	privacy checking
time: 0.002; rss: 149MB	intrinsic checking
time: 0.001; rss: 149MB	effect checking
time: 0.005; rss: 149MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.017; rss: 150MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.033; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.008; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.045; rss: 175MB	MIR optimisations
  time: 0.008; rss: 178MB	write metadata
  time: 0.085; rss: 183MB	translation item collection
  time: 0.015; rss: 185MB	codegen unit partitioning
  time: 0.012; rss: 311MB	internalize symbols
time: 1.671; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.109; rss: 319MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 265MB	llvm function passes [1]
time: 0.000; rss: 265MB	llvm module passes [1]
time: 0.001; rss: 267MB	llvm function passes [6]
time: 0.003; rss: 267MB	llvm function passes [0]
time: 0.000; rss: 267MB	llvm module passes [0]
time: 0.001; rss: 267MB	llvm module passes [6]
time: 0.004; rss: 267MB	llvm function passes [2]
time: 0.001; rss: 269MB	llvm module passes [2]
time: 0.006; rss: 273MB	codegen passes [1]
time: 0.002; rss: 275MB	llvm function passes [1]
time: 0.001; rss: 275MB	llvm module passes [1]
time: 0.019; rss: 277MB	llvm function passes [4]
time: 0.015; rss: 277MB	codegen passes [6]
time: 0.021; rss: 277MB	llvm function passes [5]
time: 0.005; rss: 277MB	llvm function passes [17]
time: 0.002; rss: 277MB	llvm module passes [17]
time: 0.021; rss: 277MB	codegen passes [0]
time: 0.030; rss: 282MB	llvm function passes [20]
time: 0.004; rss: 282MB	llvm function passes [16]
time: 0.009; rss: 282MB	llvm function passes [0]
time: 0.003; rss: 282MB	llvm module passes [20]
time: 0.036; rss: 282MB	llvm function passes [19]
time: 0.002; rss: 282MB	llvm module passes [19]
time: 0.023; rss: 282MB	llvm function passes [6]
time: 0.007; rss: 282MB	llvm module passes [6]
time: 0.051; rss: 294MB	codegen passes [2]
time: 0.027; rss: 294MB	llvm module passes [16]
time: 0.026; rss: 294MB	llvm module passes [0]
time: 0.052; rss: 294MB	llvm function passes [18]
time: 0.060; rss: 296MB	codegen passes [1]
time: 0.003; rss: 296MB	llvm function passes [1]
time: 0.077; rss: 296MB	llvm function passes [3]
time: 0.001; rss: 298MB	llvm module passes [1]
time: 0.021; rss: 298MB	llvm function passes [14]
time: 0.066; rss: 298MB	llvm function passes [7]
time: 0.001; rss: 298MB	llvm module passes [14]
time: 0.026; rss: 298MB	llvm function passes [2]
time: 0.033; rss: 298MB	llvm module passes [18]
time: 0.000; rss: 305MB	codegen passes [12]
time: 0.018; rss: 309MB	llvm module passes [2]
time: 0.051; rss: 321MB	llvm function passes [15]
time: 0.094; rss: 321MB	codegen passes [17]
time: 0.116; rss: 324MB	llvm function passes [13]
time: 0.070; rss: 333MB	codegen passes [14]
time: 0.101; rss: 333MB	codegen passes [16]
time: 0.033; rss: 333MB	llvm module passes [15]
time: 0.059; rss: 332MB	codegen passes [1]
time: 0.162; rss: 356MB	codegen passes [0]
time: 0.151; rss: 354MB	codegen passes [20]
time: 0.246; rss: 353MB	llvm module passes [4]
time: 0.188; rss: 352MB	codegen passes [19]
time: 0.249; rss: 346MB	llvm module passes [5]
time: 0.277; rss: 378MB	codegen passes [18]
time: 0.385; rss: 372MB	llvm module passes [13]
time: 0.462; rss: 375MB	llvm module passes [7]
time: 0.509; rss: 384MB	llvm module passes [3]
time: 0.491; rss: 393MB	codegen passes [6]
time: 0.404; rss: 381MB	codegen passes [4]
time: 0.487; rss: 380MB	codegen passes [15]
time: 0.484; rss: 372MB	codegen passes [5]
time: 0.614; rss: 368MB	codegen passes [2]
time: 0.661; rss: 416MB	codegen passes [7]
time: 0.715; rss: 365MB	codegen passes [3]
time: 0.754; rss: 357MB	codegen passes [13]
time: 1.416; rss: 354MB	LLVM passes
time: 0.000; rss: 353MB	serialize work products
time: 0.207; rss: 170MB	linking
done

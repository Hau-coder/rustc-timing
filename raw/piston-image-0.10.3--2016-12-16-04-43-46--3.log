commit d250169cb5a96481a3e7c8f9fe05de49f60e5ae5
Merge: c6d8ab0 96a5fc7
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 16 07:26:41 2016 +0000

    Auto merge of #38359 - alexcrichton:sccache, r=brson
    
    rustbuild: Add sccache support
    
    This commit adds support for sccache, a ccache-like compiler which works on MSVC
    and stores results into an S3 bucket. This also switches over all Travis and
    AppVeyor automation to using sccache to ensure a shared and unified cache over
    time which can be shared across builders.
    
    The support for sccache manifests as a new `--enable-sccache` option which
    instructs us to configure LLVM differently to use a 'sccache' binary instead of
    a 'ccache' binary. All docker images for Travis builds are updated to download
    Mozilla's tooltool builds of sccache onto various containers and systems.
    Additionally a new `rust-lang-ci-sccache` bucket is configured to hold all of
    our ccache goodies.
    
    ---
    
    Note that this does not currently change Windows [due to previously written up issues](https://github.com/rust-lang/rust/issues/38119#issuecomment-266631585). Despite that, however, I was curious to get timings for the builds on Travis to see what ranges we're working with. As a result, this is a WIP PR I'm using to gauge build times and such.
rustc: ./piston-image-0.10.3
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.038; rss: 54MB	parsing
Lines of code:             12000
Pre-expansion node count:  90152
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.068; rss: 96MB	expansion
time: 0.000; rss: 96MB	maybe building test harness
time: 0.001; rss: 96MB	maybe creating a macro crate
Post-expansion node count: 148881
time: 0.000; rss: 96MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 96MB	complete gated feature checking
time: 0.006; rss: 96MB	early lint checks
time: 0.001; rss: 96MB	AST validation
time: 0.017; rss: 98MB	name resolution
time: 0.015; rss: 109MB	lowering ast -> hir
time: 0.003; rss: 111MB	indexing hir
time: 0.002; rss: 111MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.003; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.011; rss: 106MB	region resolution
time: 0.002; rss: 106MB	loop checking
time: 0.000; rss: 106MB	static item recursion checking
time: 0.059; rss: 106MB	compute_incremental_hashes_map
time: 0.000; rss: 106MB	load_dep_graph
time: 0.002; rss: 106MB	stability index
time: 0.004; rss: 106MB	stability checking
time: 0.015; rss: 108MB	type collecting
time: 0.000; rss: 108MB	variance inference
time: 0.000; rss: 108MB	impl wf inference
time: 0.013; rss: 110MB	coherence checking
time: 0.064; rss: 111MB	wf checking
time: 0.136; rss: 115MB	item-types checking
time: 0.681; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.045; rss: 130MB	const checking
time: 0.011; rss: 130MB	privacy checking
time: 0.005; rss: 130MB	intrinsic checking
time: 0.002; rss: 130MB	effect checking
time: 0.013; rss: 130MB	match checking
time: 0.008; rss: 130MB	liveness checking
time: 0.037; rss: 130MB	rvalue checking
time: 0.086; rss: 170MB	MIR dump
  time: 0.011; rss: 171MB	SimplifyCfg
  time: 0.019; rss: 171MB	QualifyAndPromoteConstants
  time: 0.023; rss: 171MB	TypeckMir
  time: 0.001; rss: 171MB	SimplifyBranches
  time: 0.005; rss: 171MB	SimplifyCfg
time: 0.059; rss: 171MB	MIR cleanup and validation
time: 0.103; rss: 171MB	borrow checking
time: 0.003; rss: 171MB	reachability checking
time: 0.007; rss: 171MB	death checking
time: 0.000; rss: 171MB	unused lib feature checking
time: 0.057; rss: 171MB	lint checking
time: 0.000; rss: 171MB	resolving dependency formats
  time: 0.001; rss: 171MB	NoLandingPads
  time: 0.005; rss: 171MB	SimplifyCfg
  time: 0.011; rss: 171MB	EraseRegions
  time: 0.002; rss: 171MB	AddCallGuards
  time: 0.041; rss: 175MB	ElaborateDrops
  time: 0.001; rss: 175MB	NoLandingPads
  time: 0.009; rss: 175MB	SimplifyCfg
  time: 0.005; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.007; rss: 175MB	SimplifyLocals
  time: 0.002; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.086; rss: 175MB	MIR optimisations
  time: 0.016; rss: 177MB	write metadata
  time: 0.401; rss: 221MB	translation item collection
  time: 0.020; rss: 221MB	codegen unit partitioning
  time: 0.020; rss: 337MB	internalize symbols
time: 2.367; rss: 337MB	translation
time: 0.000; rss: 337MB	assert dep graph
time: 0.000; rss: 337MB	serialize dep graph
  time: 0.207; rss: 233MB	llvm function passes [0]
  time: 0.093; rss: 235MB	llvm module passes [0]
  time: 4.211; rss: 234MB	codegen passes [0]
  time: 0.000; rss: 234MB	codegen passes [0]
time: 4.816; rss: 234MB	LLVM passes
time: 0.000; rss: 234MB	serialize work products
time: 0.127; rss: 107MB	linking
done

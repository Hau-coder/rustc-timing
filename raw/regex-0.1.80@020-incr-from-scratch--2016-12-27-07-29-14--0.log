commit d849b132672d4c7824045e4458693997a424994b
Merge: 9351c2c ca115dd
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 27 11:32:39 2016 +0000

    Auto merge of #38574 - Mark-Simulacrum:box-free-unspecialize, r=eddyb
    
    Remove special case for Box<ZST> in trans
    
    Remove extra lang item, `exchange_free`; use `box_free` instead.
    
    Trans used to insert code equivalent to `box_free` in a wrapper around
    `exchange_free`, and that code is now removed from trans.
    
    Fixes #37710.
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 103MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.296; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.009; rss: 173MB	QualifyAndPromoteConstants
  time: 0.012; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.031; rss: 173MB	MIR cleanup and validation
time: 0.045; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.029; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.007; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.043; rss: 175MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.085; rss: 183MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.012; rss: 312MB	internalize symbols
time: 1.682; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.109; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 255MB	llvm function passes [2]
time: 0.000; rss: 255MB	llvm module passes [2]
time: 0.002; rss: 255MB	llvm function passes [1]
time: 0.000; rss: 255MB	llvm module passes [1]
time: 0.003; rss: 255MB	llvm function passes [0]
time: 0.001; rss: 257MB	llvm module passes [0]
time: 0.001; rss: 257MB	llvm function passes [20]
time: 0.000; rss: 257MB	llvm module passes [20]
time: 0.006; rss: 262MB	codegen passes [2]
time: 0.008; rss: 266MB	llvm function passes [2]
time: 0.002; rss: 266MB	llvm function passes [11]
time: 0.001; rss: 266MB	llvm module passes [11]
time: 0.007; rss: 266MB	llvm function passes [19]
time: 0.018; rss: 266MB	llvm function passes [5]
time: 0.004; rss: 268MB	llvm module passes [2]
time: 0.020; rss: 268MB	llvm function passes [4]
time: 0.020; rss: 268MB	codegen passes [1]
time: 0.005; rss: 268MB	llvm function passes [1]
time: 0.002; rss: 268MB	llvm module passes [1]
time: 0.004; rss: 280MB	llvm function passes [13]
time: 0.002; rss: 280MB	llvm module passes [13]
time: 0.024; rss: 280MB	llvm module passes [19]
time: 0.003; rss: 292MB	llvm function passes [17]
time: 0.001; rss: 292MB	llvm module passes [17]
time: 0.015; rss: 292MB	llvm function passes [8]
time: 0.051; rss: 292MB	codegen passes [20]
time: 0.039; rss: 292MB	llvm function passes [18]
time: 0.036; rss: 294MB	llvm function passes [15]
time: 0.071; rss: 294MB	llvm function passes [3]
time: 0.051; rss: 294MB	codegen passes [11]
time: 0.000; rss: 294MB	codegen passes [11]
time: 0.067; rss: 296MB	llvm function passes [6]
time: 0.067; rss: 296MB	codegen passes [0]
time: 0.024; rss: 296MB	llvm module passes [8]
time: 0.022; rss: 296MB	llvm module passes [18]
time: 0.012; rss: 296MB	llvm module passes [15]
time: 0.015; rss: 298MB	llvm function passes [16]
time: 0.001; rss: 298MB	llvm module passes [16]
time: 0.043; rss: 304MB	llvm function passes [20]
time: 0.050; rss: 306MB	codegen passes [17]
time: 0.068; rss: 306MB	codegen passes [1]
time: 0.018; rss: 306MB	llvm module passes [20]
time: 0.080; rss: 310MB	llvm function passes [12]
time: 0.065; rss: 314MB	llvm function passes [14]
time: 0.072; rss: 328MB	codegen passes [16]
time: 0.040; rss: 335MB	llvm module passes [14]
time: 0.164; rss: 344MB	codegen passes [13]
time: 0.201; rss: 352MB	llvm module passes [5]
time: 0.193; rss: 353MB	codegen passes [2]
time: 0.128; rss: 343MB	codegen passes [8]
time: 0.161; rss: 344MB	codegen passes [19]
time: 0.236; rss: 342MB	llvm module passes [4]
time: 0.414; rss: 369MB	llvm module passes [6]
time: 0.364; rss: 369MB	llvm module passes [12]
time: 0.400; rss: 379MB	codegen passes [18]
time: 0.499; rss: 381MB	llvm module passes [3]
time: 0.481; rss: 391MB	codegen passes [15]
time: 0.413; rss: 384MB	codegen passes [5]
time: 0.469; rss: 374MB	codegen passes [14]
time: 0.396; rss: 367MB	codegen passes [4]
time: 0.628; rss: 372MB	codegen passes [20]
time: 0.617; rss: 380MB	codegen passes [6]
time: 1.069; rss: 382MB	codegen passes [3]
time: 1.159; rss: 359MB	codegen passes [12]
time: 1.772; rss: 356MB	LLVM passes
time: 0.000; rss: 356MB	serialize work products
time: 0.207; rss: 172MB	linking
done

commit 0c85f2a1bdb01666e74cd391df630da581f12ad0
Merge: b854d74 d292e12
Author: bors <bors@rust-lang.org>
Date:   Tue Jan 31 06:13:05 2017 +0000

    Auto merge of #38847 - michaelwoerister:gate-on-incr-comp, r=alexcrichton
    
    travis: Gate on some minimal support for incremental compilation.
    
    This commit adds a travis job that
    
    1. builds a stage2 compiler in incremental mode (but with empty incremental compilation cache), and
    2. builds and runs the run-pass test suite also in incremental mode.
    
    Building incrementally with an empty cache makes sure that the compiler doesn't crash in dependency tracking during bootstrapping. Executing the incrementally built test suite gives some measure of confidence that we generate valid code.
    
    Note, however, that the above does not give strong guarantees about the validity of incremental compilation, it just provides a basis for being able to rely on from-scratch incr. comp. builds as reference values in further tests (which then do actual incremental compilation).
    
    r? @alexcrichton
rustc 1.15.0-nightly (daf8c1dfc 2016-12-05)
-rwxr-xr-x 1 root root 9432 Dec  6 15:39 /usr/local/bin/rustc
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
makefile:18: recipe for target 'all@030-compile_one' failed
done

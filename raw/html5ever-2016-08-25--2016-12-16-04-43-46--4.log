commit d250169cb5a96481a3e7c8f9fe05de49f60e5ae5
Merge: c6d8ab0 96a5fc7
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 16 07:26:41 2016 +0000

    Auto merge of #38359 - alexcrichton:sccache, r=brson
    
    rustbuild: Add sccache support
    
    This commit adds support for sccache, a ccache-like compiler which works on MSVC
    and stores results into an S3 bucket. This also switches over all Travis and
    AppVeyor automation to using sccache to ensure a shared and unified cache over
    time which can be shared across builders.
    
    The support for sccache manifests as a new `--enable-sccache` option which
    instructs us to configure LLVM differently to use a 'sccache' binary instead of
    a 'ccache' binary. All docker images for Travis builds are updated to download
    Mozilla's tooltool builds of sccache onto various containers and systems.
    Additionally a new `rust-lang-ci-sccache` bucket is configured to hold all of
    our ccache goodies.
    
    ---
    
    Note that this does not currently change Windows [due to previously written up issues](https://github.com/rust-lang/rust/issues/38119#issuecomment-266631585). Despite that, however, I was curious to get timings for the builds on Travis to see what ranges we're working with. As a result, this is a WIP PR I'm using to gauge build times and such.
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.024; rss: 50MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.673; rss: 103MB	expansion
time: 0.000; rss: 103MB	maybe building test harness
time: 0.002; rss: 103MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 103MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 103MB	complete gated feature checking
time: 0.008; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.015; rss: 105MB	name resolution
time: 0.014; rss: 116MB	lowering ast -> hir
time: 0.002; rss: 118MB	indexing hir
time: 0.002; rss: 118MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.011; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.001; rss: 104MB	static item recursion checking
time: 0.023; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.001; rss: 105MB	stability index
time: 0.003; rss: 105MB	stability checking
time: 0.009; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.000; rss: 107MB	impl wf inference
time: 0.010; rss: 109MB	coherence checking
time: 0.019; rss: 109MB	wf checking
time: 0.260; rss: 117MB	item-types checking
time: 0.420; rss: 129MB	item-bodies checking
time: 0.000; rss: 129MB	drop-impl checking
time: 0.057; rss: 131MB	const checking
time: 0.006; rss: 131MB	privacy checking
time: 0.002; rss: 131MB	intrinsic checking
time: 0.002; rss: 131MB	effect checking
time: 0.014; rss: 131MB	match checking
time: 0.010; rss: 130MB	liveness checking
time: 0.021; rss: 130MB	rvalue checking
time: 0.101; rss: 171MB	MIR dump
  time: 0.008; rss: 171MB	SimplifyCfg
  time: 0.014; rss: 173MB	QualifyAndPromoteConstants
  time: 0.023; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.004; rss: 173MB	SimplifyCfg
time: 0.049; rss: 173MB	MIR cleanup and validation
time: 0.077; rss: 179MB	borrow checking
time: 0.002; rss: 179MB	reachability checking
time: 0.005; rss: 179MB	death checking
time: 0.000; rss: 179MB	unused lib feature checking
time: 0.049; rss: 179MB	lint checking
time: 0.000; rss: 179MB	resolving dependency formats
  time: 0.000; rss: 179MB	NoLandingPads
  time: 0.004; rss: 179MB	SimplifyCfg
  time: 0.009; rss: 179MB	EraseRegions
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.072; rss: 181MB	ElaborateDrops
  time: 0.000; rss: 181MB	NoLandingPads
  time: 0.006; rss: 179MB	SimplifyCfg
  time: 0.007; rss: 179MB	InstCombine
  time: 0.001; rss: 179MB	Deaggregator
  time: 0.000; rss: 179MB	CopyPropagation
  time: 0.007; rss: 177MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.110; rss: 175MB	MIR optimisations
  time: 0.011; rss: 177MB	write metadata
  time: 0.043; rss: 191MB	translation item collection
  time: 0.004; rss: 191MB	codegen unit partitioning
  time: 0.005; rss: 207MB	internalize symbols
time: 0.322; rss: 207MB	translation
time: 0.000; rss: 207MB	assert dep graph
time: 0.000; rss: 207MB	serialize dep graph
  time: 0.029; rss: 113MB	llvm function passes [0]
  time: 0.019; rss: 114MB	llvm module passes [0]
  time: 0.649; rss: 117MB	codegen passes [0]
  time: 0.000; rss: 117MB	codegen passes [0]
time: 0.752; rss: 116MB	LLVM passes
time: 0.000; rss: 116MB	serialize work products
time: 0.034; rss: 100MB	linking
done

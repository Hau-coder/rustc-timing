commit 3db197aa9d343c7974b06a9b18ae5f78d5c64637
Merge: 6d5ec58 fbc3f11
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 11 21:19:34 2016 +0000

    Auto merge of #38265 - bluss:mir-deaggregator-loop, r=nagisa
    
    Reinstate while loop in deaggregator pass
    
    A previous commit must have removed the `while let` loop here by
    mistake; for each basic block, it should find and deaggregate multiple
    statements in their index order, and the `curr` index tracks the
    progress through the block.
    
    This fixes both the case of deaggregating statements in separate
    basic blocks (preserving `curr` could prevent that) as well
    as multiple times in the same block (missing loop prevented that).
    
    The loop was lost in commit bda46c21fe30377b9587b584c64ffe99da6c14ce.
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.023; rss: 50MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.678; rss: 103MB	expansion
time: 0.000; rss: 103MB	maybe building test harness
time: 0.002; rss: 103MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 103MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 103MB	complete gated feature checking
time: 0.008; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.015; rss: 105MB	name resolution
time: 0.014; rss: 116MB	lowering ast -> hir
time: 0.003; rss: 119MB	indexing hir
time: 0.002; rss: 119MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.012; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.001; rss: 104MB	static item recursion checking
time: 0.023; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.001; rss: 105MB	stability index
time: 0.003; rss: 105MB	stability checking
time: 0.009; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.000; rss: 107MB	impl wf inference
time: 0.011; rss: 109MB	coherence checking
time: 0.019; rss: 110MB	wf checking
time: 0.337; rss: 113MB	item-types checking
time: 0.417; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.065; rss: 128MB	const checking
time: 0.006; rss: 128MB	privacy checking
time: 0.002; rss: 128MB	intrinsic checking
time: 0.002; rss: 128MB	effect checking
time: 0.014; rss: 128MB	match checking
time: 0.035; rss: 127MB	liveness checking
time: 0.022; rss: 127MB	rvalue checking
time: 0.106; rss: 165MB	MIR dump
  time: 0.008; rss: 166MB	SimplifyCfg
  time: 0.014; rss: 168MB	QualifyAndPromoteConstants
  time: 0.022; rss: 168MB	TypeckMir
  time: 0.000; rss: 168MB	SimplifyBranches
  time: 0.004; rss: 168MB	SimplifyCfg
time: 0.048; rss: 168MB	MIR cleanup and validation
time: 0.079; rss: 174MB	borrow checking
time: 0.002; rss: 174MB	reachability checking
time: 0.005; rss: 174MB	death checking
time: 0.000; rss: 174MB	unused lib feature checking
time: 0.052; rss: 175MB	lint checking
time: 0.000; rss: 175MB	resolving dependency formats
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.009; rss: 175MB	EraseRegions
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.075; rss: 177MB	ElaborateDrops
  time: 0.000; rss: 177MB	NoLandingPads
  time: 0.007; rss: 176MB	SimplifyCfg
  time: 0.007; rss: 175MB	InstCombine
  time: 0.001; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.007; rss: 173MB	SimplifyLocals
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.000; rss: 173MB	PreTrans
time: 0.113; rss: 173MB	MIR optimisations
  time: 0.011; rss: 174MB	write metadata
  time: 0.064; rss: 186MB	translation item collection
  time: 0.004; rss: 186MB	codegen unit partitioning
  time: 0.005; rss: 201MB	internalize symbols
time: 0.357; rss: 201MB	translation
time: 0.000; rss: 201MB	assert dep graph
time: 0.000; rss: 201MB	serialize dep graph
  time: 0.021; rss: 111MB	llvm function passes [0]
  time: 0.014; rss: 113MB	llvm module passes [0]
  time: 0.485; rss: 116MB	codegen passes [0]
  time: 0.000; rss: 116MB	codegen passes [0]
time: 0.561; rss: 115MB	LLVM passes
time: 0.000; rss: 115MB	serialize work products
time: 0.025; rss: 99MB	linking
done

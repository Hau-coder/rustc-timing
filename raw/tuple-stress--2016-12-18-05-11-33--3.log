commit 8327b5afafde7cdd6fd4e939d9a8fe12f76503ef
Merge: d54e723 ff59474
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 18 07:59:32 2016 +0000

    Auto merge of #37429 - camlorn:univariant_layout_optimization, r=eddyb
    
    struct field reordering and optimization
    
    This is work in progress.  The goal is to divorce the order of fields in source code from the order of fields in the LLVM IR, then optimize structs (and tuples/enum variants)by always ordering fields from least to most aligned.  It does not work yet.  I intend to check compiler memory usage as a benchmark, and a crater run will probably be required.
    
    I don't know enough of the compiler to complete this work unaided.  If you see places that still need updating, please mention them.  The only one I know of currently is debuginfo, which I'm putting off intentionally until a bit later.
    
    r? @eddyb
rustc: ./tuple-stress
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.436; rss: 136MB	parsing
Lines of code:             65571
Pre-expansion node count:  393241
time: 0.000; rss: 136MB	recursion limit
time: 0.000; rss: 136MB	crate injection
time: 0.000; rss: 136MB	plugin loading
time: 0.000; rss: 136MB	plugin registration
time: 0.100; rss: 158MB	expansion
time: 0.000; rss: 158MB	maybe building test harness
time: 0.005; rss: 158MB	maybe creating a macro crate
Post-expansion node count: 393303
time: 0.000; rss: 158MB	checking for inline asm in case the target doesn't support it
time: 0.005; rss: 158MB	complete gated feature checking
time: 0.033; rss: 158MB	early lint checks
time: 0.005; rss: 158MB	AST validation
time: 0.011; rss: 158MB	name resolution
time: 0.031; rss: 201MB	lowering ast -> hir
time: 0.008; rss: 218MB	indexing hir
time: 0.005; rss: 218MB	attribute checking
time: 0.002; rss: 141MB	language item collection
time: 0.002; rss: 141MB	lifetime resolution
time: 0.000; rss: 141MB	looking for entry point
time: 0.000; rss: 141MB	looking for plugin registrar
time: 0.051; rss: 163MB	region resolution
time: 0.002; rss: 163MB	loop checking
time: 0.004; rss: 163MB	static item recursion checking
time: 0.211; rss: 163MB	compute_incremental_hashes_map
time: 0.000; rss: 163MB	load_dep_graph
time: 0.002; rss: 163MB	stability index
time: 0.002; rss: 163MB	stability checking
time: 0.002; rss: 163MB	type collecting
time: 0.000; rss: 163MB	variance inference
time: 0.000; rss: 163MB	impl wf inference
time: 0.003; rss: 165MB	coherence checking
time: 0.002; rss: 165MB	wf checking
time: 0.580; rss: 209MB	item-types checking
time: 0.004; rss: 209MB	item-bodies checking
time: 0.000; rss: 209MB	drop-impl checking
time: 0.179; rss: 220MB	const checking
time: 0.004; rss: 220MB	privacy checking
time: 0.002; rss: 220MB	intrinsic checking
time: 0.002; rss: 220MB	effect checking
time: 0.000; rss: 220MB	match checking
time: 0.003; rss: 220MB	liveness checking
time: 0.002; rss: 220MB	rvalue checking
time: 0.299; rss: 278MB	MIR dump
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.012; rss: 278MB	QualifyAndPromoteConstants
  time: 0.038; rss: 278MB	TypeckMir
  time: 0.000; rss: 278MB	SimplifyBranches
  time: 0.000; rss: 278MB	SimplifyCfg
time: 0.050; rss: 278MB	MIR cleanup and validation
time: 0.004; rss: 278MB	borrow checking
time: 0.000; rss: 278MB	reachability checking
time: 0.004; rss: 278MB	death checking
time: 0.000; rss: 278MB	unused lib feature checking
time: 0.192; rss: 278MB	lint checking
time: 0.001; rss: 278MB	resolving dependency formats
  time: 0.000; rss: 278MB	NoLandingPads
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.007; rss: 278MB	EraseRegions
  time: 0.000; rss: 278MB	AddCallGuards
  time: 0.000; rss: 278MB	ElaborateDrops
  time: 0.000; rss: 278MB	NoLandingPads
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.007; rss: 278MB	InstCombine
  time: 0.000; rss: 278MB	Deaggregator
  time: 0.000; rss: 278MB	CopyPropagation
  time: 0.009; rss: 278MB	SimplifyLocals
  time: 0.000; rss: 278MB	AddCallGuards
  time: 0.000; rss: 278MB	PreTrans
time: 0.023; rss: 278MB	MIR optimisations
  time: 0.000; rss: 278MB	write metadata
  time: 0.006; rss: 280MB	translation item collection
  time: 0.000; rss: 280MB	codegen unit partitioning
  time: 0.000; rss: 306MB	internalize symbols
time: 0.318; rss: 306MB	translation
time: 0.000; rss: 306MB	assert dep graph
time: 0.000; rss: 306MB	serialize dep graph
  time: 0.024; rss: 128MB	llvm function passes [0]
  time: 0.000; rss: 128MB	llvm module passes [0]
  time: 0.323; rss: 124MB	codegen passes [0]
  time: 0.000; rss: 124MB	codegen passes [0]
time: 0.348; rss: 124MB	LLVM passes
time: 0.000; rss: 124MB	serialize work products
  time: 0.079; rss: 92MB	running linker
time: 0.080; rss: 92MB	linking
done

commit 82801b552ee8a683c40eb9fce5b892e649794648
Merge: 86896ba 521b2ea
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 27 18:25:22 2016 +0000

    Auto merge of #38600 - arielb1:dead-drop, r=eddyb
    
    clear discriminant drop flag at the bottom of a drop ladder
    
    Fixes #38437.
    
    Beta-nominating because serious I-wrong.
    
    r? @eddyb
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 96MB	type collecting
time: 0.001; rss: 96MB	variance inference
time: 0.001; rss: 96MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.124; rss: 111MB	item-types checking
time: 0.298; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.039; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.005; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	QualifyAndPromoteConstants
  time: 0.012; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.031; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.029; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.008; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.043; rss: 175MB	MIR optimisations
  time: 0.008; rss: 177MB	write metadata
  time: 0.086; rss: 182MB	translation item collection
  time: 0.014; rss: 187MB	codegen unit partitioning
  time: 0.012; rss: 311MB	internalize symbols
time: 1.682; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.109; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 259MB	llvm function passes [3]
time: 0.000; rss: 261MB	llvm module passes [3]
time: 0.002; rss: 261MB	llvm function passes [0]
time: 0.000; rss: 261MB	llvm module passes [0]
time: 0.001; rss: 261MB	llvm function passes [6]
time: 0.001; rss: 261MB	llvm module passes [6]
time: 0.003; rss: 261MB	llvm function passes [1]
time: 0.001; rss: 263MB	llvm module passes [1]
time: 0.006; rss: 268MB	codegen passes [3]
time: 0.002; rss: 271MB	llvm function passes [17]
time: 0.001; rss: 271MB	llvm module passes [17]
time: 0.008; rss: 271MB	llvm function passes [3]
time: 0.015; rss: 275MB	codegen passes [6]
time: 0.003; rss: 275MB	llvm module passes [3]
time: 0.021; rss: 279MB	llvm function passes [5]
time: 0.020; rss: 279MB	llvm function passes [4]
time: 0.021; rss: 279MB	codegen passes [0]
time: 0.002; rss: 281MB	llvm function passes [7]
time: 0.001; rss: 281MB	llvm module passes [7]
time: 0.024; rss: 283MB	llvm function passes [16]
time: 0.003; rss: 283MB	llvm module passes [16]
time: 0.043; rss: 287MB	llvm function passes [2]
time: 0.025; rss: 287MB	llvm function passes [6]
time: 0.008; rss: 287MB	llvm function passes [19]
time: 0.032; rss: 287MB	llvm function passes [9]
time: 0.002; rss: 287MB	llvm module passes [9]
time: 0.013; rss: 292MB	llvm module passes [6]
time: 0.010; rss: 292MB	llvm module passes [19]
time: 0.054; rss: 294MB	codegen passes [1]
time: 0.000; rss: 294MB	codegen passes [13]
time: 0.048; rss: 294MB	llvm function passes [10]
time: 0.003; rss: 300MB	llvm function passes [20]
time: 0.001; rss: 300MB	llvm module passes [20]
time: 0.052; rss: 300MB	llvm function passes [18]
time: 0.048; rss: 300MB	llvm function passes [0]
time: 0.006; rss: 300MB	llvm module passes [10]
time: 0.012; rss: 307MB	llvm module passes [18]
time: 0.086; rss: 309MB	llvm function passes [15]
time: 0.072; rss: 316MB	codegen passes [7]
time: 0.057; rss: 311MB	llvm function passes [12]
time: 0.090; rss: 316MB	llvm function passes [8]
time: 0.068; rss: 316MB	codegen passes [19]
time: 0.092; rss: 317MB	codegen passes [17]
time: 0.044; rss: 324MB	llvm module passes [12]
time: 0.087; rss: 330MB	codegen passes [20]
time: 0.043; rss: 333MB	llvm module passes [8]
time: 0.138; rss: 337MB	codegen passes [3]
time: 0.151; rss: 354MB	codegen passes [9]
time: 0.218; rss: 355MB	llvm module passes [4]
time: 0.231; rss: 352MB	llvm module passes [5]
time: 0.157; rss: 356MB	codegen passes [10]
time: 0.244; rss: 359MB	codegen passes [16]
time: 0.345; rss: 368MB	llvm module passes [0]
time: 0.449; rss: 380MB	llvm module passes [2]
time: 0.414; rss: 378MB	llvm module passes [15]
time: 0.450; rss: 390MB	codegen passes [18]
time: 0.549; rss: 395MB	codegen passes [6]
time: 0.421; rss: 390MB	codegen passes [4]
time: 0.481; rss: 381MB	codegen passes [8]
time: 0.426; rss: 371MB	codegen passes [5]
time: 0.674; rss: 375MB	codegen passes [12]
time: 0.682; rss: 401MB	codegen passes [15]
time: 1.086; rss: 389MB	codegen passes [2]
time: 1.167; rss: 362MB	codegen passes [0]
time: 1.704; rss: 360MB	LLVM passes
time: 0.000; rss: 359MB	serialize work products
time: 0.206; rss: 173MB	linking
done

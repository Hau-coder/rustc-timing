commit 469fd779ee24f8348acd438f471c8c3a5cef309a
Merge: 17f1fba a6fe6c9
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 09:42:46 2016 +0000

    Auto merge of #38616 - pnkfelix:refactor-mir-dataflow-remove-ctxt, r=arielb1
    
    Refactor mir::dataflow: remove Ctxt associated type from BitDenotation trait
    
    Refactor mir::dataflow: remove Ctxt associated type from BitDenotation trait
    
    I no longer remember why I needed this (or thought I did). The way
    that the `BitDenotation` is passed around in all existing use cases
    (and planned future ones), the thing that were in the `Ctxt` can just
    be part of `Self` instead.
    
    (I think ariel had been pushing me to do this back when I first put in
    this infrastructure; it took me a while to see how much of pain the
    `Ctxt` was causing.)
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.007; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.033; rss: 94MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 96MB	type collecting
time: 0.001; rss: 96MB	variance inference
time: 0.001; rss: 96MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.123; rss: 111MB	item-types checking
time: 0.298; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.039; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.005; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.009; rss: 173MB	QualifyAndPromoteConstants
  time: 0.012; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.031; rss: 173MB	MIR cleanup and validation
time: 0.045; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.007; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.043; rss: 176MB	MIR optimisations
  time: 0.008; rss: 178MB	write metadata
  time: 0.084; rss: 183MB	translation item collection
  time: 0.015; rss: 187MB	codegen unit partitioning
  time: 0.012; rss: 311MB	internalize symbols
time: 1.688; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.122; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 260MB	llvm function passes [4]
time: 0.000; rss: 260MB	llvm module passes [4]
time: 0.001; rss: 260MB	llvm function passes [7]
time: 0.003; rss: 260MB	llvm function passes [3]
time: 0.000; rss: 260MB	llvm module passes [3]
time: 0.001; rss: 260MB	llvm module passes [7]
time: 0.004; rss: 260MB	llvm function passes [1]
time: 0.001; rss: 260MB	llvm module passes [1]
time: 0.006; rss: 263MB	codegen passes [4]
time: 0.008; rss: 272MB	llvm function passes [4]
time: 0.003; rss: 272MB	llvm module passes [4]
time: 0.015; rss: 272MB	codegen passes [7]
time: 0.019; rss: 272MB	llvm function passes [6]
time: 0.020; rss: 272MB	llvm function passes [2]
time: 0.025; rss: 274MB	codegen passes [3]
time: 0.016; rss: 274MB	llvm function passes [8]
time: 0.002; rss: 274MB	llvm function passes [16]
time: 0.004; rss: 274MB	llvm function passes [3]
time: 0.003; rss: 274MB	llvm module passes [8]
time: 0.002; rss: 274MB	llvm module passes [3]
time: 0.009; rss: 274MB	llvm function passes [17]
time: 0.042; rss: 278MB	llvm function passes [0]
time: 0.023; rss: 278MB	llvm function passes [7]
time: 0.011; rss: 278MB	llvm module passes [16]
time: 0.008; rss: 278MB	llvm module passes [17]
time: 0.043; rss: 278MB	llvm function passes [5]
time: 0.015; rss: 278MB	llvm function passes [15]
time: 0.021; rss: 278MB	llvm function passes [12]
time: 0.002; rss: 278MB	llvm module passes [12]
time: 0.052; rss: 292MB	codegen passes [1]
time: 0.002; rss: 292MB	llvm function passes [14]
time: 0.001; rss: 294MB	llvm module passes [14]
time: 0.003; rss: 294MB	llvm function passes [1]
time: 0.001; rss: 294MB	llvm module passes [1]
time: 0.015; rss: 294MB	llvm module passes [15]
time: 0.044; rss: 298MB	codegen passes [16]
time: 0.000; rss: 298MB	codegen passes [16]
time: 0.065; rss: 313MB	codegen passes [3]
time: 0.042; rss: 313MB	codegen passes [1]
time: 0.057; rss: 313MB	llvm function passes [10]
time: 0.077; rss: 313MB	llvm function passes [13]
time: 0.069; rss: 312MB	llvm function passes [9]
time: 0.100; rss: 316MB	llvm module passes [7]
time: 0.023; rss: 316MB	llvm module passes [9]
time: 0.046; rss: 325MB	llvm module passes [10]
time: 0.104; rss: 329MB	codegen passes [14]
time: 0.112; rss: 338MB	codegen passes [12]
time: 0.150; rss: 351MB	codegen passes [4]
time: 0.211; rss: 350MB	llvm module passes [2]
time: 0.229; rss: 336MB	llvm module passes [6]
time: 0.210; rss: 351MB	codegen passes [17]
time: 0.227; rss: 348MB	codegen passes [8]
time: 0.383; rss: 364MB	llvm module passes [5]
time: 0.296; rss: 363MB	codegen passes [15]
time: 0.450; rss: 376MB	llvm module passes [13]
time: 0.555; rss: 384MB	llvm module passes [0]
time: 0.481; rss: 396MB	codegen passes [7]
time: 0.394; rss: 380MB	codegen passes [6]
time: 0.404; rss: 374MB	codegen passes [2]
time: 0.488; rss: 364MB	codegen passes [10]
time: 0.682; rss: 376MB	codegen passes [9]
time: 0.651; rss: 393MB	codegen passes [5]
time: 0.747; rss: 380MB	codegen passes [13]
time: 0.751; rss: 358MB	codegen passes [0]
time: 1.464; rss: 353MB	LLVM passes
time: 0.000; rss: 353MB	serialize work products
time: 0.206; rss: 171MB	linking
done

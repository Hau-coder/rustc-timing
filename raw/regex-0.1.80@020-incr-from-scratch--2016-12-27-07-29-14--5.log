commit d849b132672d4c7824045e4458693997a424994b
Merge: 9351c2c ca115dd
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 27 11:32:39 2016 +0000

    Auto merge of #38574 - Mark-Simulacrum:box-free-unspecialize, r=eddyb
    
    Remove special case for Box<ZST> in trans
    
    Remove extra lang item, `exchange_free`; use `box_free` instead.
    
    Trans used to insert code equivalent to `box_free` in a wrapper around
    `exchange_free`, and that code is now removed from trans.
    
    Fixes #37710.
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.001; rss: 92MB	stability index
time: 0.002; rss: 92MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.299; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.040; rss: 149MB	const checking
time: 0.008; rss: 149MB	privacy checking
time: 0.002; rss: 149MB	intrinsic checking
time: 0.001; rss: 149MB	effect checking
time: 0.006; rss: 149MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.017; rss: 150MB	rvalue checking
time: 0.045; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.001; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.034; rss: 172MB	MIR cleanup and validation
time: 0.047; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.005; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.030; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.018; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.004; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.047; rss: 175MB	MIR optimisations
  time: 0.010; rss: 177MB	write metadata
  time: 0.089; rss: 182MB	translation item collection
  time: 0.015; rss: 184MB	codegen unit partitioning
  time: 0.013; rss: 311MB	internalize symbols
time: 1.702; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.129; rss: 319MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 263MB	llvm function passes [3]
time: 0.000; rss: 263MB	llvm module passes [3]
time: 0.003; rss: 263MB	llvm function passes [0]
time: 0.001; rss: 263MB	llvm function passes [6]
time: 0.000; rss: 263MB	llvm module passes [0]
time: 0.001; rss: 265MB	llvm module passes [6]
time: 0.004; rss: 265MB	llvm function passes [1]
time: 0.001; rss: 265MB	llvm module passes [1]
time: 0.007; rss: 271MB	codegen passes [3]
time: 0.007; rss: 271MB	llvm function passes [19]
time: 0.002; rss: 273MB	llvm function passes [18]
time: 0.008; rss: 273MB	llvm function passes [3]
time: 0.001; rss: 273MB	llvm module passes [18]
time: 0.018; rss: 275MB	llvm function passes [5]
time: 0.015; rss: 275MB	codegen passes [6]
time: 0.003; rss: 275MB	llvm module passes [3]
time: 0.022; rss: 275MB	llvm function passes [2]
time: 0.005; rss: 277MB	llvm function passes [6]
time: 0.020; rss: 277MB	codegen passes [0]
time: 0.002; rss: 277MB	llvm module passes [6]
time: 0.009; rss: 281MB	llvm function passes [0]
time: 0.002; rss: 283MB	llvm function passes [9]
time: 0.001; rss: 283MB	llvm module passes [9]
time: 0.028; rss: 290MB	llvm module passes [19]
time: 0.009; rss: 290MB	llvm module passes [0]
time: 0.040; rss: 299MB	codegen passes [1]
time: 0.000; rss: 299MB	codegen passes [1]
time: 0.003; rss: 298MB	llvm function passes [12]
time: 0.032; rss: 298MB	llvm function passes [16]
time: 0.001; rss: 298MB	llvm module passes [12]
time: 0.007; rss: 298MB	llvm module passes [16]
time: 0.036; rss: 300MB	llvm function passes [7]
time: 0.002; rss: 300MB	llvm module passes [7]
time: 0.077; rss: 301MB	llvm function passes [4]
time: 0.058; rss: 305MB	llvm function passes [17]
time: 0.013; rss: 309MB	llvm module passes [17]
time: 0.105; rss: 315MB	llvm function passes [20]
time: 0.092; rss: 315MB	codegen passes [18]
time: 0.086; rss: 317MB	codegen passes [6]
time: 0.078; rss: 317MB	llvm function passes [11]
time: 0.086; rss: 317MB	llvm function passes [10]
time: 0.075; rss: 320MB	codegen passes [9]
time: 0.112; rss: 320MB	llvm function passes [8]
time: 0.027; rss: 328MB	llvm module passes [10]
time: 0.146; rss: 329MB	llvm module passes [2]
time: 0.054; rss: 330MB	llvm module passes [11]
time: 0.105; rss: 330MB	codegen passes [7]
time: 0.171; rss: 335MB	llvm module passes [5]
time: 0.124; rss: 336MB	codegen passes [12]
time: 0.196; rss: 350MB	codegen passes [0]
time: 0.218; rss: 348MB	codegen passes [3]
time: 0.222; rss: 348MB	codegen passes [19]
time: 0.322; rss: 364MB	codegen passes [16]
time: 0.410; rss: 366MB	llvm module passes [20]
time: 0.402; rss: 370MB	llvm module passes [8]
time: 0.494; rss: 374MB	llvm module passes [4]
time: 0.477; rss: 388MB	codegen passes [17]
time: 0.402; rss: 389MB	codegen passes [5]
time: 0.505; rss: 376MB	codegen passes [10]
time: 0.479; rss: 363MB	codegen passes [2]
time: 0.574; rss: 367MB	codegen passes [11]
time: 0.634; rss: 414MB	codegen passes [20]
time: 0.683; rss: 383MB	codegen passes [4]
time: 0.764; rss: 358MB	codegen passes [8]
time: 1.423; rss: 354MB	LLVM passes
time: 0.000; rss: 354MB	serialize work products
time: 0.206; rss: 168MB	linking
done

commit 94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a
Merge: 3f9823d 83453bc
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 19 20:07:49 2016 +0000

    Auto merge of #38072 - nikomatsakis:bootstrap-incremental, r=acrichto
    
    add preliminary support for incremental compilation to rustbuild.py
    
    This implements the integration described in #37929. It requires the use of a local nightly as your bootstrap compiler. The setup is described in `src/bootstrap/README.md`.
    
    This does NOT implement the "copy stage0 libs to stage1" optimization described in #37929, just because that seems orthogonal to me.
    
    In local testing, I do not yet see any incremental re-use when building rustc. I'm not sure why that is, more investigation needed.
    
    (For these reasons, this is not marked as fixing the relevant issue.)
    
    r? @alexcrichton -- I included one random cleanup (`Step::noop()`) that turned out to not be especially relevant. Feel free to tell me you liked it better the old way.
rustc: ./tuple-stress
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.410; rss: 136MB	parsing
Lines of code:             65571
Pre-expansion node count:  393241
time: 0.000; rss: 136MB	recursion limit
time: 0.000; rss: 136MB	crate injection
time: 0.000; rss: 136MB	plugin loading
time: 0.000; rss: 136MB	plugin registration
time: 0.092; rss: 158MB	expansion
time: 0.000; rss: 158MB	maybe building test harness
time: 0.005; rss: 158MB	maybe creating a macro crate
Post-expansion node count: 393303
time: 0.000; rss: 158MB	checking for inline asm in case the target doesn't support it
time: 0.005; rss: 158MB	complete gated feature checking
time: 0.033; rss: 158MB	early lint checks
time: 0.005; rss: 158MB	AST validation
time: 0.012; rss: 158MB	name resolution
time: 0.032; rss: 201MB	lowering ast -> hir
time: 0.008; rss: 218MB	indexing hir
time: 0.005; rss: 218MB	attribute checking
time: 0.002; rss: 141MB	language item collection
time: 0.002; rss: 141MB	lifetime resolution
time: 0.000; rss: 141MB	looking for entry point
time: 0.000; rss: 141MB	looking for plugin registrar
time: 0.052; rss: 163MB	region resolution
time: 0.002; rss: 163MB	loop checking
time: 0.004; rss: 163MB	static item recursion checking
time: 0.208; rss: 163MB	compute_incremental_hashes_map
time: 0.000; rss: 163MB	load_dep_graph
time: 0.002; rss: 163MB	stability index
time: 0.002; rss: 163MB	stability checking
time: 0.002; rss: 163MB	type collecting
time: 0.000; rss: 163MB	variance inference
time: 0.000; rss: 163MB	impl wf inference
time: 0.003; rss: 165MB	coherence checking
time: 0.002; rss: 165MB	wf checking
time: 0.591; rss: 208MB	item-types checking
time: 0.003; rss: 209MB	item-bodies checking
time: 0.000; rss: 209MB	drop-impl checking
time: 0.183; rss: 220MB	const checking
time: 0.004; rss: 220MB	privacy checking
time: 0.002; rss: 220MB	intrinsic checking
time: 0.002; rss: 220MB	effect checking
time: 0.000; rss: 220MB	match checking
time: 0.003; rss: 220MB	liveness checking
time: 0.002; rss: 220MB	rvalue checking
time: 0.301; rss: 278MB	MIR dump
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.012; rss: 278MB	QualifyAndPromoteConstants
  time: 0.037; rss: 278MB	TypeckMir
  time: 0.000; rss: 278MB	SimplifyBranches
  time: 0.000; rss: 278MB	SimplifyCfg
time: 0.049; rss: 278MB	MIR cleanup and validation
time: 0.004; rss: 278MB	borrow checking
time: 0.000; rss: 278MB	reachability checking
time: 0.004; rss: 278MB	death checking
time: 0.000; rss: 278MB	unused lib feature checking
time: 0.195; rss: 278MB	lint checking
time: 0.001; rss: 278MB	resolving dependency formats
  time: 0.000; rss: 278MB	NoLandingPads
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.007; rss: 278MB	EraseRegions
  time: 0.000; rss: 278MB	AddCallGuards
  time: 0.000; rss: 278MB	ElaborateDrops
  time: 0.000; rss: 278MB	NoLandingPads
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.007; rss: 278MB	InstCombine
  time: 0.000; rss: 278MB	Deaggregator
  time: 0.000; rss: 278MB	CopyPropagation
  time: 0.009; rss: 278MB	SimplifyLocals
  time: 0.000; rss: 278MB	AddCallGuards
  time: 0.000; rss: 278MB	PreTrans
time: 0.023; rss: 278MB	MIR optimisations
  time: 0.000; rss: 278MB	write metadata
  time: 0.006; rss: 279MB	translation item collection
  time: 0.000; rss: 279MB	codegen unit partitioning
  time: 0.000; rss: 305MB	internalize symbols
time: 0.304; rss: 305MB	translation
time: 0.000; rss: 305MB	assert dep graph
time: 0.000; rss: 305MB	serialize dep graph
  time: 0.024; rss: 128MB	llvm function passes [0]
  time: 0.000; rss: 128MB	llvm module passes [0]
  time: 0.326; rss: 124MB	codegen passes [0]
  time: 0.000; rss: 124MB	codegen passes [0]
time: 0.351; rss: 124MB	LLVM passes
time: 0.000; rss: 124MB	serialize work products
  time: 0.079; rss: 92MB	running linker
time: 0.080; rss: 92MB	linking
done

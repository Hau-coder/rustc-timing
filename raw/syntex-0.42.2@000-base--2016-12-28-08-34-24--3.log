commit 469fd779ee24f8348acd438f471c8c3a5cef309a
Merge: 17f1fba a6fe6c9
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 09:42:46 2016 +0000

    Auto merge of #38616 - pnkfelix:refactor-mir-dataflow-remove-ctxt, r=arielb1
    
    Refactor mir::dataflow: remove Ctxt associated type from BitDenotation trait
    
    Refactor mir::dataflow: remove Ctxt associated type from BitDenotation trait
    
    I no longer remember why I needed this (or thought I did). The way
    that the `BitDenotation` is passed around in all existing use cases
    (and planned future ones), the thing that were in the `Ctxt` can just
    be part of `Self` instead.
    
    (I think ariel had been pushing me to do this back when I first put in
    this infrastructure; it took me a while to see how much of pain the
    `Ctxt` was causing.)
rustc: ./syntex-0.42.2@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.242; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.075; rss: 161MB	name resolution
time: 0.058; rss: 195MB	lowering ast -> hir
time: 0.010; rss: 187MB	indexing hir
time: 0.006; rss: 187MB	attribute checking
time: 0.002; rss: 150MB	language item collection
time: 0.011; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.046; rss: 169MB	region resolution
time: 0.007; rss: 169MB	loop checking
time: 0.002; rss: 169MB	static item recursion checking
time: 0.388; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.008; rss: 171MB	stability index
time: 0.016; rss: 171MB	stability checking
time: 0.047; rss: 176MB	type collecting
time: 0.001; rss: 176MB	variance inference
time: 0.002; rss: 176MB	impl wf inference
time: 0.017; rss: 178MB	coherence checking
time: 0.084; rss: 180MB	wf checking
time: 0.185; rss: 184MB	item-types checking
time: 3.375; rss: 235MB	item-bodies checking
time: 0.000; rss: 235MB	drop-impl checking
time: 0.208; rss: 245MB	const checking
time: 0.054; rss: 245MB	privacy checking
time: 0.016; rss: 245MB	intrinsic checking
time: 0.013; rss: 245MB	effect checking
time: 0.046; rss: 245MB	match checking
time: 0.045; rss: 250MB	liveness checking
time: 0.169; rss: 250MB	rvalue checking
time: 0.361; rss: 442MB	MIR dump
  time: 0.056; rss: 443MB	SimplifyCfg
  time: 0.072; rss: 444MB	QualifyAndPromoteConstants
  time: 0.107; rss: 444MB	TypeckMir
  time: 0.004; rss: 444MB	SimplifyBranches
  time: 0.030; rss: 444MB	SimplifyCfg
time: 0.270; rss: 444MB	MIR cleanup and validation
time: 0.465; rss: 444MB	borrow checking
time: 0.024; rss: 444MB	reachability checking
time: 0.037; rss: 444MB	death checking
time: 0.000; rss: 444MB	unused lib feature checking
time: 0.179; rss: 444MB	lint checking
time: 0.000; rss: 444MB	resolving dependency formats
  time: 0.003; rss: 444MB	NoLandingPads
  time: 0.026; rss: 444MB	SimplifyCfg
  time: 0.063; rss: 453MB	EraseRegions
  time: 0.010; rss: 453MB	AddCallGuards
  time: 0.270; rss: 475MB	ElaborateDrops
  time: 0.003; rss: 475MB	NoLandingPads
  time: 0.052; rss: 475MB	SimplifyCfg
  time: 0.028; rss: 475MB	InstCombine
  time: 0.012; rss: 475MB	Deaggregator
  time: 0.002; rss: 475MB	CopyPropagation
  time: 0.033; rss: 475MB	SimplifyLocals
  time: 0.009; rss: 475MB	AddCallGuards
  time: 0.002; rss: 475MB	PreTrans
time: 0.515; rss: 475MB	MIR optimisations
  time: 0.064; rss: 483MB	write metadata
  time: 0.384; rss: 495MB	translation item collection
  time: 0.059; rss: 500MB	codegen unit partitioning
  time: 0.047; rss: 757MB	internalize symbols
time: 4.476; rss: 757MB	translation
time: 0.000; rss: 757MB	assert dep graph
time: 0.000; rss: 757MB	serialize dep graph
  time: 0.528; rss: 428MB	llvm function passes [0]
  time: 0.296; rss: 434MB	llvm module passes [0]
  time: 10.467; rss: 435MB	codegen passes [0]
  time: 0.000; rss: 435MB	codegen passes [0]
time: 12.047; rss: 435MB	LLVM passes
time: 0.000; rss: 435MB	serialize work products
time: 0.337; rss: 118MB	linking
done

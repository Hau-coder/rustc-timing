commit d86cf13316a885dbc78fc33becbc718c6ff3468c
Merge: 8d65c8d ecc6010
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 24 13:28:37 2016 +0000

    Auto merge of #38062 - alexcrichton:fix-line-writer, r=brson
    
    std: Fix partial writes in LineWriter
    
    Previously the `LineWriter` could successfully write some bytes but then fail to
    report that it has done so. Additionally, an erroneous flush after a successful
    write was permanently ignored. This commit fixes these two issues by (a)
    maintaining a `need_flush` flag to indicate whether a flush should be the first
    operation in `LineWriter::write` and (b) avoiding returning an error once some
    bytes have been successfully written.
    
    Closes #37807
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 103MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.296; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.005; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.032; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.008; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.046; rss: 176MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.088; rss: 183MB	translation item collection
  time: 0.015; rss: 185MB	codegen unit partitioning
  time: 0.012; rss: 312MB	internalize symbols
time: 1.677; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.124; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 253MB	llvm function passes [5]
time: 0.000; rss: 253MB	llvm module passes [5]
time: 0.003; rss: 257MB	llvm function passes [0]
time: 0.000; rss: 257MB	llvm module passes [0]
time: 0.004; rss: 263MB	llvm function passes [1]
time: 0.001; rss: 263MB	llvm function passes [6]
time: 0.000; rss: 263MB	llvm module passes [6]
time: 0.001; rss: 263MB	llvm module passes [1]
time: 0.006; rss: 268MB	codegen passes [5]
time: 0.002; rss: 270MB	llvm function passes [14]
time: 0.001; rss: 270MB	llvm module passes [14]
time: 0.008; rss: 272MB	llvm function passes [5]
time: 0.020; rss: 274MB	llvm function passes [3]
time: 0.015; rss: 274MB	codegen passes [6]
time: 0.003; rss: 274MB	llvm module passes [5]
time: 0.020; rss: 276MB	llvm function passes [2]
time: 0.022; rss: 276MB	codegen passes [0]
time: 0.004; rss: 278MB	llvm function passes [0]
time: 0.002; rss: 281MB	llvm module passes [0]
time: 0.002; rss: 281MB	llvm function passes [7]
time: 0.001; rss: 281MB	llvm module passes [7]
time: 0.030; rss: 281MB	llvm function passes [19]
time: 0.003; rss: 281MB	llvm module passes [19]
time: 0.042; rss: 285MB	llvm function passes [4]
time: 0.032; rss: 293MB	llvm function passes [17]
time: 0.057; rss: 297MB	llvm function passes [8]
time: 0.041; rss: 297MB	llvm function passes [16]
time: 0.002; rss: 297MB	llvm module passes [16]
time: 0.060; rss: 301MB	codegen passes [1]
time: 0.060; rss: 301MB	llvm function passes [15]
time: 0.000; rss: 301MB	codegen passes [10]
time: 0.055; rss: 301MB	llvm function passes [18]
time: 0.047; rss: 302MB	codegen passes [14]
time: 0.024; rss: 306MB	llvm function passes [11]
time: 0.001; rss: 306MB	llvm module passes [11]
time: 0.021; rss: 306MB	llvm module passes [15]
time: 0.047; rss: 308MB	llvm function passes [12]
time: 0.086; rss: 308MB	llvm function passes [6]
time: 0.052; rss: 308MB	llvm function passes [20]
time: 0.065; rss: 318MB	llvm module passes [17]
time: 0.083; rss: 318MB	codegen passes [7]
time: 0.019; rss: 318MB	llvm module passes [12]
time: 0.029; rss: 329MB	llvm module passes [6]
time: 0.032; rss: 329MB	llvm module passes [20]
time: 0.086; rss: 329MB	codegen passes [0]
time: 0.132; rss: 329MB	llvm module passes [3]
time: 0.085; rss: 350MB	codegen passes [11]
time: 0.138; rss: 346MB	codegen passes [16]
time: 0.194; rss: 345MB	llvm module passes [2]
time: 0.286; rss: 365MB	codegen passes [5]
time: 0.239; rss: 360MB	codegen passes [17]
time: 0.267; rss: 361MB	codegen passes [19]
time: 0.416; rss: 369MB	llvm module passes [18]
time: 0.440; rss: 393MB	codegen passes [15]
time: 0.538; rss: 394MB	llvm module passes [8]
time: 0.413; rss: 389MB	codegen passes [3]
time: 0.455; rss: 388MB	codegen passes [6]
time: 0.484; rss: 383MB	codegen passes [20]
time: 0.418; rss: 373MB	codegen passes [2]
time: 0.645; rss: 362MB	llvm module passes [4]
time: 0.616; rss: 364MB	codegen passes [12]
time: 0.560; rss: 381MB	codegen passes [8]
time: 1.175; rss: 382MB	codegen passes [18]
time: 1.039; rss: 360MB	codegen passes [4]
time: 1.828; rss: 358MB	LLVM passes
time: 0.000; rss: 358MB	serialize work products
time: 0.207; rss: 173MB	linking
done

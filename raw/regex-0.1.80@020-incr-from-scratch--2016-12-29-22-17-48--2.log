commit 75f5981d4500e52de767d61ec50a34b97be2a301
Merge: e7c788a e5c7782
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 30 01:20:18 2016 +0000

    Auto merge of #38695 - alexcrichton:debug-appveyor, r=brson
    
    appveyor: Attempt to debug flaky test runs
    
    This commit is an attempt to debug #38620 since we're unable to reproduce it
    locally. It follows the [advice] of those with AppVeyor to use the `handle.exe`
    tool to try to debug what processes have a handle to the file open.
    
    This won't be guaranteed to actually help us, but hopefully it'll diagnose
    something at some point?
    
    [advice]: http://help.appveyor.com/discussions/questions/2898
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.296; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.039; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.032; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.008; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.046; rss: 176MB	MIR optimisations
  time: 0.010; rss: 178MB	write metadata
  time: 0.087; rss: 183MB	translation item collection
  time: 0.016; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 312MB	internalize symbols
time: 1.682; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.111; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 259MB	llvm function passes [2]
time: 0.000; rss: 259MB	llvm module passes [2]
time: 0.001; rss: 259MB	llvm function passes [6]
time: 0.003; rss: 259MB	llvm function passes [0]
time: 0.000; rss: 259MB	llvm module passes [0]
time: 0.001; rss: 261MB	llvm module passes [6]
time: 0.004; rss: 261MB	llvm function passes [1]
time: 0.004; rss: 266MB	llvm module passes [1]
time: 0.010; rss: 268MB	codegen passes [2]
time: 0.002; rss: 272MB	llvm function passes [10]
time: 0.001; rss: 272MB	llvm module passes [10]
time: 0.018; rss: 274MB	llvm function passes [5]
time: 0.019; rss: 274MB	llvm function passes [4]
time: 0.008; rss: 274MB	llvm function passes [2]
time: 0.007; rss: 277MB	llvm module passes [2]
time: 0.027; rss: 279MB	llvm function passes [8]
time: 0.034; rss: 281MB	llvm function passes [7]
time: 0.004; rss: 281MB	llvm module passes [8]
time: 0.034; rss: 281MB	codegen passes [6]
time: 0.037; rss: 287MB	codegen passes [0]
time: 0.040; rss: 287MB	llvm function passes [3]
time: 0.004; rss: 288MB	llvm function passes [6]
time: 0.002; rss: 288MB	llvm function passes [0]
time: 0.001; rss: 288MB	llvm module passes [0]
time: 0.002; rss: 288MB	llvm module passes [6]
time: 0.040; rss: 294MB	llvm function passes [9]
time: 0.037; rss: 294MB	llvm function passes [13]
time: 0.002; rss: 294MB	llvm module passes [13]
time: 0.046; rss: 294MB	codegen passes [10]
time: 0.000; rss: 294MB	codegen passes [10]
time: 0.039; rss: 296MB	llvm function passes [14]
time: 0.039; rss: 298MB	llvm function passes [15]
time: 0.033; rss: 298MB	llvm function passes [11]
time: 0.021; rss: 298MB	llvm module passes [9]
time: 0.012; rss: 298MB	llvm module passes [14]
time: 0.047; rss: 304MB	llvm function passes [16]
time: 0.026; rss: 312MB	llvm function passes [17]
time: 0.001; rss: 312MB	llvm module passes [17]
time: 0.053; rss: 321MB	llvm function passes [18]
time: 0.109; rss: 321MB	codegen passes [1]
time: 0.056; rss: 327MB	llvm module passes [11]
time: 0.019; rss: 325MB	llvm module passes [18]
time: 0.070; rss: 329MB	codegen passes [0]
time: 0.072; rss: 329MB	llvm module passes [15]
time: 0.059; rss: 336MB	codegen passes [6]
time: 0.107; rss: 343MB	codegen passes [13]
time: 0.074; rss: 350MB	codegen passes [17]
time: 0.163; rss: 355MB	codegen passes [2]
time: 0.214; rss: 355MB	llvm module passes [4]
time: 0.216; rss: 357MB	llvm module passes [5]
time: 0.166; rss: 353MB	codegen passes [8]
time: 0.145; rss: 354MB	codegen passes [15]
time: 0.337; rss: 374MB	codegen passes [9]
time: 0.415; rss: 373MB	llvm module passes [16]
time: 0.480; rss: 371MB	llvm module passes [7]
time: 0.548; rss: 387MB	llvm module passes [3]
time: 0.430; rss: 379MB	codegen passes [14]
time: 0.410; rss: 385MB	codegen passes [4]
time: 0.440; rss: 378MB	codegen passes [5]
time: 0.492; rss: 368MB	codegen passes [11]
time: 0.576; rss: 365MB	codegen passes [18]
time: 0.675; rss: 398MB	codegen passes [3]
time: 0.903; rss: 388MB	codegen passes [7]
time: 1.061; rss: 355MB	codegen passes [16]
time: 1.682; rss: 353MB	LLVM passes
time: 0.000; rss: 353MB	serialize work products
time: 0.207; rss: 171MB	linking
done

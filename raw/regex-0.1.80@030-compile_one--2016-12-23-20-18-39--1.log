commit 8d65c8d64edeadcfcc210fd70f44249d02daec41
Merge: 4d07320 14e4b00
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 24 00:22:00 2016 +0000

    Auto merge of #38268 - withoutboats:parse_where_higher_rank_hack, r=eddyb
    
    Prevent where < ident > from parsing.
    
    In order to be forward compatible with `where<'a>` syntax for higher
    rank parameters, prevent potential conflicts with UFCS from parsing
    correctly for the near term.
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 96MB	type collecting
time: 0.001; rss: 96MB	variance inference
time: 0.001; rss: 96MB	impl wf inference
time: 0.015; rss: 102MB	coherence checking
time: 0.022; rss: 103MB	wf checking
time: 0.123; rss: 111MB	item-types checking
time: 0.303; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.045; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.033; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.005; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.030; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.008; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.045; rss: 175MB	MIR optimisations
  time: 0.008; rss: 177MB	write metadata
  time: 0.086; rss: 182MB	translation item collection
  time: 0.015; rss: 187MB	codegen unit partitioning
  time: 0.012; rss: 311MB	internalize symbols
time: 1.700; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.108; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 253MB	llvm function passes [3]
time: 0.000; rss: 255MB	llvm module passes [3]
time: 0.002; rss: 257MB	llvm function passes [0]
time: 0.001; rss: 257MB	llvm function passes [6]
time: 0.000; rss: 257MB	llvm module passes [0]
time: 0.001; rss: 257MB	llvm module passes [6]
time: 0.003; rss: 257MB	llvm function passes [1]
time: 0.001; rss: 257MB	llvm module passes [1]
time: 0.001; rss: 266MB	llvm function passes [17]
time: 0.008; rss: 268MB	llvm function passes [16]
time: 0.003; rss: 268MB	llvm module passes [16]
time: 0.017; rss: 268MB	llvm function passes [4]
time: 0.019; rss: 268MB	llvm function passes [5]
time: 0.017; rss: 268MB	llvm function passes [14]
time: 0.003; rss: 268MB	llvm module passes [14]
time: 0.017; rss: 268MB	llvm function passes [18]
time: 0.033; rss: 268MB	llvm function passes [15]
time: 0.025; rss: 268MB	llvm function passes [20]
time: 0.002; rss: 268MB	llvm module passes [20]
time: 0.038; rss: 268MB	llvm function passes [2]
time: 0.029; rss: 268MB	llvm module passes [17]
time: 0.043; rss: 274MB	codegen passes [3]
time: 0.002; rss: 280MB	llvm function passes [9]
time: 0.044; rss: 283MB	codegen passes [6]
time: 0.002; rss: 283MB	llvm function passes [6]
time: 0.003; rss: 283MB	llvm module passes [9]
time: 0.000; rss: 283MB	llvm module passes [6]
time: 0.047; rss: 283MB	codegen passes [0]
time: 0.009; rss: 283MB	llvm function passes [3]
time: 0.022; rss: 283MB	llvm module passes [18]
time: 0.000; rss: 291MB	codegen passes [8]
time: 0.009; rss: 294MB	llvm module passes [3]
time: 0.030; rss: 298MB	llvm function passes [0]
time: 0.014; rss: 302MB	llvm function passes [7]
time: 0.001; rss: 302MB	llvm module passes [7]
time: 0.059; rss: 303MB	codegen passes [17]
time: 0.051; rss: 307MB	codegen passes [6]
time: 0.100; rss: 313MB	codegen passes [1]
time: 0.031; rss: 313MB	llvm module passes [0]
time: 0.069; rss: 313MB	llvm function passes [19]
time: 0.025; rss: 316MB	llvm module passes [19]
time: 0.093; rss: 316MB	llvm function passes [10]
time: 0.097; rss: 321MB	llvm function passes [11]
time: 0.115; rss: 321MB	codegen passes [20]
time: 0.019; rss: 325MB	llvm module passes [11]
time: 0.108; rss: 353MB	codegen passes [7]
time: 0.165; rss: 353MB	codegen passes [14]
time: 0.159; rss: 355MB	codegen passes [9]
time: 0.143; rss: 347MB	codegen passes [16]
time: 0.213; rss: 345MB	llvm module passes [5]
time: 0.230; rss: 345MB	llvm module passes [4]
time: 0.170; rss: 346MB	codegen passes [3]
time: 0.368; rss: 373MB	codegen passes [18]
time: 0.487; rss: 372MB	llvm module passes [15]
time: 0.416; rss: 379MB	llvm module passes [10]
time: 0.559; rss: 389MB	llvm module passes [2]
time: 0.430; rss: 402MB	codegen passes [19]
time: 0.406; rss: 399MB	codegen passes [5]
time: 0.463; rss: 387MB	codegen passes [0]
time: 0.413; rss: 366MB	codegen passes [4]
time: 0.656; rss: 368MB	codegen passes [11]
time: 0.693; rss: 404MB	codegen passes [15]
time: 0.771; rss: 381MB	codegen passes [2]
time: 0.837; rss: 356MB	codegen passes [10]
time: 1.524; rss: 354MB	LLVM passes
time: 0.000; rss: 353MB	serialize work products
time: 0.206; rss: 170MB	linking
done

commit 17f1fba353d2545ee54589350a83681dc3156e70
Merge: 0807104 babb7da
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 07:05:07 2016 +0000

    Auto merge of #38589 - aidanhs:aphs-stage0-rustdoc-test, r=alexcrichton
    
    Teach `rustdoc --test` about `--sysroot`, pass it when testing rust
    
    This permits rustdoc tests to work in stage0.
    
    Logical continuation of #36586.
    
    Snippet from https://github.com/rust-lang/rust/issues/38575#issuecomment-269090724:
    
    > it should actually be possible to run all the libstd tests immediately after creating std of stage0-out - there's no reason to build librustc at all if you've just made a change to (for example) libcollections, `./x.py test src/libcollections --stage 0 -v --incremental` should just work
    
    This PR makes it so (or appears to in my testing).
    
    r? @alexcrichton
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 102MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.123; rss: 112MB	item-types checking
time: 0.299; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.017; rss: 150MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.033; rss: 173MB	MIR cleanup and validation
time: 0.047; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.009; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.046; rss: 175MB	MIR optimisations
  time: 0.009; rss: 177MB	write metadata
  time: 0.086; rss: 182MB	translation item collection
  time: 0.014; rss: 184MB	codegen unit partitioning
  time: 0.013; rss: 312MB	internalize symbols
time: 1.688; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.124; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 257MB	llvm function passes [0]
time: 0.000; rss: 257MB	llvm module passes [0]
time: 0.001; rss: 257MB	llvm function passes [6]
time: 0.002; rss: 257MB	llvm function passes [3]
time: 0.000; rss: 257MB	llvm module passes [6]
time: 0.000; rss: 257MB	llvm module passes [3]
time: 0.003; rss: 257MB	llvm function passes [2]
time: 0.001; rss: 257MB	llvm module passes [2]
time: 0.006; rss: 262MB	codegen passes [0]
time: 0.013; rss: 264MB	codegen passes [6]
time: 0.008; rss: 264MB	llvm function passes [0]
time: 0.002; rss: 264MB	llvm function passes [6]
time: 0.001; rss: 264MB	llvm module passes [6]
time: 0.003; rss: 268MB	llvm module passes [0]
time: 0.021; rss: 268MB	llvm function passes [4]
time: 0.008; rss: 268MB	llvm function passes [9]
time: 0.024; rss: 270MB	llvm function passes [5]
time: 0.011; rss: 270MB	llvm function passes [15]
time: 0.002; rss: 270MB	llvm module passes [15]
time: 0.029; rss: 270MB	codegen passes [3]
time: 0.003; rss: 270MB	llvm module passes [9]
time: 0.016; rss: 270MB	llvm function passes [16]
time: 0.035; rss: 275MB	llvm function passes [14]
time: 0.045; rss: 275MB	llvm function passes [1]
time: 0.011; rss: 275MB	llvm module passes [16]
time: 0.027; rss: 275MB	codegen passes [6]
time: 0.004; rss: 275MB	llvm function passes [6]
time: 0.002; rss: 275MB	llvm module passes [6]
time: 0.022; rss: 275MB	llvm function passes [3]
time: 0.052; rss: 287MB	codegen passes [2]
time: 0.012; rss: 293MB	llvm function passes [10]
time: 0.013; rss: 293MB	llvm module passes [3]
time: 0.005; rss: 293MB	llvm function passes [18]
time: 0.001; rss: 293MB	llvm module passes [18]
time: 0.008; rss: 293MB	llvm module passes [10]
time: 0.006; rss: 293MB	llvm function passes [20]
time: 0.001; rss: 293MB	llvm module passes [20]
time: 0.000; rss: 304MB	codegen passes [17]
time: 0.048; rss: 308MB	llvm function passes [19]
time: 0.061; rss: 310MB	llvm function passes [11]
time: 0.069; rss: 310MB	codegen passes [6]
time: 0.072; rss: 312MB	llvm function passes [2]
time: 0.018; rss: 312MB	llvm module passes [19]
time: 0.073; rss: 315MB	codegen passes [18]
time: 0.039; rss: 331MB	llvm module passes [2]
time: 0.113; rss: 337MB	codegen passes [20]
time: 0.178; rss: 346MB	codegen passes [15]
time: 0.159; rss: 347MB	codegen passes [9]
time: 0.196; rss: 351MB	codegen passes [0]
time: 0.239; rss: 342MB	llvm module passes [5]
time: 0.249; rss: 338MB	llvm module passes [4]
time: 0.188; rss: 347MB	codegen passes [10]
time: 0.399; rss: 359MB	llvm module passes [14]
time: 0.371; rss: 375MB	codegen passes [16]
time: 0.419; rss: 370MB	llvm module passes [11]
time: 0.438; rss: 384MB	codegen passes [3]
time: 0.611; rss: 381MB	llvm module passes [1]
time: 0.399; rss: 384MB	codegen passes [5]
time: 0.496; rss: 381MB	codegen passes [2]
time: 0.431; rss: 364MB	codegen passes [4]
time: 0.627; rss: 371MB	codegen passes [19]
time: 0.663; rss: 404MB	codegen passes [14]
time: 0.745; rss: 379MB	codegen passes [11]
time: 0.678; rss: 356MB	codegen passes [1]
time: 1.423; rss: 354MB	LLVM passes
time: 0.000; rss: 354MB	serialize work products
time: 0.207; rss: 173MB	linking
done

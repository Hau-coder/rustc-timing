commit 089682611f055ca6315e2229e5ed29be3d2b41c8
Merge: b97b605 3b208d2
Author: bors <bors@rust-lang.org>
Date:   Sat Jan 7 21:28:47 2017 +0000

    Auto merge of #38781 - SimonSapin:unishrink, r=alexcrichton
    
    Reduce the size of static data in std_unicode::tables
    
    `BoolTrie` works well for sets of code points spread out through most of Unicodeâ€™s range, but is uses a lot of space for sets with few, mostly low, code points.
    
    This switches a few of its instances to a similar but simpler trie data structure.
    
    CC @raphlinus, who wrote the original `BoolTrie`.
    
    ## Before
    
    `size_of::<BoolTrie>()` is 1552, which is added to `table.r3.len() * 8 + t.r5.len() + t.r6.len() * 8`:
    
    * `Cc_table`: 1632
    * `White_Space_table`: 1656
    * `Pattern_White_Space_table`: 1640
    * Total: 4928 bytes
    
    ## After
    
    `size_of::<SmallBoolTrie>()` is 32, which is added to `t.r1.len() + t.r2.len() * 8`:
    
    * `Cc_table`: 51
    * `White_Space_table`: 273
    * `Pattern_White_Space_table`: 193
    * Total: 517 bytes
    
    ## Difference
    
    Every Rust program with `std` statically linked should be about 4 KB smaller.
rustc 1.15.0-nightly (daf8c1dfc 2016-12-05)
-rwxr-xr-x 1 root root 9432 Dec  6 15:39 /usr/local/bin/rustc
rustc: ./regex-0.1.80@080-SparseSet
git apply 080-SparseSet.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..629328a 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -54,6 +54,7 @@ impl Compiler {
     ///
     /// Various options can be set before calling `compile` on an expression.
     pub fn new() -> Self {
+        {}
         Compiler {
             insts: vec![],
             compiled: Program::new(),
@@ -137,6 +138,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
diff --git a/regex-0.1.80/src/freqs.rs b/regex-0.1.80/src/freqs.rs
index 92bafc1..6eb5799 100644
--- a/regex-0.1.80/src/freqs.rs
+++ b/regex-0.1.80/src/freqs.rs
@@ -12,7 +12,7 @@
 // edit directly
 
 pub const BYTE_FREQUENCIES: [u8; 256] = [
-     55, // '\x00'
+     54+1, // '\x00'
      52, // '\x01'
      51, // '\x02'
      50, // '\x03'
diff --git a/regex-0.1.80/src/sparse.rs b/regex-0.1.80/src/sparse.rs
index 34c05e7..ef5188e 100644
--- a/regex-0.1.80/src/sparse.rs
+++ b/regex-0.1.80/src/sparse.rs
@@ -16,13 +16,13 @@ pub struct SparseSet {
     /// Dense contains the instruction pointers in the order in which they
     /// were inserted. Accessing elements >= self.size is illegal.
     dense: Vec<usize>,
+    /// The number of elements in the set.
+    size: usize,
     /// Sparse maps instruction pointers to their location in dense.
     ///
     /// An instruction pointer is in the set if and only if
     /// sparse[ip] < size && ip == dense[sparse[ip]].
     sparse: Vec<usize>,
-    /// The number of elements in the set.
-    size: usize,
 }
 
 impl SparseSet {
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
makefile:58: recipe for target 'all@080-SparseSet' failed
done

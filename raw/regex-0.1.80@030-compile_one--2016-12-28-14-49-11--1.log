commit 02b22ec7bd8fa542dd3b08a8497ad5cd3a20c417
Merge: 371f4d6 cf89453
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 17:27:13 2016 +0000

    Auto merge of #38639 - xen0n:nightly-dist-hotfix, r=brson
    
    rustbuild: Hotfix to unbreak nightly
    
    Fixes an oversight unnoticed in #38468 that eventually broke nightly packaging. I didn't realize this until some moments ago, when I finally found out the failure is actually deterministic. Many apologies for eating 3 nightlies during the holidays.
    
    r? @alexcrichton
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 94MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.021; rss: 94MB	load_dep_graph
time: 0.002; rss: 94MB	stability index
time: 0.002; rss: 94MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.124; rss: 112MB	item-types checking
time: 0.304; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.039; rss: 151MB	const checking
time: 0.007; rss: 151MB	privacy checking
time: 0.002; rss: 151MB	intrinsic checking
time: 0.001; rss: 151MB	effect checking
time: 0.006; rss: 151MB	match checking
time: 0.004; rss: 152MB	liveness checking
time: 0.016; rss: 152MB	rvalue checking
time: 0.044; rss: 173MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.012; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.031; rss: 173MB	MIR cleanup and validation
time: 0.045; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.008; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.044; rss: 176MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.087; rss: 183MB	translation item collection
  time: 0.015; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 312MB	internalize symbols
time: 1.695; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.109; rss: 321MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 256MB	llvm function passes [1]
time: 0.000; rss: 258MB	llvm module passes [1]
time: 0.001; rss: 258MB	llvm function passes [0]
time: 0.000; rss: 258MB	llvm module passes [0]
time: 0.001; rss: 260MB	llvm function passes [18]
time: 0.001; rss: 260MB	llvm module passes [18]
time: 0.003; rss: 260MB	llvm function passes [2]
time: 0.001; rss: 260MB	llvm module passes [2]
time: 0.006; rss: 263MB	codegen passes [1]
time: 0.008; rss: 265MB	llvm function passes [1]
time: 0.015; rss: 265MB	codegen passes [18]
time: 0.003; rss: 265MB	llvm module passes [1]
time: 0.021; rss: 265MB	llvm function passes [4]
time: 0.002; rss: 265MB	llvm function passes [18]
time: 0.001; rss: 265MB	llvm module passes [18]
time: 0.008; rss: 265MB	llvm function passes [10]
time: 0.021; rss: 265MB	codegen passes [0]
time: 0.003; rss: 265MB	llvm module passes [10]
time: 0.004; rss: 276MB	llvm function passes [8]
time: 0.034; rss: 278MB	llvm function passes [5]
time: 0.016; rss: 280MB	llvm function passes [0]
time: 0.041; rss: 280MB	llvm function passes [3]
time: 0.041; rss: 280MB	llvm function passes [17]
time: 0.012; rss: 280MB	llvm function passes [9]
time: 0.007; rss: 280MB	llvm module passes [0]
time: 0.027; rss: 280MB	codegen passes [18]
time: 0.009; rss: 280MB	llvm module passes [9]
time: 0.028; rss: 282MB	llvm function passes [15]
time: 0.030; rss: 282MB	llvm module passes [8]
time: 0.002; rss: 282MB	llvm module passes [15]
time: 0.035; rss: 290MB	llvm function passes [11]
time: 0.018; rss: 299MB	llvm function passes [19]
time: 0.073; rss: 299MB	codegen passes [2]
time: 0.001; rss: 299MB	llvm module passes [19]
time: 0.012; rss: 299MB	llvm module passes [11]
time: 0.046; rss: 299MB	llvm function passes [6]
time: 0.000; rss: 301MB	codegen passes [13]
time: 0.038; rss: 301MB	llvm function passes [18]
time: 0.026; rss: 305MB	llvm function passes [14]
time: 0.001; rss: 305MB	llvm module passes [14]
time: 0.066; rss: 307MB	llvm function passes [16]
time: 0.019; rss: 307MB	llvm module passes [18]
time: 0.051; rss: 315MB	llvm module passes [6]
time: 0.058; rss: 319MB	codegen passes [19]
time: 0.118; rss: 332MB	codegen passes [8]
time: 0.088; rss: 332MB	codegen passes [14]
time: 0.140; rss: 340MB	codegen passes [15]
time: 0.151; rss: 347MB	codegen passes [1]
time: 0.160; rss: 356MB	codegen passes [10]
time: 0.138; rss: 354MB	codegen passes [9]
time: 0.235; rss: 350MB	llvm module passes [4]
time: 0.218; rss: 349MB	llvm module passes [17]
time: 0.425; rss: 370MB	llvm module passes [5]
time: 0.366; rss: 370MB	llvm module passes [16]
time: 0.326; rss: 371MB	codegen passes [0]
time: 0.444; rss: 385MB	codegen passes [11]
time: 0.383; rss: 382MB	codegen passes [4]
time: 0.643; rss: 384MB	llvm module passes [3]
time: 0.468; rss: 378MB	codegen passes [6]
time: 0.441; rss: 374MB	codegen passes [17]
time: 0.678; rss: 371MB	codegen passes [18]
time: 0.732; rss: 404MB	codegen passes [5]
time: 0.799; rss: 382MB	codegen passes [16]
time: 0.683; rss: 360MB	codegen passes [3]
time: 1.455; rss: 358MB	LLVM passes
time: 0.000; rss: 358MB	serialize work products
time: 0.206; rss: 172MB	linking
done

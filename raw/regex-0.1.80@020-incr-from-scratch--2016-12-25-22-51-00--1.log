commit 5752eae5f5ce3517d36f6668619dd2c70e6d2d88
Merge: 44ad63e f262eea
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 26 00:47:50 2016 +0000

    Auto merge of #38598 - brson:em, r=alexcrichton
    
    Emscripten targets are Unix targets
    
    I suspect this will fix the errors compiling libc https://buildbot.rust-lang.org/builders/auto-linux-rustbuild-cross-opt/builds/689/steps/compile/logs/stdio that are occurring on every PR.
    
    Emscripten is basically a posix emulation layer for the web and I consider it a Unix.
    
    cc @alexcrichton
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.020; rss: 103MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.298; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.041; rss: 149MB	const checking
time: 0.008; rss: 149MB	privacy checking
time: 0.002; rss: 149MB	intrinsic checking
time: 0.001; rss: 149MB	effect checking
time: 0.006; rss: 149MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.017; rss: 150MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.033; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.005; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.030; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.008; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.018; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.004; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.046; rss: 175MB	MIR optimisations
  time: 0.010; rss: 177MB	write metadata
  time: 0.088; rss: 182MB	translation item collection
  time: 0.015; rss: 184MB	codegen unit partitioning
  time: 0.013; rss: 311MB	internalize symbols
time: 1.677; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.123; rss: 319MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 256MB	llvm function passes [2]
time: 0.000; rss: 259MB	llvm module passes [2]
time: 0.002; rss: 259MB	llvm function passes [0]
time: 0.000; rss: 259MB	llvm module passes [0]
time: 0.001; rss: 259MB	llvm function passes [13]
time: 0.001; rss: 259MB	llvm module passes [13]
time: 0.003; rss: 261MB	llvm function passes [1]
time: 0.001; rss: 263MB	llvm module passes [1]
time: 0.002; rss: 275MB	llvm function passes [19]
time: 0.008; rss: 275MB	llvm function passes [18]
time: 0.003; rss: 275MB	llvm module passes [18]
time: 0.017; rss: 275MB	llvm function passes [4]
time: 0.010; rss: 275MB	llvm function passes [17]
time: 0.018; rss: 275MB	llvm function passes [5]
time: 0.003; rss: 275MB	llvm module passes [17]
time: 0.017; rss: 275MB	llvm module passes [19]
time: 0.035; rss: 277MB	codegen passes [2]
time: 0.039; rss: 281MB	llvm function passes [3]
time: 0.039; rss: 284MB	codegen passes [13]
time: 0.021; rss: 284MB	llvm function passes [20]
time: 0.013; rss: 286MB	llvm function passes [15]
time: 0.002; rss: 286MB	llvm module passes [15]
time: 0.048; rss: 286MB	llvm function passes [14]
time: 0.021; rss: 286MB	llvm function passes [2]
time: 0.004; rss: 286MB	llvm function passes [16]
time: 0.035; rss: 288MB	codegen passes [19]
time: 0.001; rss: 288MB	llvm function passes [19]
time: 0.001; rss: 288MB	llvm module passes [19]
time: 0.064; rss: 291MB	codegen passes [0]
time: 0.012; rss: 291MB	llvm module passes [2]
time: 0.026; rss: 291MB	llvm module passes [20]
time: 0.022; rss: 295MB	llvm module passes [16]
time: 0.039; rss: 295MB	llvm function passes [13]
time: 0.032; rss: 295MB	llvm function passes [12]
time: 0.008; rss: 295MB	llvm module passes [12]
time: 0.086; rss: 303MB	codegen passes [1]
time: 0.000; rss: 305MB	codegen passes [9]
time: 0.007; rss: 305MB	llvm function passes [10]
time: 0.001; rss: 305MB	llvm module passes [10]
time: 0.035; rss: 305MB	llvm function passes [0]
time: 0.047; rss: 323MB	codegen passes [19]
time: 0.045; rss: 327MB	llvm module passes [0]
time: 0.082; rss: 332MB	llvm function passes [11]
time: 0.075; rss: 338MB	codegen passes [10]
time: 0.120; rss: 342MB	codegen passes [15]
time: 0.106; rss: 345MB	codegen passes [16]
time: 0.029; rss: 345MB	llvm module passes [11]
time: 0.217; rss: 356MB	llvm module passes [4]
time: 0.230; rss: 360MB	codegen passes [18]
time: 0.262; rss: 362MB	llvm module passes [5]
time: 0.211; rss: 359MB	codegen passes [17]
time: 0.159; rss: 357MB	codegen passes [12]
time: 0.394; rss: 371MB	llvm module passes [14]
time: 0.358; rss: 377MB	codegen passes [20]
time: 0.461; rss: 380MB	llvm module passes [13]
time: 0.603; rss: 402MB	llvm module passes [3]
time: 0.481; rss: 395MB	codegen passes [2]
time: 0.455; rss: 389MB	codegen passes [0]
time: 0.412; rss: 381MB	codegen passes [4]
time: 0.393; rss: 375MB	codegen passes [5]
time: 0.571; rss: 369MB	codegen passes [11]
time: 0.661; rss: 403MB	codegen passes [3]
time: 0.914; rss: 383MB	codegen passes [14]
time: 1.026; rss: 360MB	codegen passes [13]
time: 1.694; rss: 357MB	LLVM passes
time: 0.000; rss: 356MB	serialize work products
time: 0.208; rss: 175MB	linking
done

commit 025fb7de09dfcf5fbc19c5d1b6bed168ac987e6c
Merge: 23a9469 e1280d8
Author: bors <bors@rust-lang.org>
Date:   Fri Jan 27 04:57:12 2017 +0000

    Auto merge of #39139 - estebank:issue-38147, r=nikomatsakis
    
    Point to immutable arg/fields when trying to use as &mut
    
    Present the following output when trying to access an immutable borrow's
    field as mutable:
    
    ```
    error[E0389]: cannot borrow data mutably in a `&` reference
      --> $DIR/issue-38147-1.rs:27:9
       |
    26 | fn f(&self) {
       |      -----  use `&mut self` here to make mutable
    27 |     f.s.push('x');
       |     ^^^ assignment into an immutable reference
    ```
    
    And the following when trying to access an immutable struct field as mutable:
    
    ```
    error: cannot borrow immutable borrowed content `*self.s` as mutable
      --> $DIR/issue-38147-3.rs:17:9
       |
    12 |     s: &'a String
       |     ------------- use `&'a mut String` here to make mutable
    ...|
    16 |     fn f(&self) {
       |          -----  use `&mut self` here to make mutable
    17 |         self.s.push('x');
       |         ^^^^^^ cannot borrow as mutable
    ```
    
    Fixes #38147.
rustc 1.15.0-nightly (daf8c1dfc 2016-12-05)
-rwxr-xr-x 1 root root 9432 Dec  6 15:39 /usr/local/bin/rustc
rustc: ./regex-0.1.80@070-BYTE_FREQUENCIES
git apply 070-BYTE_FREQUENCIES.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..629328a 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -54,6 +54,7 @@ impl Compiler {
     ///
     /// Various options can be set before calling `compile` on an expression.
     pub fn new() -> Self {
+        {}
         Compiler {
             insts: vec![],
             compiled: Program::new(),
@@ -137,6 +138,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
diff --git a/regex-0.1.80/src/freqs.rs b/regex-0.1.80/src/freqs.rs
index 92bafc1..6eb5799 100644
--- a/regex-0.1.80/src/freqs.rs
+++ b/regex-0.1.80/src/freqs.rs
@@ -12,7 +12,7 @@
 // edit directly
 
 pub const BYTE_FREQUENCIES: [u8; 256] = [
-     55, // '\x00'
+     54+1, // '\x00'
      52, // '\x01'
      51, // '\x02'
      50, // '\x03'
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
makefile:50: recipe for target 'all@070-BYTE_FREQUENCIES' failed
done

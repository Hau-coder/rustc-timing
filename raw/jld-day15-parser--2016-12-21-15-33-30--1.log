commit c217ab6c8dc1a305304b00a414be5f39ea6a2c81
Merge: 5fbf3bf 2afadaa
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 21 19:46:27 2016 +0000

    Auto merge of #38427 - brson:relnotes, r=alexcrichton
    
    1.14 release notes
    
    [Rendered](https://github.com/brson/rust/blob/relnotes/RELEASES.md).
    
    Is there anything I'm missing? Were there any library stabilizations?
    
    The most interesting thing this time seems to be rustup, then compile time opts, `..` matches, cargo exposing `cfg` values to build scripts. This release also has wasm support, but it's pretty rough. Might be worth hyping up all the same. ARM MUSL targets.
    
    There are a large number of compatibility notes. Might be worth talking about that.
    
    Relevant prlo links: goo.gl/PGz2Ds, goo.gl/KV23Qv, goo.gl/g7ku6D.
rustc: ./jld-day15-parser
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.001; rss: 41MB	parsing
Lines of code:             72
Pre-expansion node count:  648
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.015; rss: 70MB	expansion
time: 0.000; rss: 70MB	maybe building test harness
time: 0.000; rss: 70MB	maybe creating a macro crate
Post-expansion node count: 1149
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 70MB	complete gated feature checking
time: 0.000; rss: 70MB	early lint checks
time: 0.000; rss: 70MB	AST validation
time: 0.002; rss: 70MB	name resolution
time: 0.000; rss: 70MB	lowering ast -> hir
time: 0.000; rss: 70MB	indexing hir
time: 0.000; rss: 70MB	attribute checking
time: 0.000; rss: 70MB	language item collection
time: 0.000; rss: 70MB	lifetime resolution
time: 0.000; rss: 70MB	looking for entry point
time: 0.000; rss: 70MB	looking for plugin registrar
time: 0.000; rss: 70MB	region resolution
time: 0.000; rss: 70MB	loop checking
time: 0.000; rss: 70MB	static item recursion checking
time: 0.001; rss: 70MB	compute_incremental_hashes_map
time: 0.000; rss: 70MB	load_dep_graph
time: 0.000; rss: 70MB	stability index
time: 0.000; rss: 70MB	stability checking
time: 0.000; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.000; rss: 70MB	impl wf inference
time: 0.003; rss: 70MB	coherence checking
time: 0.002; rss: 72MB	wf checking
time: 0.000; rss: 72MB	item-types checking
time: 0.015; rss: 75MB	item-bodies checking
time: 0.000; rss: 75MB	drop-impl checking
time: 0.000; rss: 75MB	const checking
time: 0.000; rss: 75MB	privacy checking
time: 0.000; rss: 75MB	intrinsic checking
time: 0.000; rss: 75MB	effect checking
time: 0.000; rss: 75MB	match checking
time: 0.000; rss: 75MB	liveness checking
time: 0.000; rss: 75MB	rvalue checking
time: 0.001; rss: 75MB	MIR dump
  time: 0.000; rss: 75MB	SimplifyCfg
  time: 0.000; rss: 75MB	QualifyAndPromoteConstants
  time: 0.000; rss: 75MB	TypeckMir
  time: 0.000; rss: 75MB	SimplifyBranches
  time: 0.000; rss: 75MB	SimplifyCfg
time: 0.001; rss: 75MB	MIR cleanup and validation
time: 0.001; rss: 75MB	borrow checking
time: 0.000; rss: 75MB	reachability checking
time: 0.000; rss: 75MB	death checking
time: 0.000; rss: 75MB	unused lib feature checking
time: 0.001; rss: 75MB	lint checking
time: 0.001; rss: 75MB	resolving dependency formats
  time: 0.000; rss: 75MB	NoLandingPads
  time: 0.000; rss: 75MB	SimplifyCfg
  time: 0.000; rss: 75MB	EraseRegions
  time: 0.000; rss: 75MB	AddCallGuards
  time: 0.001; rss: 75MB	ElaborateDrops
  time: 0.000; rss: 75MB	NoLandingPads
  time: 0.000; rss: 75MB	SimplifyCfg
  time: 0.000; rss: 75MB	InstCombine
  time: 0.002; rss: 75MB	Deaggregator
  time: 0.000; rss: 75MB	CopyPropagation
  time: 0.000; rss: 75MB	SimplifyLocals
  time: 0.000; rss: 75MB	AddCallGuards
  time: 0.000; rss: 75MB	PreTrans
time: 0.003; rss: 75MB	MIR optimisations
  time: 0.000; rss: 75MB	write metadata
  time: 0.094; rss: 83MB	translation item collection
  time: 0.002; rss: 85MB	codegen unit partitioning
  time: 0.002; rss: 101MB	internalize symbols
time: 0.504; rss: 101MB	translation
time: 0.000; rss: 101MB	assert dep graph
time: 0.000; rss: 101MB	serialize dep graph
  time: 0.018; rss: 91MB	llvm function passes [0]
  time: 0.001; rss: 91MB	llvm module passes [0]
  time: 0.356; rss: 96MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.376; rss: 96MB	LLVM passes
time: 0.000; rss: 96MB	serialize work products
  time: 0.085; rss: 86MB	running linker
time: 0.086; rss: 86MB	linking
done

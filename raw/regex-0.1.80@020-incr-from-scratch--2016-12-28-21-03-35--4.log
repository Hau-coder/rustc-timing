commit 4ecc85beb339aa8089d936e450b0d800bdf580ae
Merge: 02b22ec ee0ea95
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 20:19:39 2016 +0000

    Auto merge of #38449 - eddyb:lazy-10, r=nikomatsakis
    
    [10/n] Split constants and functions' arguments into disjoint bodies.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/38053) | [next]()) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Finishes the signature-body split started in #37918, namely:
    * `trait` items are separated just like `impl` items were, for uniformity, closing #37712
    * `static`s, `const`s (including associated ones), `enum` discriminants and array lengths get bodies
      * even the count in "repeat expressions", i.e. `n` in `[x; n]`, which fixes #24414
    * arguments' patterns are moved to the bodies, with the types staying in `FnDecl`
      * `&self` now desugars to `self: &Self` instead of `self: &_` (similarly for other `self` forms)
      * `astconv`'s and metadata's (for rustdoc) informative uses are explicitly ignored for the purposes of the dep graph. this could be fixed in the future by hashing the exact information being extracted about the arguments as opposed to generating a dependency on *the whole body*
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.123; rss: 112MB	item-types checking
time: 0.295; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.038; rss: 149MB	const checking
time: 0.007; rss: 149MB	privacy checking
time: 0.002; rss: 149MB	intrinsic checking
time: 0.001; rss: 149MB	effect checking
time: 0.005; rss: 149MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.016; rss: 150MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	QualifyAndPromoteConstants
  time: 0.012; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.031; rss: 172MB	MIR cleanup and validation
time: 0.045; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.028; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.007; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.044; rss: 175MB	MIR optimisations
  time: 0.008; rss: 177MB	write metadata
  time: 0.085; rss: 182MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.012; rss: 311MB	internalize symbols
time: 1.675; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.122; rss: 319MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 259MB	llvm function passes [3]
time: 0.000; rss: 259MB	llvm module passes [3]
time: 0.001; rss: 259MB	llvm function passes [6]
time: 0.002; rss: 259MB	llvm function passes [0]
time: 0.000; rss: 259MB	llvm module passes [0]
time: 0.003; rss: 259MB	llvm function passes [1]
time: 0.001; rss: 259MB	llvm module passes [6]
time: 0.004; rss: 265MB	llvm function passes [7]
time: 0.013; rss: 265MB	llvm function passes [4]
time: 0.014; rss: 269MB	llvm module passes [1]
time: 0.002; rss: 271MB	llvm function passes [17]
time: 0.018; rss: 271MB	llvm function passes [5]
time: 0.013; rss: 271MB	llvm module passes [7]
time: 0.008; rss: 271MB	llvm function passes [16]
time: 0.003; rss: 275MB	llvm module passes [16]
time: 0.010; rss: 275MB	llvm module passes [17]
time: 0.008; rss: 277MB	llvm function passes [18]
time: 0.015; rss: 277MB	llvm function passes [14]
time: 0.002; rss: 277MB	llvm module passes [18]
time: 0.034; rss: 277MB	llvm function passes [2]
time: 0.033; rss: 277MB	llvm function passes [20]
time: 0.020; rss: 277MB	llvm function passes [8]
time: 0.004; rss: 277MB	llvm function passes [12]
time: 0.016; rss: 286MB	llvm module passes [14]
time: 0.020; rss: 286MB	llvm function passes [15]
time: 0.005; rss: 286MB	llvm module passes [12]
time: 0.009; rss: 286MB	llvm module passes [8]
time: 0.008; rss: 288MB	llvm module passes [15]
time: 0.008; rss: 296MB	llvm function passes [11]
time: 0.001; rss: 296MB	llvm module passes [11]
time: 0.003; rss: 304MB	llvm function passes [9]
time: 0.001; rss: 304MB	llvm module passes [9]
time: 0.033; rss: 308MB	llvm function passes [19]
time: 0.057; rss: 308MB	llvm function passes [13]
time: 0.041; rss: 310MB	llvm function passes [10]
time: 0.129; rss: 312MB	codegen passes [3]
time: 0.000; rss: 312MB	codegen passes [3]
time: 0.128; rss: 312MB	codegen passes [0]
time: 0.018; rss: 313MB	llvm module passes [10]
time: 0.104; rss: 313MB	codegen passes [17]
time: 0.150; rss: 322MB	codegen passes [6]
time: 0.135; rss: 322MB	codegen passes [1]
time: 0.056; rss: 325MB	llvm module passes [19]
time: 0.125; rss: 331MB	codegen passes [12]
time: 0.112; rss: 345MB	codegen passes [9]
time: 0.162; rss: 346MB	codegen passes [18]
time: 0.158; rss: 354MB	codegen passes [11]
time: 0.162; rss: 359MB	codegen passes [15]
time: 0.235; rss: 355MB	llvm module passes [5]
time: 0.242; rss: 358MB	llvm module passes [4]
time: 0.212; rss: 350MB	codegen passes [7]
time: 0.219; rss: 348MB	codegen passes [16]
time: 0.382; rss: 376MB	llvm module passes [13]
time: 0.362; rss: 373MB	codegen passes [14]
time: 0.484; rss: 366MB	llvm module passes [20]
time: 0.550; rss: 388MB	llvm module passes [2]
time: 0.448; rss: 390MB	codegen passes [8]
time: 0.469; rss: 386MB	codegen passes [19]
time: 0.430; rss: 379MB	codegen passes [5]
time: 0.464; rss: 370MB	codegen passes [4]
time: 0.609; rss: 368MB	codegen passes [10]
time: 0.650; rss: 414MB	codegen passes [20]
time: 0.690; rss: 381MB	codegen passes [2]
time: 0.820; rss: 359MB	codegen passes [13]
time: 1.436; rss: 357MB	LLVM passes
time: 0.000; rss: 357MB	serialize work products
time: 0.207; rss: 173MB	linking
done

commit 5752eae5f5ce3517d36f6668619dd2c70e6d2d88
Merge: 44ad63e f262eea
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 26 00:47:50 2016 +0000

    Auto merge of #38598 - brson:em, r=alexcrichton
    
    Emscripten targets are Unix targets
    
    I suspect this will fix the errors compiling libc https://buildbot.rust-lang.org/builders/auto-linux-rustbuild-cross-opt/builds/689/steps/compile/logs/stdio that are occurring on every PR.
    
    Emscripten is basically a posix emulation layer for the web and I consider it a Unix.
    
    cc @alexcrichton
rustc: ./regex-0.1.80@040-is_valid_cap_letter
git apply 040-is_valid_cap_letter.diff 
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..3b6ae94 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -84,6 +84,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10692
Pre-expansion node count:  55402
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86875
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 94MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::expand[0]::is_valid_cap_letter[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Krate changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.123; rss: 111MB	item-types checking
time: 0.300; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.039; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.042; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	QualifyAndPromoteConstants
  time: 0.012; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.031; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.029; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.007; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.043; rss: 175MB	MIR optimisations
  time: 0.008; rss: 177MB	write metadata
  time: 0.086; rss: 182MB	translation item collection
  time: 0.015; rss: 187MB	codegen unit partitioning
  time: 0.013; rss: 311MB	internalize symbols
time: 1.678; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.125; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 255MB	llvm function passes [2]
time: 0.000; rss: 255MB	llvm module passes [2]
time: 0.002; rss: 255MB	llvm function passes [1]
time: 0.003; rss: 255MB	llvm function passes [0]
time: 0.004; rss: 259MB	llvm module passes [1]
time: 0.001; rss: 261MB	llvm function passes [6]
time: 0.000; rss: 261MB	llvm module passes [6]
time: 0.005; rss: 261MB	llvm module passes [0]
time: 0.008; rss: 261MB	llvm function passes [7]
time: 0.003; rss: 261MB	llvm module passes [7]
time: 0.017; rss: 261MB	llvm function passes [3]
time: 0.020; rss: 268MB	llvm function passes [5]
time: 0.015; rss: 268MB	codegen passes [2]
time: 0.019; rss: 268MB	codegen passes [6]
time: 0.008; rss: 268MB	llvm function passes [2]
time: 0.002; rss: 268MB	llvm function passes [6]
time: 0.001; rss: 268MB	llvm module passes [6]
time: 0.027; rss: 268MB	llvm function passes [8]
time: 0.003; rss: 268MB	llvm module passes [2]
time: 0.043; rss: 274MB	llvm function passes [4]
time: 0.036; rss: 280MB	codegen passes [0]
time: 0.003; rss: 280MB	llvm function passes [0]
time: 0.001; rss: 280MB	llvm module passes [0]
time: 0.017; rss: 291MB	llvm function passes [10]
time: 0.009; rss: 291MB	llvm function passes [12]
time: 0.044; rss: 291MB	codegen passes [1]
time: 0.007; rss: 291MB	llvm module passes [10]
time: 0.009; rss: 291MB	llvm module passes [12]
time: 0.008; rss: 291MB	llvm function passes [1]
time: 0.006; rss: 299MB	llvm module passes [1]
time: 0.002; rss: 301MB	llvm function passes [13]
time: 0.001; rss: 301MB	llvm module passes [13]
time: 0.053; rss: 301MB	codegen passes [6]
time: 0.036; rss: 303MB	llvm function passes [9]
time: 0.012; rss: 307MB	llvm module passes [9]
time: 0.068; rss: 309MB	codegen passes [0]
time: 0.003; rss: 309MB	llvm function passes [0]
time: 0.001; rss: 309MB	llvm module passes [0]
time: 0.045; rss: 317MB	codegen passes [13]
time: 0.000; rss: 317MB	codegen passes [13]
time: 0.052; rss: 317MB	llvm function passes [6]
time: 0.058; rss: 317MB	llvm function passes [14]
time: 0.073; rss: 320MB	llvm function passes [11]
time: 0.062; rss: 320MB	codegen passes [1]
time: 0.018; rss: 322MB	llvm module passes [14]
time: 0.057; rss: 335MB	llvm module passes [6]
time: 0.150; rss: 342MB	codegen passes [2]
time: 0.198; rss: 337MB	llvm module passes [3]
time: 0.181; rss: 333MB	codegen passes [7]
time: 0.104; rss: 348MB	codegen passes [0]
time: 0.175; rss: 336MB	codegen passes [12]
time: 0.244; rss: 327MB	llvm module passes [5]
time: 0.453; rss: 360MB	llvm module passes [8]
time: 0.348; rss: 360MB	llvm module passes [11]
time: 0.522; rss: 376MB	llvm module passes [4]
time: 0.429; rss: 374MB	codegen passes [10]
time: 0.479; rss: 383MB	codegen passes [9]
time: 0.405; rss: 374MB	codegen passes [5]
time: 0.472; rss: 366MB	codegen passes [6]
time: 0.491; rss: 359MB	codegen passes [3]
time: 0.700; rss: 362MB	codegen passes [14]
time: 0.724; rss: 405MB	codegen passes [8]
time: 0.728; rss: 366MB	codegen passes [4]
time: 0.800; rss: 343MB	codegen passes [11]
time: 1.433; rss: 341MB	LLVM passes
time: 0.000; rss: 341MB	serialize work products
time: 0.208; rss: 161MB	linking
done

commit 7f2d2afa9196ba6314a29e58d5324dbd9923c75e
Merge: 75f5981 e484197
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 30 07:34:19 2016 +0000

    Auto merge of #38697 - alexcrichton:rollup, r=alexcrichton
    
    Rollup of 25 pull requests
    
    - Successful merges: #37149, #38491, #38517, #38559, #38587, #38609, #38611, #38622, #38628, #38630, #38631, #38632, #38635, #38647, #38649, #38655, #38659, #38660, #38662, #38665, #38671, #38674, #38676, #38693, #38695
    - Failed merges: #38657, #38680
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.007; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.035; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 96MB	type collecting
time: 0.001; rss: 96MB	variance inference
time: 0.001; rss: 96MB	impl wf inference
time: 0.015; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.123; rss: 111MB	item-types checking
time: 0.299; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.032; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.005; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.030; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.008; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.045; rss: 175MB	MIR optimisations
  time: 0.009; rss: 177MB	write metadata
  time: 0.088; rss: 182MB	translation item collection
  time: 0.014; rss: 184MB	codegen unit partitioning
  time: 0.014; rss: 309MB	internalize symbols
time: 1.878; rss: 309MB	translation
time: 0.000; rss: 309MB	assert dep graph
time: 0.225; rss: 317MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 260MB	llvm function passes [7]
time: 0.003; rss: 260MB	llvm function passes [1]
time: 0.003; rss: 260MB	llvm function passes [0]
time: 0.001; rss: 264MB	llvm module passes [1]
time: 0.004; rss: 264MB	llvm function passes [2]
time: 0.000; rss: 264MB	llvm module passes [2]
time: 0.002; rss: 268MB	llvm module passes [7]
time: 0.007; rss: 268MB	llvm function passes [9]
time: 0.008; rss: 268MB	llvm function passes [8]
time: 0.010; rss: 268MB	llvm module passes [0]
time: 0.003; rss: 268MB	llvm module passes [9]
time: 0.003; rss: 268MB	llvm module passes [8]
time: 0.019; rss: 268MB	llvm function passes [5]
time: 0.021; rss: 268MB	llvm function passes [4]
time: 0.019; rss: 271MB	codegen passes [2]
time: 0.002; rss: 271MB	llvm function passes [2]
time: 0.001; rss: 271MB	llvm module passes [2]
time: 0.034; rss: 275MB	llvm function passes [6]
time: 0.031; rss: 275MB	codegen passes [7]
time: 0.005; rss: 275MB	llvm function passes [7]
time: 0.041; rss: 275MB	llvm function passes [3]
time: 0.001; rss: 275MB	llvm module passes [7]
time: 0.025; rss: 275MB	llvm function passes [12]
time: 0.006; rss: 275MB	llvm module passes [12]
time: 0.064; rss: 277MB	codegen passes [1]
time: 0.042; rss: 277MB	codegen passes [2]
time: 0.004; rss: 277MB	llvm function passes [1]
time: 0.002; rss: 277MB	llvm module passes [1]
time: 0.012; rss: 278MB	llvm function passes [11]
time: 0.082; rss: 280MB	codegen passes [0]
time: 0.000; rss: 281MB	codegen passes [15]
time: 0.013; rss: 284MB	llvm function passes [13]
time: 0.001; rss: 284MB	llvm module passes [13]
time: 0.003; rss: 284MB	llvm function passes [16]
time: 0.001; rss: 284MB	llvm module passes [16]
time: 0.060; rss: 285MB	llvm function passes [2]
time: 0.064; rss: 285MB	llvm function passes [10]
time: 0.059; rss: 288MB	llvm function passes [0]
time: 0.027; rss: 289MB	llvm module passes [10]
time: 0.015; rss: 291MB	llvm module passes [0]
time: 0.158; rss: 294MB	codegen passes [9]
time: 0.108; rss: 295MB	llvm module passes [11]
time: 0.142; rss: 295MB	codegen passes [7]
time: 0.092; rss: 297MB	llvm function passes [14]
time: 0.099; rss: 301MB	codegen passes [1]
time: 0.119; rss: 309MB	codegen passes [13]
time: 0.057; rss: 311MB	llvm module passes [14]
time: 0.276; rss: 317MB	llvm module passes [4]
time: 0.245; rss: 319MB	codegen passes [8]
time: 0.188; rss: 311MB	codegen passes [16]
time: 0.315; rss: 311MB	llvm module passes [5]
time: 0.189; rss: 322MB	codegen passes [11]
time: 0.415; rss: 333MB	codegen passes [12]
time: 0.578; rss: 339MB	llvm module passes [6]
time: 0.536; rss: 347MB	llvm module passes [2]
time: 0.688; rss: 361MB	llvm module passes [3]
time: 0.469; rss: 360MB	codegen passes [10]
time: 0.457; rss: 354MB	codegen passes [4]
time: 0.483; rss: 350MB	codegen passes [5]
time: 0.499; rss: 338MB	codegen passes [14]
time: 0.751; rss: 346MB	codegen passes [0]
time: 0.641; rss: 367MB	codegen passes [6]
time: 0.819; rss: 344MB	codegen passes [2]
time: 0.784; rss: 322MB	codegen passes [3]
time: 1.651; rss: 320MB	LLVM passes
time: 0.000; rss: 320MB	serialize work products
time: 0.207; rss: 145MB	linking
done

commit 469fd779ee24f8348acd438f471c8c3a5cef309a
Merge: 17f1fba a6fe6c9
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 09:42:46 2016 +0000

    Auto merge of #38616 - pnkfelix:refactor-mir-dataflow-remove-ctxt, r=arielb1
    
    Refactor mir::dataflow: remove Ctxt associated type from BitDenotation trait
    
    Refactor mir::dataflow: remove Ctxt associated type from BitDenotation trait
    
    I no longer remember why I needed this (or thought I did). The way
    that the `BitDenotation` is passed around in all existing use cases
    (and planned future ones), the thing that were in the `Ctxt` can just
    be part of `Self` instead.
    
    (I think ariel had been pushing me to do this back when I first put in
    this infrastructure; it took me a while to see how much of pain the
    `Ctxt` was causing.)
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 103MB	coherence checking
time: 0.020; rss: 104MB	wf checking
time: 0.123; rss: 112MB	item-types checking
time: 0.295; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.039; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.005; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.042; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.009; rss: 173MB	QualifyAndPromoteConstants
  time: 0.012; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.030; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.029; rss: 174MB	lint checking
time: 0.000; rss: 174MB	resolving dependency formats
  time: 0.000; rss: 174MB	NoLandingPads
  time: 0.003; rss: 174MB	SimplifyCfg
  time: 0.008; rss: 174MB	EraseRegions
  time: 0.001; rss: 174MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.044; rss: 176MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.086; rss: 183MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 312MB	internalize symbols
time: 1.685; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.123; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 263MB	llvm function passes [2]
time: 0.000; rss: 263MB	llvm module passes [2]
time: 0.002; rss: 263MB	llvm function passes [0]
time: 0.000; rss: 263MB	llvm module passes [0]
time: 0.001; rss: 263MB	llvm function passes [5]
time: 0.004; rss: 263MB	llvm function passes [1]
time: 0.002; rss: 263MB	llvm module passes [5]
time: 0.001; rss: 263MB	llvm module passes [1]
time: 0.006; rss: 266MB	codegen passes [2]
time: 0.008; rss: 268MB	llvm function passes [2]
time: 0.015; rss: 270MB	codegen passes [5]
time: 0.002; rss: 270MB	llvm function passes [8]
time: 0.022; rss: 270MB	llvm function passes [3]
time: 0.001; rss: 270MB	llvm module passes [8]
time: 0.024; rss: 270MB	llvm function passes [4]
time: 0.020; rss: 270MB	codegen passes [0]
time: 0.012; rss: 270MB	llvm function passes [9]
time: 0.003; rss: 270MB	llvm module passes [9]
time: 0.005; rss: 270MB	llvm function passes [0]
time: 0.002; rss: 272MB	llvm module passes [0]
time: 0.016; rss: 272MB	llvm module passes [2]
time: 0.034; rss: 272MB	llvm function passes [7]
time: 0.016; rss: 272MB	llvm function passes [5]
time: 0.007; rss: 272MB	llvm module passes [5]
time: 0.043; rss: 272MB	llvm function passes [6]
time: 0.004; rss: 283MB	llvm function passes [20]
time: 0.002; rss: 283MB	llvm module passes [20]
time: 0.050; rss: 290MB	codegen passes [1]
time: 0.027; rss: 290MB	llvm function passes [11]
time: 0.001; rss: 290MB	llvm function passes [1]
time: 0.001; rss: 290MB	llvm module passes [1]
time: 0.040; rss: 296MB	codegen passes [8]
time: 0.011; rss: 296MB	llvm function passes [10]
time: 0.003; rss: 298MB	llvm function passes [8]
time: 0.001; rss: 298MB	llvm module passes [8]
time: 0.007; rss: 300MB	llvm module passes [10]
time: 0.001; rss: 308MB	codegen passes [14]
time: 0.035; rss: 308MB	codegen passes [1]
time: 0.052; rss: 308MB	llvm function passes [12]
time: 0.047; rss: 317MB	llvm function passes [13]
time: 0.066; rss: 325MB	llvm function passes [15]
time: 0.079; rss: 325MB	codegen passes [20]
time: 0.047; rss: 333MB	llvm module passes [13]
time: 0.045; rss: 333MB	codegen passes [8]
time: 0.032; rss: 339MB	llvm module passes [15]
time: 0.083; rss: 340MB	codegen passes [0]
time: 0.144; rss: 346MB	llvm module passes [11]
time: 0.168; rss: 359MB	codegen passes [2]
time: 0.187; rss: 359MB	codegen passes [9]
time: 0.136; rss: 352MB	codegen passes [10]
time: 0.232; rss: 349MB	llvm module passes [3]
time: 0.237; rss: 342MB	llvm module passes [4]
time: 0.407; rss: 364MB	llvm module passes [7]
time: 0.357; rss: 368MB	llvm module passes [12]
time: 0.516; rss: 387MB	llvm module passes [6]
time: 0.418; rss: 376MB	codegen passes [5]
time: 0.424; rss: 395MB	codegen passes [11]
time: 0.403; rss: 381MB	codegen passes [3]
time: 0.491; rss: 380MB	codegen passes [13]
time: 0.472; rss: 374MB	codegen passes [4]
time: 0.695; rss: 379MB	codegen passes [15]
time: 0.719; rss: 407MB	codegen passes [7]
time: 0.813; rss: 387MB	codegen passes [12]
time: 0.720; rss: 362MB	codegen passes [6]
time: 1.413; rss: 358MB	LLVM passes
time: 0.000; rss: 358MB	serialize work products
time: 0.206; rss: 174MB	linking
done

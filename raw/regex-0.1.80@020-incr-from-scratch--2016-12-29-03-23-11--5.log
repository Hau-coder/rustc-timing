commit ebc293bcd3fb4122c9be889b7338a9c3089f53ce
Merge: 1d9965b ad747c5
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 29 08:16:58 2016 +0000

    Auto merge of #38645 - nikomatsakis:incr-comp-fix-time-depth, r=nrc
    
    propagate TIME_DEPTH to the helper threads for -Z time-passes
    
    Currently, the timing measurements for LLVM passes and the like don't come out indented, which messes up `perf.rust-lang.org`.
    
    r? @nrc
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 103MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.123; rss: 112MB	item-types checking
time: 0.297; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.039; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.005; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.042; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	QualifyAndPromoteConstants
  time: 0.012; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.030; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.030; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.007; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.044; rss: 176MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.085; rss: 182MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 311MB	internalize symbols
time: 1.640; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.125; rss: 319MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 256MB	llvm function passes [2]
time: 0.000; rss: 258MB	llvm module passes [2]
time: 0.002; rss: 261MB	llvm function passes [1]
time: 0.001; rss: 261MB	llvm function passes [6]
time: 0.000; rss: 261MB	llvm module passes [1]
time: 0.001; rss: 261MB	llvm module passes [6]
time: 0.003; rss: 261MB	llvm function passes [0]
time: 0.001; rss: 261MB	llvm module passes [0]
time: 0.008; rss: 271MB	codegen passes [2]
time: 0.003; rss: 271MB	llvm function passes [2]
time: 0.001; rss: 273MB	llvm module passes [2]
time: 0.008; rss: 273MB	llvm function passes [9]
time: 0.019; rss: 273MB	llvm function passes [4]
time: 0.019; rss: 273MB	llvm function passes [5]
time: 0.005; rss: 275MB	llvm module passes [9]
time: 0.011; rss: 275MB	llvm function passes [8]
time: 0.018; rss: 275MB	llvm function passes [17]
time: 0.007; rss: 275MB	llvm module passes [8]
time: 0.003; rss: 275MB	llvm module passes [17]
time: 0.033; rss: 277MB	llvm function passes [7]
time: 0.039; rss: 277MB	llvm function passes [3]
time: 0.005; rss: 281MB	llvm function passes [16]
time: 0.002; rss: 281MB	llvm module passes [16]
time: 0.004; rss: 281MB	llvm function passes [11]
time: 0.002; rss: 281MB	llvm module passes [11]
time: 0.047; rss: 288MB	codegen passes [1]
time: 0.050; rss: 290MB	codegen passes [6]
time: 0.033; rss: 290MB	llvm function passes [10]
time: 0.053; rss: 290MB	codegen passes [2]
time: 0.003; rss: 290MB	llvm function passes [2]
time: 0.001; rss: 290MB	llvm module passes [2]
time: 0.026; rss: 290MB	llvm function passes [1]
time: 0.014; rss: 298MB	llvm function passes [13]
time: 0.001; rss: 298MB	llvm module passes [13]
time: 0.034; rss: 298MB	llvm function passes [6]
time: 0.032; rss: 300MB	llvm module passes [10]
time: 0.036; rss: 300MB	llvm function passes [14]
time: 0.018; rss: 304MB	llvm module passes [6]
time: 0.000; rss: 304MB	codegen passes [12]
time: 0.099; rss: 304MB	codegen passes [0]
time: 0.049; rss: 317MB	llvm module passes [1]
time: 0.090; rss: 327MB	codegen passes [11]
time: 0.077; rss: 329MB	llvm function passes [15]
time: 0.042; rss: 329MB	codegen passes [2]
time: 0.110; rss: 329MB	codegen passes [16]
time: 0.095; rss: 347MB	codegen passes [13]
time: 0.086; rss: 347MB	llvm module passes [14]
time: 0.142; rss: 360MB	codegen passes [17]
time: 0.183; rss: 357MB	codegen passes [9]
time: 0.228; rss: 344MB	llvm module passes [4]
time: 0.244; rss: 343MB	llvm module passes [5]
time: 0.127; rss: 361MB	codegen passes [14]
time: 0.418; rss: 372MB	llvm module passes [7]
time: 0.356; rss: 377MB	codegen passes [8]
time: 0.419; rss: 379MB	llvm module passes [15]
time: 0.417; rss: 390MB	codegen passes [10]
time: 0.604; rss: 388MB	llvm module passes [3]
time: 0.367; rss: 390MB	codegen passes [4]
time: 0.404; rss: 380MB	codegen passes [5]
time: 0.510; rss: 376MB	codegen passes [1]
time: 0.640; rss: 370MB	codegen passes [6]
time: 0.798; rss: 400MB	codegen passes [15]
time: 0.927; rss: 379MB	codegen passes [7]
time: 0.932; rss: 357MB	codegen passes [3]
time: 1.687; rss: 354MB	LLVM passes
time: 0.000; rss: 354MB	serialize work products
time: 0.207; rss: 170MB	linking
done

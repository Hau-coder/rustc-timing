commit 4ecc85beb339aa8089d936e450b0d800bdf580ae
Merge: 02b22ec ee0ea95
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 20:19:39 2016 +0000

    Auto merge of #38449 - eddyb:lazy-10, r=nikomatsakis
    
    [10/n] Split constants and functions' arguments into disjoint bodies.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/38053) | [next]()) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Finishes the signature-body split started in #37918, namely:
    * `trait` items are separated just like `impl` items were, for uniformity, closing #37712
    * `static`s, `const`s (including associated ones), `enum` discriminants and array lengths get bodies
      * even the count in "repeat expressions", i.e. `n` in `[x; n]`, which fixes #24414
    * arguments' patterns are moved to the bodies, with the types staying in `FnDecl`
      * `&self` now desugars to `self: &Self` instead of `self: &_` (similarly for other `self` forms)
      * `astconv`'s and metadata's (for rustdoc) informative uses are explicitly ignored for the purposes of the dep graph. this could be fixed in the future by hashing the exact information being extracted about the arguments as opposed to generating a dependency on *the whole body*
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.124; rss: 112MB	item-types checking
time: 0.297; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.033; rss: 172MB	MIR cleanup and validation
time: 0.047; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.005; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.030; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.047; rss: 175MB	MIR optimisations
  time: 0.010; rss: 178MB	write metadata
  time: 0.089; rss: 185MB	translation item collection
  time: 0.015; rss: 185MB	codegen unit partitioning
  time: 0.012; rss: 312MB	internalize symbols
time: 1.698; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.124; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 256MB	llvm function passes [1]
time: 0.000; rss: 258MB	llvm module passes [1]
time: 0.002; rss: 258MB	llvm function passes [0]
time: 0.001; rss: 258MB	llvm function passes [5]
time: 0.000; rss: 259MB	llvm module passes [0]
time: 0.001; rss: 261MB	llvm module passes [5]
time: 0.004; rss: 261MB	llvm function passes [2]
time: 0.001; rss: 261MB	llvm module passes [2]
time: 0.007; rss: 266MB	codegen passes [1]
time: 0.002; rss: 269MB	llvm function passes [1]
time: 0.001; rss: 269MB	llvm module passes [1]
time: 0.015; rss: 273MB	codegen passes [5]
time: 0.021; rss: 273MB	llvm function passes [6]
time: 0.022; rss: 273MB	llvm function passes [4]
time: 0.020; rss: 273MB	codegen passes [0]
time: 0.011; rss: 273MB	llvm function passes [13]
time: 0.008; rss: 273MB	llvm function passes [5]
time: 0.004; rss: 273MB	llvm function passes [0]
time: 0.003; rss: 273MB	llvm module passes [13]
time: 0.002; rss: 273MB	llvm module passes [0]
time: 0.024; rss: 273MB	llvm function passes [12]
time: 0.003; rss: 273MB	llvm module passes [12]
time: 0.009; rss: 276MB	llvm module passes [5]
time: 0.030; rss: 276MB	llvm function passes [10]
time: 0.035; rss: 276MB	llvm function passes [11]
time: 0.002; rss: 276MB	llvm module passes [10]
time: 0.039; rss: 280MB	codegen passes [1]
time: 0.020; rss: 280MB	llvm function passes [16]
time: 0.066; rss: 280MB	llvm function passes [3]
time: 0.011; rss: 280MB	llvm module passes [16]
time: 0.068; rss: 280MB	llvm function passes [15]
time: 0.064; rss: 292MB	codegen passes [2]
time: 0.002; rss: 292MB	llvm function passes [2]
time: 0.001; rss: 292MB	llvm module passes [2]
time: 0.031; rss: 292MB	llvm module passes [11]
time: 0.045; rss: 294MB	llvm function passes [17]
time: 0.026; rss: 294MB	llvm function passes [18]
time: 0.001; rss: 294MB	llvm module passes [18]
time: 0.000; rss: 296MB	codegen passes [7]
time: 0.059; rss: 305MB	codegen passes [0]
time: 0.068; rss: 315MB	llvm function passes [1]
time: 0.045; rss: 315MB	codegen passes [2]
time: 0.021; rss: 319MB	llvm module passes [1]
time: 0.107; rss: 323MB	codegen passes [10]
time: 0.081; rss: 327MB	codegen passes [18]
time: 0.096; rss: 326MB	llvm function passes [8]
time: 0.020; rss: 338MB	llvm module passes [8]
time: 0.170; rss: 353MB	codegen passes [5]
time: 0.232; rss: 351MB	llvm module passes [6]
time: 0.231; rss: 351MB	llvm module passes [4]
time: 0.182; rss: 351MB	codegen passes [13]
time: 0.223; rss: 345MB	codegen passes [12]
time: 0.409; rss: 371MB	llvm module passes [17]
time: 0.341; rss: 367MB	codegen passes [11]
time: 0.484; rss: 376MB	llvm module passes [3]
time: 0.492; rss: 374MB	llvm module passes [15]
time: 0.466; rss: 396MB	codegen passes [16]
time: 0.465; rss: 378MB	codegen passes [1]
time: 0.430; rss: 375MB	codegen passes [6]
time: 0.452; rss: 369MB	codegen passes [4]
time: 0.568; rss: 366MB	codegen passes [8]
time: 0.635; rss: 412MB	codegen passes [15]
time: 0.686; rss: 377MB	codegen passes [3]
time: 0.802; rss: 354MB	codegen passes [17]
time: 1.418; rss: 351MB	LLVM passes
time: 0.000; rss: 350MB	serialize work products
time: 0.207; rss: 171MB	linking
done

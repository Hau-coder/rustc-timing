commit 4ecc85beb339aa8089d936e450b0d800bdf580ae
Merge: 02b22ec ee0ea95
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 20:19:39 2016 +0000

    Auto merge of #38449 - eddyb:lazy-10, r=nikomatsakis
    
    [10/n] Split constants and functions' arguments into disjoint bodies.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/38053) | [next]()) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Finishes the signature-body split started in #37918, namely:
    * `trait` items are separated just like `impl` items were, for uniformity, closing #37712
    * `static`s, `const`s (including associated ones), `enum` discriminants and array lengths get bodies
      * even the count in "repeat expressions", i.e. `n` in `[x; n]`, which fixes #24414
    * arguments' patterns are moved to the bodies, with the types staying in `FnDecl`
      * `&self` now desugars to `self: &Self` instead of `self: &_` (similarly for other `self` forms)
      * `astconv`'s and metadata's (for rustdoc) informative uses are explicitly ignored for the purposes of the dep graph. this could be fixed in the future by hashing the exact information being extracted about the arguments as opposed to generating a dependency on *the whole body*
rustc: ./regex-0.1.80@040-is_valid_cap_letter
git apply 040-is_valid_cap_letter.diff 
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..3b6ae94 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -84,6 +84,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10692
Pre-expansion node count:  55402
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86875
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::expand[0]::is_valid_cap_letter[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Krate changed or was removed
time: 0.021; rss: 94MB	load_dep_graph
time: 0.002; rss: 94MB	stability index
time: 0.002; rss: 94MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.301; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.040; rss: 151MB	const checking
time: 0.007; rss: 151MB	privacy checking
time: 0.002; rss: 151MB	intrinsic checking
time: 0.001; rss: 151MB	effect checking
time: 0.006; rss: 151MB	match checking
time: 0.004; rss: 152MB	liveness checking
time: 0.016; rss: 152MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.032; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.029; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.008; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.044; rss: 176MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.087; rss: 183MB	translation item collection
  time: 0.015; rss: 187MB	codegen unit partitioning
  time: 0.013; rss: 311MB	internalize symbols
time: 1.700; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.124; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 258MB	llvm function passes [3]
time: 0.000; rss: 258MB	llvm module passes [3]
time: 0.002; rss: 258MB	llvm function passes [1]
time: 0.000; rss: 258MB	llvm module passes [1]
time: 0.003; rss: 258MB	llvm function passes [0]
time: 0.001; rss: 264MB	llvm module passes [0]
time: 0.006; rss: 268MB	llvm function passes [12]
time: 0.001; rss: 270MB	llvm module passes [12]
time: 0.007; rss: 270MB	llvm function passes [11]
time: 0.003; rss: 270MB	llvm module passes [11]
time: 0.013; rss: 270MB	codegen passes [3]
time: 0.002; rss: 270MB	llvm function passes [3]
time: 0.001; rss: 270MB	llvm module passes [3]
time: 0.019; rss: 270MB	llvm function passes [4]
time: 0.019; rss: 270MB	llvm function passes [5]
time: 0.004; rss: 278MB	llvm function passes [8]
time: 0.002; rss: 278MB	llvm module passes [8]
time: 0.031; rss: 278MB	llvm function passes [10]
time: 0.027; rss: 278MB	codegen passes [12]
time: 0.042; rss: 278MB	llvm function passes [2]
time: 0.006; rss: 278MB	llvm function passes [12]
time: 0.046; rss: 283MB	codegen passes [1]
time: 0.006; rss: 283MB	llvm module passes [12]
time: 0.004; rss: 283MB	llvm function passes [7]
time: 0.002; rss: 285MB	llvm function passes [6]
time: 0.044; rss: 285MB	llvm function passes [13]
time: 0.001; rss: 285MB	llvm module passes [6]
time: 0.004; rss: 291MB	llvm module passes [13]
time: 0.014; rss: 291MB	llvm module passes [7]
time: 0.051; rss: 291MB	codegen passes [3]
time: 0.033; rss: 293MB	llvm function passes [14]
time: 0.003; rss: 293MB	llvm function passes [3]
time: 0.001; rss: 293MB	llvm module passes [3]
time: 0.040; rss: 291MB	llvm function passes [9]
time: 0.013; rss: 293MB	llvm module passes [14]
time: 0.012; rss: 293MB	llvm module passes [9]
time: 0.000; rss: 306MB	codegen passes [17]
time: 0.056; rss: 314MB	llvm function passes [1]
time: 0.051; rss: 320MB	codegen passes [6]
time: 0.056; rss: 320MB	llvm function passes [16]
time: 0.063; rss: 322MB	llvm function passes [15]
time: 0.125; rss: 324MB	codegen passes [0]
time: 0.019; rss: 324MB	llvm module passes [16]
time: 0.061; rss: 323MB	codegen passes [3]
time: 0.101; rss: 323MB	codegen passes [8]
time: 0.113; rss: 338MB	codegen passes [7]
time: 0.187; rss: 343MB	codegen passes [11]
time: 0.086; rss: 349MB	llvm module passes [15]
time: 0.138; rss: 350MB	codegen passes [12]
time: 0.230; rss: 344MB	llvm module passes [5]
time: 0.234; rss: 345MB	llvm module passes [4]
time: 0.162; rss: 348MB	codegen passes [13]
time: 0.306; rss: 369MB	codegen passes [14]
time: 0.376; rss: 369MB	llvm module passes [1]
time: 0.512; rss: 375MB	llvm module passes [10]
time: 0.516; rss: 377MB	llvm module passes [2]
time: 0.478; rss: 387MB	codegen passes [9]
time: 0.381; rss: 377MB	codegen passes [5]
time: 0.406; rss: 373MB	codegen passes [4]
time: 0.462; rss: 368MB	codegen passes [15]
time: 0.646; rss: 371MB	codegen passes [16]
time: 0.597; rss: 416MB	codegen passes [10]
time: 0.721; rss: 370MB	codegen passes [2]
time: 0.786; rss: 357MB	codegen passes [1]
time: 1.397; rss: 355MB	LLVM passes
time: 0.000; rss: 355MB	serialize work products
time: 0.206; rss: 176MB	linking
done

commit d86cf13316a885dbc78fc33becbc718c6ff3468c
Merge: 8d65c8d ecc6010
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 24 13:28:37 2016 +0000

    Auto merge of #38062 - alexcrichton:fix-line-writer, r=brson
    
    std: Fix partial writes in LineWriter
    
    Previously the `LineWriter` could successfully write some bytes but then fail to
    report that it has done so. Additionally, an erroneous flush after a successful
    write was permanently ignored. This commit fixes these two issues by (a)
    maintaining a `need_flush` flag to indicate whether a flush should be the first
    operation in `LineWriter::write` and (b) avoiding returning an error once some
    bytes have been successfully written.
    
    Closes #37807
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.001; rss: 92MB	stability index
time: 0.002; rss: 92MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.298; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.039; rss: 149MB	const checking
time: 0.007; rss: 149MB	privacy checking
time: 0.002; rss: 149MB	intrinsic checking
time: 0.001; rss: 149MB	effect checking
time: 0.006; rss: 149MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.016; rss: 150MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.032; rss: 172MB	MIR cleanup and validation
time: 0.045; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.029; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.007; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.043; rss: 175MB	MIR optimisations
  time: 0.008; rss: 177MB	write metadata
  time: 0.085; rss: 185MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.012; rss: 311MB	internalize symbols
time: 1.668; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.133; rss: 319MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 256MB	llvm function passes [1]
time: 0.000; rss: 256MB	llvm module passes [1]
time: 0.001; rss: 256MB	llvm function passes [6]
time: 0.000; rss: 256MB	llvm module passes [6]
time: 0.002; rss: 256MB	llvm function passes [0]
time: 0.000; rss: 256MB	llvm module passes [0]
time: 0.003; rss: 256MB	llvm function passes [2]
time: 0.001; rss: 256MB	llvm module passes [2]
time: 0.006; rss: 262MB	codegen passes [1]
time: 0.002; rss: 266MB	llvm function passes [17]
time: 0.001; rss: 266MB	llvm module passes [17]
time: 0.014; rss: 266MB	codegen passes [6]
time: 0.008; rss: 266MB	llvm function passes [1]
time: 0.020; rss: 268MB	llvm function passes [4]
time: 0.003; rss: 270MB	llvm module passes [1]
time: 0.021; rss: 270MB	codegen passes [0]
time: 0.020; rss: 268MB	llvm function passes [5]
time: 0.008; rss: 270MB	llvm function passes [0]
time: 0.016; rss: 270MB	llvm function passes [6]
time: 0.017; rss: 274MB	llvm function passes [20]
time: 0.002; rss: 274MB	llvm module passes [20]
time: 0.004; rss: 276MB	llvm function passes [9]
time: 0.007; rss: 278MB	llvm module passes [6]
time: 0.002; rss: 278MB	llvm module passes [9]
time: 0.008; rss: 278MB	llvm module passes [0]
time: 0.046; rss: 278MB	llvm function passes [3]
time: 0.036; rss: 278MB	llvm function passes [18]
time: 0.002; rss: 280MB	llvm function passes [11]
time: 0.001; rss: 280MB	llvm module passes [11]
time: 0.003; rss: 280MB	llvm module passes [18]
time: 0.041; rss: 283MB	llvm function passes [16]
time: 0.055; rss: 295MB	llvm function passes [10]
time: 0.068; rss: 297MB	codegen passes [17]
time: 0.000; rss: 297MB	codegen passes [17]
time: 0.091; rss: 297MB	llvm function passes [19]
time: 0.003; rss: 305MB	llvm function passes [14]
time: 0.001; rss: 305MB	llvm module passes [14]
time: 0.112; rss: 307MB	codegen passes [2]
time: 0.065; rss: 309MB	llvm function passes [12]
time: 0.060; rss: 307MB	llvm module passes [16]
time: 0.099; rss: 312MB	codegen passes [9]
time: 0.065; rss: 314MB	llvm function passes [8]
time: 0.105; rss: 316MB	codegen passes [11]
time: 0.036; rss: 322MB	llvm module passes [12]
time: 0.109; rss: 327MB	codegen passes [20]
time: 0.028; rss: 327MB	llvm module passes [8]
time: 0.148; rss: 328MB	codegen passes [1]
time: 0.098; rss: 347MB	codegen passes [14]
time: 0.213; rss: 342MB	llvm module passes [4]
time: 0.185; rss: 344MB	codegen passes [0]
time: 0.228; rss: 340MB	llvm module passes [5]
time: 0.161; rss: 347MB	codegen passes [18]
time: 0.406; rss: 377MB	llvm module passes [19]
time: 0.442; rss: 376MB	llvm module passes [10]
time: 0.499; rss: 381MB	llvm module passes [3]
time: 0.389; rss: 380MB	codegen passes [6]
time: 0.404; rss: 389MB	codegen passes [16]
time: 0.400; rss: 372MB	codegen passes [4]
time: 0.490; rss: 372MB	codegen passes [12]
time: 0.465; rss: 365MB	codegen passes [5]
time: 0.722; rss: 385MB	codegen passes [8]
time: 0.645; rss: 396MB	codegen passes [19]
time: 0.691; rss: 387MB	codegen passes [3]
time: 0.866; rss: 358MB	codegen passes [10]
time: 1.531; rss: 355MB	LLVM passes
time: 0.000; rss: 354MB	serialize work products
time: 0.205; rss: 174MB	linking
done

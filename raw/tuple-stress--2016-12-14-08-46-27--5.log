commit 01d53df82ef12625f947f5c0a6004e1aea2f9782
Merge: 5d3ec6b 5e991e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 14 09:56:38 2016 +0000

    Auto merge of #38340 - alexcrichton:fix-travis, r=alexcrichton
    
    Fix travis builds
    
    After reading some articles [1] [2] yesterday about Docker and the "init"
    process I got to thinking about the problems that we've been seeing on Travis.
    The basic problem is that a Linux system may need an "init" process to work
    properly when processes become zombies. Docker by default doesn't handle this
    and the root process typically isn't an init process, so this can occasionally
    cause quite a few problems.
    
    We've been seeing spurious errors on Travis inside containers which look like
    OOM and such, but my guess is that zombie processes were being reparented to the
    top-level shell. The shell didn't expect the zombies and then behaved very
    strangely.
    
    This commit fixes these problems by using Yelp's "dumb-init" program [2] as the
    init process in all of our containers. This ensures that there's a valid init
    ready to reap children when they're reparented, which our test suite apparently
    generates a bunch of throughout the tests and such.
    
    [1]: https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/
    [2]: https://engineeringblog.yelp.com/2016/01/dumb-init-an-init-for-docker.html
rustc: ./tuple-stress
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.470; rss: 135MB	parsing
Lines of code:             65571
Pre-expansion node count:  393241
time: 0.000; rss: 135MB	recursion limit
time: 0.000; rss: 135MB	crate injection
time: 0.000; rss: 135MB	plugin loading
time: 0.000; rss: 135MB	plugin registration
time: 0.092; rss: 158MB	expansion
time: 0.000; rss: 158MB	maybe building test harness
time: 0.005; rss: 158MB	maybe creating a macro crate
Post-expansion node count: 393303
time: 0.000; rss: 158MB	checking for inline asm in case the target doesn't support it
time: 0.005; rss: 158MB	complete gated feature checking
time: 0.033; rss: 158MB	early lint checks
time: 0.005; rss: 158MB	AST validation
time: 0.011; rss: 158MB	name resolution
time: 0.031; rss: 201MB	lowering ast -> hir
time: 0.008; rss: 218MB	indexing hir
time: 0.005; rss: 218MB	attribute checking
time: 0.002; rss: 140MB	language item collection
time: 0.002; rss: 140MB	lifetime resolution
time: 0.000; rss: 140MB	looking for entry point
time: 0.000; rss: 140MB	looking for plugin registrar
time: 0.050; rss: 163MB	region resolution
time: 0.002; rss: 163MB	loop checking
time: 0.004; rss: 163MB	static item recursion checking
time: 0.207; rss: 163MB	compute_incremental_hashes_map
time: 0.000; rss: 163MB	load_dep_graph
time: 0.002; rss: 163MB	stability index
time: 0.002; rss: 163MB	stability checking
time: 0.002; rss: 163MB	type collecting
time: 0.000; rss: 163MB	variance inference
time: 0.000; rss: 163MB	impl wf inference
time: 0.003; rss: 165MB	coherence checking
time: 0.002; rss: 165MB	wf checking
time: 0.577; rss: 208MB	item-types checking
time: 0.003; rss: 209MB	item-bodies checking
time: 0.000; rss: 209MB	drop-impl checking
time: 0.178; rss: 219MB	const checking
time: 0.004; rss: 219MB	privacy checking
time: 0.002; rss: 219MB	intrinsic checking
time: 0.002; rss: 219MB	effect checking
time: 0.000; rss: 219MB	match checking
time: 0.002; rss: 219MB	liveness checking
time: 0.002; rss: 219MB	rvalue checking
time: 0.296; rss: 277MB	MIR dump
  time: 0.000; rss: 277MB	SimplifyCfg
  time: 0.012; rss: 277MB	QualifyAndPromoteConstants
  time: 0.036; rss: 277MB	TypeckMir
  time: 0.000; rss: 277MB	SimplifyBranches
  time: 0.000; rss: 277MB	SimplifyCfg
time: 0.048; rss: 277MB	MIR cleanup and validation
time: 0.004; rss: 277MB	borrow checking
time: 0.000; rss: 277MB	reachability checking
time: 0.004; rss: 277MB	death checking
time: 0.000; rss: 277MB	unused lib feature checking
time: 0.191; rss: 277MB	lint checking
time: 0.001; rss: 277MB	resolving dependency formats
  time: 0.000; rss: 277MB	NoLandingPads
  time: 0.000; rss: 277MB	SimplifyCfg
  time: 0.007; rss: 277MB	EraseRegions
  time: 0.000; rss: 277MB	AddCallGuards
  time: 0.000; rss: 277MB	ElaborateDrops
  time: 0.000; rss: 277MB	NoLandingPads
  time: 0.000; rss: 277MB	SimplifyCfg
  time: 0.006; rss: 277MB	InstCombine
  time: 0.000; rss: 277MB	Deaggregator
  time: 0.000; rss: 277MB	CopyPropagation
  time: 0.009; rss: 277MB	SimplifyLocals
  time: 0.000; rss: 277MB	AddCallGuards
  time: 0.000; rss: 277MB	PreTrans
time: 0.023; rss: 277MB	MIR optimisations
  time: 0.000; rss: 277MB	write metadata
  time: 0.006; rss: 279MB	translation item collection
  time: 0.000; rss: 279MB	codegen unit partitioning
  time: 0.000; rss: 305MB	internalize symbols
time: 0.303; rss: 305MB	translation
time: 0.000; rss: 305MB	assert dep graph
time: 0.000; rss: 305MB	serialize dep graph
  time: 0.022; rss: 128MB	llvm function passes [0]
  time: 0.000; rss: 128MB	llvm module passes [0]
  time: 0.318; rss: 123MB	codegen passes [0]
  time: 0.000; rss: 123MB	codegen passes [0]
time: 0.342; rss: 123MB	LLVM passes
time: 0.000; rss: 123MB	serialize work products
  time: 0.078; rss: 92MB	running linker
time: 0.079; rss: 92MB	linking
done

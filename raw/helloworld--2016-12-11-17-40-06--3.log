commit 3db197aa9d343c7974b06a9b18ae5f78d5c64637
Merge: 6d5ec58 fbc3f11
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 11 21:19:34 2016 +0000

    Auto merge of #38265 - bluss:mir-deaggregator-loop, r=nagisa
    
    Reinstate while loop in deaggregator pass
    
    A previous commit must have removed the `while let` loop here by
    mistake; for each basic block, it should find and deaggregate multiple
    statements in their index order, and the `curr` index tracks the
    progress through the block.
    
    This fixes both the case of deaggregating statements in separate
    basic blocks (preserving `curr` could prevent that) as well
    as multiple times in the same block (missing loop prevented that).
    
    The loop was lost in commit bda46c21fe30377b9587b584c64ffe99da6c14ce.
rustc: ./helloworld
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.000; rss: 42MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.013; rss: 63MB	expansion
time: 0.000; rss: 63MB	maybe building test harness
time: 0.000; rss: 63MB	maybe creating a macro crate
Post-expansion node count: 68
time: 0.000; rss: 63MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 63MB	complete gated feature checking
time: 0.000; rss: 63MB	early lint checks
time: 0.000; rss: 63MB	AST validation
time: 0.002; rss: 63MB	name resolution
time: 0.000; rss: 67MB	lowering ast -> hir
time: 0.000; rss: 67MB	indexing hir
time: 0.000; rss: 67MB	attribute checking
time: 0.000; rss: 67MB	language item collection
time: 0.000; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.000; rss: 67MB	region resolution
time: 0.000; rss: 67MB	loop checking
time: 0.000; rss: 67MB	static item recursion checking
time: 0.000; rss: 67MB	compute_incremental_hashes_map
time: 0.000; rss: 67MB	load_dep_graph
time: 0.000; rss: 67MB	stability index
time: 0.000; rss: 67MB	stability checking
time: 0.000; rss: 67MB	type collecting
time: 0.000; rss: 67MB	variance inference
time: 0.000; rss: 67MB	impl wf inference
time: 0.003; rss: 67MB	coherence checking
time: 0.000; rss: 67MB	wf checking
time: 0.000; rss: 67MB	item-types checking
time: 0.000; rss: 67MB	item-bodies checking
time: 0.000; rss: 67MB	drop-impl checking
time: 0.000; rss: 67MB	const checking
time: 0.000; rss: 67MB	privacy checking
time: 0.000; rss: 67MB	intrinsic checking
time: 0.000; rss: 67MB	effect checking
time: 0.000; rss: 67MB	match checking
time: 0.000; rss: 67MB	liveness checking
time: 0.000; rss: 67MB	rvalue checking
time: 0.000; rss: 67MB	MIR dump
  time: 0.000; rss: 67MB	SimplifyCfg
  time: 0.000; rss: 67MB	QualifyAndPromoteConstants
  time: 0.000; rss: 67MB	TypeckMir
  time: 0.000; rss: 67MB	SimplifyBranches
  time: 0.000; rss: 67MB	SimplifyCfg
time: 0.000; rss: 67MB	MIR cleanup and validation
time: 0.000; rss: 71MB	borrow checking
time: 0.000; rss: 71MB	reachability checking
time: 0.000; rss: 71MB	death checking
time: 0.000; rss: 71MB	unused lib feature checking
time: 0.000; rss: 71MB	lint checking
time: 0.001; rss: 71MB	resolving dependency formats
  time: 0.000; rss: 71MB	NoLandingPads
  time: 0.000; rss: 71MB	SimplifyCfg
  time: 0.000; rss: 71MB	EraseRegions
  time: 0.000; rss: 71MB	AddCallGuards
  time: 0.000; rss: 71MB	ElaborateDrops
  time: 0.000; rss: 71MB	NoLandingPads
  time: 0.000; rss: 71MB	SimplifyCfg
  time: 0.000; rss: 71MB	InstCombine
  time: 0.000; rss: 71MB	Deaggregator
  time: 0.000; rss: 71MB	CopyPropagation
  time: 0.000; rss: 71MB	SimplifyLocals
  time: 0.000; rss: 71MB	AddCallGuards
  time: 0.000; rss: 71MB	PreTrans
time: 0.000; rss: 71MB	MIR optimisations
  time: 0.000; rss: 71MB	write metadata
  time: 0.000; rss: 71MB	translation item collection
  time: 0.000; rss: 71MB	codegen unit partitioning
  time: 0.000; rss: 77MB	internalize symbols
time: 0.044; rss: 77MB	translation
time: 0.000; rss: 77MB	assert dep graph
time: 0.000; rss: 77MB	serialize dep graph
  time: 0.000; rss: 77MB	llvm function passes [0]
  time: 0.000; rss: 77MB	llvm module passes [0]
  time: 0.002; rss: 77MB	codegen passes [0]
  time: 0.000; rss: 77MB	codegen passes [0]
time: 0.003; rss: 77MB	LLVM passes
time: 0.000; rss: 77MB	serialize work products
  time: 0.074; rss: 77MB	running linker
time: 0.074; rss: 77MB	linking
done

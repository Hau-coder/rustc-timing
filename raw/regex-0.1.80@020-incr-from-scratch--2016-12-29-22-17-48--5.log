commit 75f5981d4500e52de767d61ec50a34b97be2a301
Merge: e7c788a e5c7782
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 30 01:20:18 2016 +0000

    Auto merge of #38695 - alexcrichton:debug-appveyor, r=brson
    
    appveyor: Attempt to debug flaky test runs
    
    This commit is an attempt to debug #38620 since we're unable to reproduce it
    locally. It follows the [advice] of those with AppVeyor to use the `handle.exe`
    tool to try to debug what processes have a handle to the file open.
    
    This won't be guaranteed to actually help us, but hopefully it'll diagnose
    something at some point?
    
    [advice]: http://help.appveyor.com/discussions/questions/2898
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.001; rss: 92MB	stability index
time: 0.002; rss: 92MB	stability checking
time: 0.011; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.122; rss: 112MB	item-types checking
time: 0.297; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.040; rss: 149MB	const checking
time: 0.007; rss: 149MB	privacy checking
time: 0.002; rss: 149MB	intrinsic checking
time: 0.001; rss: 149MB	effect checking
time: 0.006; rss: 149MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.016; rss: 150MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.032; rss: 172MB	MIR cleanup and validation
time: 0.045; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.028; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.003; rss: 173MB	SimplifyCfg
  time: 0.007; rss: 173MB	EraseRegions
  time: 0.001; rss: 173MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.044; rss: 175MB	MIR optimisations
  time: 0.009; rss: 177MB	write metadata
  time: 0.086; rss: 183MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 311MB	internalize symbols
time: 1.696; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.108; rss: 319MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 252MB	llvm function passes [2]
time: 0.000; rss: 252MB	llvm module passes [2]
time: 0.001; rss: 252MB	llvm function passes [0]
time: 0.000; rss: 252MB	llvm module passes [0]
time: 0.002; rss: 252MB	llvm function passes [1]
time: 0.001; rss: 252MB	llvm module passes [1]
time: 0.001; rss: 265MB	llvm function passes [6]
time: 0.000; rss: 265MB	llvm module passes [6]
time: 0.002; rss: 265MB	llvm function passes [9]
time: 0.001; rss: 265MB	llvm module passes [9]
time: 0.019; rss: 275MB	llvm function passes [4]
time: 0.008; rss: 275MB	llvm function passes [7]
time: 0.020; rss: 275MB	llvm function passes [14]
time: 0.003; rss: 275MB	llvm module passes [7]
time: 0.019; rss: 275MB	llvm function passes [12]
time: 0.017; rss: 275MB	llvm function passes [5]
time: 0.003; rss: 275MB	llvm module passes [12]
time: 0.002; rss: 275MB	llvm module passes [5]
time: 0.037; rss: 277MB	llvm function passes [3]
time: 0.040; rss: 277MB	llvm function passes [11]
time: 0.025; rss: 277MB	llvm function passes [8]
time: 0.049; rss: 277MB	codegen passes [2]
time: 0.045; rss: 282MB	codegen passes [6]
time: 0.002; rss: 282MB	llvm function passes [6]
time: 0.004; rss: 282MB	llvm function passes [2]
time: 0.001; rss: 282MB	llvm module passes [6]
time: 0.045; rss: 282MB	codegen passes [9]
time: 0.002; rss: 282MB	llvm module passes [2]
time: 0.042; rss: 284MB	llvm function passes [10]
time: 0.062; rss: 288MB	codegen passes [1]
time: 0.020; rss: 288MB	llvm module passes [8]
time: 0.013; rss: 288MB	llvm module passes [10]
time: 0.073; rss: 291MB	codegen passes [0]
time: 0.003; rss: 291MB	llvm function passes [0]
time: 0.001; rss: 291MB	llvm module passes [0]
time: 0.029; rss: 291MB	llvm function passes [20]
time: 0.031; rss: 301MB	llvm function passes [9]
time: 0.009; rss: 301MB	llvm module passes [20]
time: 0.000; rss: 303MB	codegen passes [16]
time: 0.037; rss: 319MB	llvm module passes [9]
time: 0.078; rss: 319MB	codegen passes [5]
time: 0.060; rss: 319MB	llvm function passes [1]
time: 0.077; rss: 321MB	codegen passes [2]
time: 0.018; rss: 326MB	llvm module passes [1]
time: 0.089; rss: 326MB	codegen passes [6]
time: 0.085; rss: 326MB	codegen passes [0]
time: 0.112; rss: 335MB	llvm function passes [15]
time: 0.163; rss: 333MB	codegen passes [7]
time: 0.208; rss: 331MB	llvm module passes [4]
time: 0.220; rss: 335MB	llvm module passes [14]
time: 0.120; rss: 333MB	codegen passes [20]
time: 0.198; rss: 335MB	codegen passes [12]
time: 0.330; rss: 363MB	codegen passes [8]
time: 0.434; rss: 362MB	llvm module passes [11]
time: 0.318; rss: 366MB	llvm module passes [15]
time: 0.560; rss: 376MB	llvm module passes [3]
time: 0.508; rss: 390MB	codegen passes [10]
time: 0.406; rss: 387MB	codegen passes [14]
time: 0.431; rss: 373MB	codegen passes [4]
time: 0.501; rss: 362MB	codegen passes [9]
time: 0.754; rss: 380MB	codegen passes [1]
time: 0.636; rss: 400MB	codegen passes [11]
time: 0.764; rss: 377MB	codegen passes [15]
time: 0.763; rss: 356MB	codegen passes [3]
time: 1.479; rss: 354MB	LLVM passes
time: 0.000; rss: 354MB	serialize work products
time: 0.207; rss: 167MB	linking
done

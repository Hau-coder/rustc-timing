commit 17f1fba353d2545ee54589350a83681dc3156e70
Merge: 0807104 babb7da
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 07:05:07 2016 +0000

    Auto merge of #38589 - aidanhs:aphs-stage0-rustdoc-test, r=alexcrichton
    
    Teach `rustdoc --test` about `--sysroot`, pass it when testing rust
    
    This permits rustdoc tests to work in stage0.
    
    Logical continuation of #36586.
    
    Snippet from https://github.com/rust-lang/rust/issues/38575#issuecomment-269090724:
    
    > it should actually be possible to run all the libstd tests immediately after creating std of stage0-out - there's no reason to build librustc at all if you've just made a change to (for example) libcollections, `./x.py test src/libcollections --stage 0 -v --incremental` should just work
    
    This PR makes it so (or appears to in my testing).
    
    r? @alexcrichton
rustc: ./regex-0.1.80@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.010; rss: 89MB	name resolution
time: 0.008; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 97MB	type collecting
time: 0.001; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 103MB	coherence checking
time: 0.021; rss: 104MB	wf checking
time: 0.123; rss: 112MB	item-types checking
time: 0.298; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.008; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.005; rss: 151MB	liveness checking
time: 0.017; rss: 151MB	rvalue checking
time: 0.045; rss: 172MB	MIR dump
  time: 0.006; rss: 173MB	SimplifyCfg
  time: 0.010; rss: 173MB	QualifyAndPromoteConstants
  time: 0.013; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.003; rss: 173MB	SimplifyCfg
time: 0.033; rss: 173MB	MIR cleanup and validation
time: 0.046; rss: 173MB	borrow checking
time: 0.001; rss: 173MB	reachability checking
time: 0.004; rss: 173MB	death checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.029; rss: 174MB	lint checking
time: 0.000; rss: 174MB	resolving dependency formats
  time: 0.000; rss: 174MB	NoLandingPads
  time: 0.003; rss: 174MB	SimplifyCfg
  time: 0.007; rss: 174MB	EraseRegions
  time: 0.001; rss: 174MB	AddCallGuards
  time: 0.017; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.003; rss: 176MB	InstCombine
  time: 0.002; rss: 176MB	Deaggregator
  time: 0.000; rss: 176MB	CopyPropagation
  time: 0.004; rss: 176MB	SimplifyLocals
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.044; rss: 176MB	MIR optimisations
  time: 0.009; rss: 178MB	write metadata
  time: 0.086; rss: 185MB	translation item collection
  time: 0.014; rss: 185MB	codegen unit partitioning
  time: 0.013; rss: 312MB	internalize symbols
time: 1.693; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.118; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 256MB	llvm function passes [0]
time: 0.000; rss: 256MB	llvm module passes [0]
time: 0.002; rss: 256MB	llvm function passes [2]
time: 0.000; rss: 258MB	llvm module passes [2]
time: 0.003; rss: 258MB	llvm function passes [1]
time: 0.001; rss: 258MB	llvm function passes [17]
time: 0.000; rss: 258MB	llvm module passes [17]
time: 0.001; rss: 258MB	llvm module passes [1]
time: 0.006; rss: 262MB	codegen passes [0]
time: 0.014; rss: 264MB	llvm function passes [5]
time: 0.007; rss: 264MB	llvm function passes [16]
time: 0.020; rss: 264MB	llvm function passes [4]
time: 0.003; rss: 264MB	llvm module passes [16]
time: 0.018; rss: 268MB	codegen passes [17]
time: 0.002; rss: 268MB	llvm function passes [14]
time: 0.001; rss: 268MB	llvm module passes [14]
time: 0.021; rss: 268MB	codegen passes [2]
time: 0.008; rss: 268MB	llvm function passes [18]
time: 0.005; rss: 271MB	llvm function passes [2]
time: 0.002; rss: 271MB	llvm module passes [2]
time: 0.031; rss: 277MB	llvm function passes [0]
time: 0.016; rss: 277MB	llvm function passes [17]
time: 0.007; rss: 281MB	llvm module passes [17]
time: 0.041; rss: 283MB	codegen passes [1]
time: 0.002; rss: 285MB	llvm function passes [12]
time: 0.001; rss: 287MB	llvm module passes [12]
time: 0.003; rss: 296MB	llvm function passes [10]
time: 0.000; rss: 298MB	codegen passes [8]
time: 0.009; rss: 300MB	llvm module passes [10]
time: 0.048; rss: 302MB	codegen passes [14]
time: 0.076; rss: 302MB	llvm function passes [3]
time: 0.032; rss: 302MB	llvm function passes [11]
time: 0.002; rss: 302MB	llvm module passes [11]
time: 0.048; rss: 305MB	llvm function passes [1]
time: 0.072; rss: 308MB	llvm module passes [18]
time: 0.068; rss: 311MB	llvm function passes [20]
time: 0.069; rss: 311MB	codegen passes [2]
time: 0.101; rss: 311MB	llvm function passes [19]
time: 0.079; rss: 309MB	llvm function passes [9]
time: 0.084; rss: 311MB	llvm function passes [13]
time: 0.122; rss: 313MB	llvm module passes [4]
time: 0.129; rss: 313MB	llvm module passes [5]
time: 0.018; rss: 315MB	llvm module passes [9]
time: 0.024; rss: 320MB	llvm module passes [19]
time: 0.025; rss: 324MB	llvm module passes [13]
time: 0.079; rss: 324MB	codegen passes [12]
time: 0.059; rss: 326MB	codegen passes [10]
time: 0.097; rss: 330MB	llvm module passes [20]
time: 0.099; rss: 340MB	codegen passes [11]
time: 0.143; rss: 337MB	codegen passes [16]
time: 0.162; rss: 348MB	codegen passes [18]
time: 0.128; rss: 348MB	codegen passes [20]
time: 0.401; rss: 362MB	llvm module passes [0]
time: 0.387; rss: 359MB	codegen passes [17]
time: 0.373; rss: 358MB	llvm module passes [1]
time: 0.467; rss: 364MB	llvm module passes [3]
time: 0.433; rss: 379MB	codegen passes [4]
time: 0.471; rss: 372MB	codegen passes [19]
time: 0.475; rss: 366MB	codegen passes [5]
time: 0.537; rss: 365MB	codegen passes [13]
time: 0.668; rss: 369MB	codegen passes [9]
time: 0.655; rss: 394MB	codegen passes [0]
time: 0.710; rss: 374MB	codegen passes [3]
time: 0.860; rss: 352MB	codegen passes [1]
time: 1.457; rss: 351MB	LLVM passes
time: 0.000; rss: 351MB	serialize work products
time: 0.206; rss: 167MB	linking
done

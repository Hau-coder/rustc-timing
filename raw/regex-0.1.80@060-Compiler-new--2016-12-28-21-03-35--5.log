commit 4ecc85beb339aa8089d936e450b0d800bdf580ae
Merge: 02b22ec ee0ea95
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 20:19:39 2016 +0000

    Auto merge of #38449 - eddyb:lazy-10, r=nikomatsakis
    
    [10/n] Split constants and functions' arguments into disjoint bodies.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/38053) | [next]()) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Finishes the signature-body split started in #37918, namely:
    * `trait` items are separated just like `impl` items were, for uniformity, closing #37712
    * `static`s, `const`s (including associated ones), `enum` discriminants and array lengths get bodies
      * even the count in "repeat expressions", i.e. `n` in `[x; n]`, which fixes #24414
    * arguments' patterns are moved to the bodies, with the types staying in `FnDecl`
      * `&self` now desugars to `self: &Self` instead of `self: &_` (similarly for other `self` forms)
      * `astconv`'s and metadata's (for rustdoc) informative uses are explicitly ignored for the purposes of the dep graph. this could be fixed in the future by hashing the exact information being extracted about the arguments as opposed to generating a dependency on *the whole body*
rustc: ./regex-0.1.80@060-Compiler-new
git apply 060-Compiler-new.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..629328a 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -54,6 +54,7 @@ impl Compiler {
     ///
     /// Various options can be set before calling `compile` on an expression.
     pub fn new() -> Self {
+        {}
         Compiler {
             insts: vec![],
             compiled: Program::new(),
@@ -137,6 +138,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10694
Pre-expansion node count:  55408
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.043; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86881
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 94MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheKey[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::MaybeInst[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[12]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 93MB	stability checking
time: 0.012; rss: 96MB	type collecting
time: 0.001; rss: 96MB	variance inference
time: 0.001; rss: 96MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.123; rss: 111MB	item-types checking
time: 0.301; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.039; rss: 149MB	const checking
time: 0.007; rss: 149MB	privacy checking
time: 0.002; rss: 149MB	intrinsic checking
time: 0.001; rss: 149MB	effect checking
time: 0.006; rss: 149MB	match checking
time: 0.004; rss: 150MB	liveness checking
time: 0.016; rss: 150MB	rvalue checking
time: 0.043; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	QualifyAndPromoteConstants
  time: 0.012; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.031; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.029; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.008; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.043; rss: 175MB	MIR optimisations
  time: 0.009; rss: 177MB	write metadata
  time: 0.085; rss: 182MB	translation item collection
  time: 0.014; rss: 186MB	codegen unit partitioning
  time: 0.012; rss: 311MB	internalize symbols
time: 1.668; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.108; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 257MB	llvm function passes [3]
time: 0.000; rss: 257MB	llvm module passes [3]
time: 0.001; rss: 259MB	llvm function passes [4]
time: 0.003; rss: 261MB	llvm function passes [0]
time: 0.000; rss: 261MB	llvm module passes [0]
time: 0.001; rss: 261MB	llvm module passes [4]
time: 0.004; rss: 261MB	llvm function passes [1]
time: 0.001; rss: 261MB	llvm module passes [1]
time: 0.007; rss: 265MB	codegen passes [3]
time: 0.008; rss: 265MB	llvm function passes [8]
time: 0.003; rss: 265MB	llvm module passes [8]
time: 0.007; rss: 265MB	llvm function passes [3]
time: 0.019; rss: 270MB	llvm function passes [6]
time: 0.021; rss: 272MB	llvm function passes [5]
time: 0.015; rss: 270MB	codegen passes [4]
time: 0.021; rss: 276MB	codegen passes [0]
time: 0.019; rss: 282MB	llvm module passes [3]
time: 0.002; rss: 284MB	llvm function passes [14]
time: 0.001; rss: 284MB	llvm module passes [14]
time: 0.043; rss: 289MB	llvm function passes [2]
time: 0.040; rss: 295MB	codegen passes [1]
time: 0.024; rss: 295MB	llvm function passes [0]
time: 0.028; rss: 295MB	llvm function passes [4]
time: 0.000; rss: 297MB	codegen passes [17]
time: 0.031; rss: 297MB	llvm function passes [9]
time: 0.003; rss: 297MB	llvm function passes [1]
time: 0.001; rss: 297MB	llvm module passes [9]
time: 0.034; rss: 297MB	llvm function passes [7]
time: 0.001; rss: 297MB	llvm module passes [1]
time: 0.033; rss: 297MB	llvm function passes [10]
time: 0.002; rss: 297MB	llvm module passes [10]
time: 0.007; rss: 297MB	llvm module passes [4]
time: 0.012; rss: 299MB	llvm module passes [0]
time: 0.032; rss: 299MB	llvm function passes [12]
time: 0.002; rss: 299MB	llvm module passes [12]
time: 0.065; rss: 315MB	llvm function passes [11]
time: 0.067; rss: 317MB	codegen passes [1]
time: 0.105; rss: 317MB	llvm module passes [5]
time: 0.053; rss: 321MB	llvm module passes [11]
time: 0.110; rss: 323MB	llvm function passes [15]
time: 0.076; rss: 323MB	codegen passes [9]
time: 0.136; rss: 325MB	llvm function passes [13]
time: 0.134; rss: 325MB	llvm function passes [16]
time: 0.043; rss: 328MB	llvm module passes [15]
time: 0.125; rss: 330MB	codegen passes [14]
time: 0.021; rss: 334MB	llvm module passes [16]
time: 0.091; rss: 344MB	codegen passes [12]
time: 0.211; rss: 351MB	codegen passes [8]
time: 0.127; rss: 351MB	codegen passes [10]
time: 0.198; rss: 352MB	codegen passes [3]
time: 0.232; rss: 352MB	llvm module passes [6]
time: 0.156; rss: 351MB	codegen passes [11]
time: 0.366; rss: 369MB	codegen passes [4]
time: 0.441; rss: 367MB	llvm module passes [7]
time: 0.380; rss: 378MB	llvm module passes [13]
time: 0.541; rss: 375MB	llvm module passes [2]
time: 0.500; rss: 371MB	codegen passes [0]
time: 0.353; rss: 375MB	codegen passes [6]
time: 0.454; rss: 365MB	codegen passes [5]
time: 0.469; rss: 359MB	codegen passes [15]
time: 0.709; rss: 363MB	codegen passes [16]
time: 0.766; rss: 399MB	codegen passes [2]
time: 0.914; rss: 382MB	codegen passes [7]
time: 1.035; rss: 349MB	codegen passes [13]
time: 1.707; rss: 348MB	LLVM passes
time: 0.000; rss: 348MB	serialize work products
time: 0.208; rss: 168MB	linking
done

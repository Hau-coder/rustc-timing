commit 4ecc85beb339aa8089d936e450b0d800bdf580ae
Merge: 02b22ec ee0ea95
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 20:19:39 2016 +0000

    Auto merge of #38449 - eddyb:lazy-10, r=nikomatsakis
    
    [10/n] Split constants and functions' arguments into disjoint bodies.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/38053) | [next]()) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Finishes the signature-body split started in #37918, namely:
    * `trait` items are separated just like `impl` items were, for uniformity, closing #37712
    * `static`s, `const`s (including associated ones), `enum` discriminants and array lengths get bodies
      * even the count in "repeat expressions", i.e. `n` in `[x; n]`, which fixes #24414
    * arguments' patterns are moved to the bodies, with the types staying in `FnDecl`
      * `&self` now desugars to `self: &Self` instead of `self: &_` (similarly for other `self` forms)
      * `astconv`'s and metadata's (for rustdoc) informative uses are explicitly ignored for the purposes of the dep graph. this could be fixed in the future by hashing the exact information being extracted about the arguments as opposed to generating a dependency on *the whole body*
rustc: ./syntex-0.42.2@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.241; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.075; rss: 161MB	name resolution
time: 0.059; rss: 195MB	lowering ast -> hir
time: 0.009; rss: 187MB	indexing hir
time: 0.006; rss: 187MB	attribute checking
time: 0.002; rss: 150MB	language item collection
time: 0.011; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.047; rss: 169MB	region resolution
time: 0.007; rss: 169MB	loop checking
time: 0.002; rss: 169MB	static item recursion checking
time: 0.380; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.008; rss: 171MB	stability index
time: 0.016; rss: 171MB	stability checking
time: 0.049; rss: 176MB	type collecting
time: 0.001; rss: 176MB	variance inference
time: 0.002; rss: 176MB	impl wf inference
time: 0.017; rss: 178MB	coherence checking
time: 0.082; rss: 180MB	wf checking
time: 0.184; rss: 184MB	item-types checking
time: 3.363; rss: 236MB	item-bodies checking
time: 0.000; rss: 236MB	drop-impl checking
time: 0.210; rss: 245MB	const checking
time: 0.056; rss: 245MB	privacy checking
time: 0.016; rss: 245MB	intrinsic checking
time: 0.014; rss: 245MB	effect checking
time: 0.047; rss: 245MB	match checking
time: 0.046; rss: 252MB	liveness checking
time: 0.167; rss: 252MB	rvalue checking
time: 0.363; rss: 442MB	MIR dump
  time: 0.056; rss: 443MB	SimplifyCfg
  time: 0.073; rss: 443MB	QualifyAndPromoteConstants
  time: 0.106; rss: 443MB	TypeckMir
  time: 0.004; rss: 443MB	SimplifyBranches
  time: 0.030; rss: 444MB	SimplifyCfg
time: 0.269; rss: 444MB	MIR cleanup and validation
time: 0.464; rss: 444MB	borrow checking
time: 0.024; rss: 444MB	reachability checking
time: 0.038; rss: 444MB	death checking
time: 0.000; rss: 444MB	unused lib feature checking
time: 0.178; rss: 444MB	lint checking
time: 0.000; rss: 444MB	resolving dependency formats
  time: 0.003; rss: 444MB	NoLandingPads
  time: 0.026; rss: 444MB	SimplifyCfg
  time: 0.064; rss: 453MB	EraseRegions
  time: 0.010; rss: 453MB	AddCallGuards
  time: 0.269; rss: 475MB	ElaborateDrops
  time: 0.003; rss: 475MB	NoLandingPads
  time: 0.052; rss: 475MB	SimplifyCfg
  time: 0.028; rss: 474MB	InstCombine
  time: 0.012; rss: 474MB	Deaggregator
  time: 0.002; rss: 474MB	CopyPropagation
  time: 0.034; rss: 474MB	SimplifyLocals
  time: 0.009; rss: 474MB	AddCallGuards
  time: 0.002; rss: 474MB	PreTrans
time: 0.514; rss: 474MB	MIR optimisations
  time: 0.065; rss: 481MB	write metadata
  time: 0.383; rss: 495MB	translation item collection
  time: 0.061; rss: 499MB	codegen unit partitioning
  time: 0.046; rss: 757MB	internalize symbols
time: 4.513; rss: 757MB	translation
time: 0.000; rss: 757MB	assert dep graph
time: 0.000; rss: 757MB	serialize dep graph
  time: 0.528; rss: 428MB	llvm function passes [0]
  time: 0.306; rss: 434MB	llvm module passes [0]
  time: 10.821; rss: 429MB	codegen passes [0]
  time: 0.000; rss: 429MB	codegen passes [0]
time: 12.436; rss: 429MB	LLVM passes
time: 0.000; rss: 429MB	serialize work products
time: 0.342; rss: 118MB	linking
done

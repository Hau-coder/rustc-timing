commit 17f1fba353d2545ee54589350a83681dc3156e70
Merge: 0807104 babb7da
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 07:05:07 2016 +0000

    Auto merge of #38589 - aidanhs:aphs-stage0-rustdoc-test, r=alexcrichton
    
    Teach `rustdoc --test` about `--sysroot`, pass it when testing rust
    
    This permits rustdoc tests to work in stage0.
    
    Logical continuation of #36586.
    
    Snippet from https://github.com/rust-lang/rust/issues/38575#issuecomment-269090724:
    
    > it should actually be possible to run all the libstd tests immediately after creating std of stage0-out - there's no reason to build librustc at all if you've just made a change to (for example) libcollections, `./x.py test src/libcollections --stage 0 -v --incremental` should just work
    
    This PR makes it so (or appears to in my testing).
    
    r? @alexcrichton
rustc: ./syntex-0.42.2@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.287; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.007; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 146MB	complete gated feature checking
time: 0.033; rss: 146MB	early lint checks
time: 0.008; rss: 146MB	AST validation
time: 0.099; rss: 161MB	name resolution
time: 0.069; rss: 194MB	lowering ast -> hir
time: 0.010; rss: 187MB	indexing hir
time: 0.006; rss: 187MB	attribute checking
time: 0.002; rss: 149MB	language item collection
time: 0.011; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.047; rss: 169MB	region resolution
time: 0.007; rss: 169MB	loop checking
time: 0.002; rss: 169MB	static item recursion checking
time: 0.380; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.008; rss: 171MB	stability index
time: 0.017; rss: 171MB	stability checking
time: 0.047; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 176MB	impl wf inference
time: 0.017; rss: 177MB	coherence checking
time: 0.083; rss: 180MB	wf checking
time: 0.183; rss: 184MB	item-types checking
time: 3.517; rss: 235MB	item-bodies checking
time: 0.000; rss: 235MB	drop-impl checking
time: 0.212; rss: 244MB	const checking
time: 0.056; rss: 245MB	privacy checking
time: 0.016; rss: 245MB	intrinsic checking
time: 0.014; rss: 245MB	effect checking
time: 0.048; rss: 245MB	match checking
time: 0.046; rss: 251MB	liveness checking
time: 0.169; rss: 251MB	rvalue checking
time: 0.357; rss: 441MB	MIR dump
  time: 0.056; rss: 443MB	SimplifyCfg
  time: 0.073; rss: 443MB	QualifyAndPromoteConstants
  time: 0.106; rss: 443MB	TypeckMir
  time: 0.004; rss: 443MB	SimplifyBranches
  time: 0.030; rss: 443MB	SimplifyCfg
time: 0.269; rss: 443MB	MIR cleanup and validation
time: 0.465; rss: 443MB	borrow checking
time: 0.024; rss: 443MB	reachability checking
time: 0.038; rss: 443MB	death checking
time: 0.000; rss: 443MB	unused lib feature checking
time: 0.174; rss: 443MB	lint checking
time: 0.000; rss: 443MB	resolving dependency formats
  time: 0.003; rss: 443MB	NoLandingPads
  time: 0.026; rss: 443MB	SimplifyCfg
  time: 0.064; rss: 452MB	EraseRegions
  time: 0.011; rss: 452MB	AddCallGuards
  time: 0.270; rss: 474MB	ElaborateDrops
  time: 0.003; rss: 474MB	NoLandingPads
  time: 0.052; rss: 474MB	SimplifyCfg
  time: 0.028; rss: 474MB	InstCombine
  time: 0.012; rss: 474MB	Deaggregator
  time: 0.002; rss: 474MB	CopyPropagation
  time: 0.034; rss: 474MB	SimplifyLocals
  time: 0.009; rss: 474MB	AddCallGuards
  time: 0.002; rss: 474MB	PreTrans
time: 0.515; rss: 474MB	MIR optimisations
  time: 0.065; rss: 482MB	write metadata
  time: 0.376; rss: 495MB	translation item collection
  time: 0.057; rss: 497MB	codegen unit partitioning
  time: 0.046; rss: 756MB	internalize symbols
time: 4.677; rss: 756MB	translation
time: 0.000; rss: 756MB	assert dep graph
time: 0.000; rss: 756MB	serialize dep graph
  time: 0.528; rss: 428MB	llvm function passes [0]
  time: 0.304; rss: 434MB	llvm module passes [0]
  time: 10.432; rss: 429MB	codegen passes [0]
  time: 0.000; rss: 429MB	codegen passes [0]
time: 12.025; rss: 429MB	LLVM passes
time: 0.000; rss: 429MB	serialize work products
time: 0.343; rss: 118MB	linking
done

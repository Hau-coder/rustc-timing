commit 4ecc85beb339aa8089d936e450b0d800bdf580ae
Merge: 02b22ec ee0ea95
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 28 20:19:39 2016 +0000

    Auto merge of #38449 - eddyb:lazy-10, r=nikomatsakis
    
    [10/n] Split constants and functions' arguments into disjoint bodies.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/38053) | [next]()) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Finishes the signature-body split started in #37918, namely:
    * `trait` items are separated just like `impl` items were, for uniformity, closing #37712
    * `static`s, `const`s (including associated ones), `enum` discriminants and array lengths get bodies
      * even the count in "repeat expressions", i.e. `n` in `[x; n]`, which fixes #24414
    * arguments' patterns are moved to the bodies, with the types staying in `FnDecl`
      * `&self` now desugars to `self: &Self` instead of `self: &_` (similarly for other `self` forms)
      * `astconv`'s and metadata's (for rustdoc) informative uses are explicitly ignored for the purposes of the dep graph. this could be fixed in the future by hashing the exact information being extracted about the arguments as opposed to generating a dependency on *the whole body*
rustc: ./regex-0.1.80@050-expand
git apply 050-expand.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 54MB	parsing
Lines of code:             10693
Pre-expansion node count:  55405
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.044; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 86878
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.008; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.000; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.034; rss: 93MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::expand[0]::find_cap_ref[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because HirBody("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::expand[0]::expand[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Krate changed or was removed
time: 0.021; rss: 93MB	load_dep_graph
time: 0.002; rss: 93MB	stability index
time: 0.002; rss: 94MB	stability checking
time: 0.012; rss: 96MB	type collecting
time: 0.001; rss: 96MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.014; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.122; rss: 111MB	item-types checking
time: 0.298; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.040; rss: 150MB	const checking
time: 0.007; rss: 150MB	privacy checking
time: 0.002; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.006; rss: 150MB	match checking
time: 0.004; rss: 151MB	liveness checking
time: 0.016; rss: 151MB	rvalue checking
time: 0.044; rss: 172MB	MIR dump
  time: 0.006; rss: 172MB	SimplifyCfg
  time: 0.010; rss: 172MB	QualifyAndPromoteConstants
  time: 0.013; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.003; rss: 172MB	SimplifyCfg
time: 0.032; rss: 172MB	MIR cleanup and validation
time: 0.046; rss: 172MB	borrow checking
time: 0.001; rss: 172MB	reachability checking
time: 0.004; rss: 172MB	death checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.029; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.003; rss: 172MB	SimplifyCfg
  time: 0.008; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.017; rss: 175MB	ElaborateDrops
  time: 0.000; rss: 175MB	NoLandingPads
  time: 0.004; rss: 175MB	SimplifyCfg
  time: 0.003; rss: 175MB	InstCombine
  time: 0.002; rss: 175MB	Deaggregator
  time: 0.000; rss: 175MB	CopyPropagation
  time: 0.004; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.044; rss: 175MB	MIR optimisations
  time: 0.009; rss: 177MB	write metadata
  time: 0.087; rss: 182MB	translation item collection
  time: 0.015; rss: 187MB	codegen unit partitioning
  time: 0.013; rss: 311MB	internalize symbols
time: 1.707; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.122; rss: 320MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 259MB	llvm function passes [5]
time: 0.000; rss: 259MB	llvm module passes [5]
time: 0.001; rss: 259MB	llvm function passes [6]
time: 0.002; rss: 259MB	llvm function passes [1]
time: 0.004; rss: 259MB	llvm function passes [0]
time: 0.003; rss: 262MB	llvm module passes [1]
time: 0.004; rss: 264MB	llvm module passes [6]
time: 0.010; rss: 268MB	llvm module passes [0]
time: 0.008; rss: 271MB	codegen passes [5]
time: 0.009; rss: 271MB	llvm function passes [8]
time: 0.015; rss: 271MB	llvm function passes [3]
time: 0.003; rss: 273MB	llvm module passes [8]
time: 0.018; rss: 273MB	llvm function passes [2]
time: 0.011; rss: 273MB	llvm function passes [10]
time: 0.006; rss: 273MB	llvm function passes [5]
time: 0.001; rss: 273MB	llvm module passes [5]
time: 0.030; rss: 277MB	llvm function passes [7]
time: 0.020; rss: 285MB	llvm module passes [10]
time: 0.041; rss: 287MB	llvm function passes [4]
time: 0.002; rss: 290MB	llvm function passes [15]
time: 0.038; rss: 294MB	codegen passes [1]
time: 0.041; rss: 296MB	codegen passes [6]
time: 0.000; rss: 296MB	codegen passes [6]
time: 0.003; rss: 296MB	llvm function passes [18]
time: 0.016; rss: 279MB	llvm function passes [9]
time: 0.007; rss: 300MB	llvm module passes [9]
time: 0.017; rss: 300MB	llvm module passes [15]
time: 0.041; rss: 301MB	llvm function passes [11]
time: 0.041; rss: 301MB	codegen passes [5]
time: 0.002; rss: 299MB	llvm module passes [11]
time: 0.017; rss: 299MB	llvm module passes [18]
time: 0.053; rss: 305MB	llvm function passes [13]
time: 0.004; rss: 285MB	llvm function passes [14]
time: 0.002; rss: 307MB	llvm module passes [14]
time: 0.065; rss: 322MB	llvm function passes [1]
time: 0.091; rss: 323MB	codegen passes [0]
time: 0.107; rss: 319MB	llvm module passes [3]
time: 0.106; rss: 319MB	llvm module passes [2]
time: 0.091; rss: 321MB	llvm function passes [17]
time: 0.034; rss: 320MB	llvm module passes [1]
time: 0.065; rss: 320MB	llvm module passes [13]
time: 0.132; rss: 326MB	llvm function passes [16]
time: 0.148; rss: 331MB	llvm function passes [12]
time: 0.043; rss: 331MB	llvm module passes [17]
time: 0.101; rss: 335MB	codegen passes [18]
time: 0.031; rss: 337MB	llvm module passes [12]
time: 0.162; rss: 343MB	codegen passes [10]
time: 0.112; rss: 343MB	codegen passes [15]
time: 0.121; rss: 340MB	codegen passes [14]
time: 0.144; rss: 339MB	codegen passes [11]
time: 0.215; rss: 350MB	codegen passes [8]
time: 0.138; rss: 351MB	codegen passes [13]
time: 0.390; rss: 368MB	llvm module passes [7]
time: 0.352; rss: 373MB	codegen passes [9]
time: 0.352; rss: 366MB	llvm module passes [16]
time: 0.579; rss: 388MB	llvm module passes [4]
time: 0.397; rss: 381MB	codegen passes [2]
time: 0.485; rss: 382MB	codegen passes [3]
time: 0.436; rss: 376MB	codegen passes [12]
time: 0.511; rss: 367MB	codegen passes [17]
time: 0.729; rss: 380MB	codegen passes [1]
time: 0.648; rss: 399MB	codegen passes [7]
time: 0.758; rss: 360MB	codegen passes [16]
time: 0.678; rss: 353MB	codegen passes [4]
time: 1.402; rss: 351MB	LLVM passes
time: 0.000; rss: 351MB	serialize work products
time: 0.206; rss: 168MB	linking
done

commit 7e38a89a7b970181be083691504825a23e6b0a0f
Merge: 373efe8 5148918
Author: bors <bors@rust-lang.org>
Date:   Fri Jan 6 23:49:57 2017 +0000

    Auto merge of #38835 - alexcrichton:less-overlapped, r=brson
    
    std: Don't pass overlapped handles to processes
    
    This commit fixes a mistake introduced in #31618 where overlapped handles were
    leaked to child processes on Windows. On Windows once a handle is in overlapped
    mode it should always have I/O executed with an instance of `OVERLAPPED`. Most
    child processes, however, are not prepared to have their stdio handles in
    overlapped mode as they don't use `OVERLAPPED` on reads/writes to the handle.
    
    Now we haven't had any odd behavior in Rust up to this point, and the original
    bug was introduced almost a year ago. I believe this is because it turns out
    that if you *don't* pass an `OVERLAPPED` then the system will [supply one for
    you][link]. In this case everything will go awry if you concurrently operate on
    the handle. In Rust, however, the stdio handles are always locked, and there's
    no way to not use them unlocked in libstd. Due to that change we've always had
    synchronized access to these handles, which means that Rust programs typically
    "just work".
    
    Conversely, though, this commit fixes the test case included, which exhibits
    behavior that other programs Rust spawns may attempt to execute. Namely, the
    stdio handles may be concurrently used and having them in overlapped mode wreaks
    havoc.
    
    [link]: https://blogs.msdn.microsoft.com/oldnewthing/20121012-00/?p=6343
    
    Closes #38811
rustc 1.15.0-nightly (daf8c1dfc 2016-12-05)
-rwxr-xr-x 1 root root 9432 Dec  6 15:39 /usr/local/bin/rustc
rustc: ./regex-0.1.80@050-expand
git apply 050-expand.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
makefile:34: recipe for target 'all@050-expand' failed
done

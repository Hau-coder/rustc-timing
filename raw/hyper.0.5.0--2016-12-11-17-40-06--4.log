commit 3db197aa9d343c7974b06a9b18ae5f78d5c64637
Merge: 6d5ec58 fbc3f11
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 11 21:19:34 2016 +0000

    Auto merge of #38265 - bluss:mir-deaggregator-loop, r=nagisa
    
    Reinstate while loop in deaggregator pass
    
    A previous commit must have removed the `while let` loop here by
    mistake; for each basic block, it should find and deaggregate multiple
    statements in their index order, and the `curr` index tracks the
    progress through the block.
    
    This fixes both the case of deaggregating statements in separate
    basic blocks (preserving `curr` could prevent that) as well
    as multiple times in the same block (missing loop prevented that).
    
    The loop was lost in commit bda46c21fe30377b9587b584c64ffe99da6c14ce.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.077; rss: 90MB	expansion
time: 0.000; rss: 90MB	maybe building test harness
time: 0.001; rss: 90MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 90MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 90MB	complete gated feature checking
time: 0.003; rss: 90MB	early lint checks
time: 0.001; rss: 90MB	AST validation
time: 0.013; rss: 94MB	name resolution
time: 0.013; rss: 97MB	lowering ast -> hir
time: 0.002; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.013; rss: 93MB	region resolution
time: 0.001; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.052; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.001; rss: 94MB	stability index
time: 0.003; rss: 94MB	stability checking
time: 0.014; rss: 96MB	type collecting
time: 0.000; rss: 96MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 98MB	coherence checking
time: 0.037; rss: 99MB	wf checking
time: 0.024; rss: 99MB	item-types checking
time: 0.317; rss: 108MB	item-bodies checking
time: 0.000; rss: 108MB	drop-impl checking
time: 0.052; rss: 109MB	const checking
time: 0.010; rss: 109MB	privacy checking
time: 0.003; rss: 109MB	intrinsic checking
time: 0.001; rss: 109MB	effect checking
time: 0.008; rss: 109MB	match checking
time: 0.004; rss: 110MB	liveness checking
time: 0.019; rss: 110MB	rvalue checking
time: 0.060; rss: 130MB	MIR dump
  time: 0.007; rss: 131MB	SimplifyCfg
  time: 0.015; rss: 132MB	QualifyAndPromoteConstants
  time: 0.013; rss: 132MB	TypeckMir
  time: 0.001; rss: 132MB	SimplifyBranches
  time: 0.003; rss: 132MB	SimplifyCfg
time: 0.039; rss: 132MB	MIR cleanup and validation
time: 0.052; rss: 133MB	borrow checking
time: 0.003; rss: 133MB	reachability checking
time: 0.005; rss: 133MB	death checking
time: 0.000; rss: 133MB	unused lib feature checking
time: 0.036; rss: 133MB	lint checking
time: 0.000; rss: 133MB	resolving dependency formats
  time: 0.000; rss: 133MB	NoLandingPads
  time: 0.003; rss: 133MB	SimplifyCfg
  time: 0.008; rss: 133MB	EraseRegions
  time: 0.001; rss: 133MB	AddCallGuards
  time: 0.025; rss: 135MB	ElaborateDrops
  time: 0.000; rss: 135MB	NoLandingPads
  time: 0.005; rss: 135MB	SimplifyCfg
  time: 0.003; rss: 135MB	InstCombine
  time: 0.003; rss: 135MB	Deaggregator
  time: 0.000; rss: 135MB	CopyPropagation
  time: 0.004; rss: 135MB	SimplifyLocals
  time: 0.001; rss: 135MB	AddCallGuards
  time: 0.000; rss: 135MB	PreTrans
time: 0.054; rss: 135MB	MIR optimisations
  time: 0.014; rss: 138MB	write metadata
  time: 0.156; rss: 149MB	translation item collection
  time: 0.014; rss: 152MB	codegen unit partitioning
  time: 0.014; rss: 210MB	internalize symbols
time: 1.177; rss: 210MB	translation
time: 0.000; rss: 210MB	assert dep graph
time: 0.000; rss: 210MB	serialize dep graph
  time: 0.089; rss: 153MB	llvm function passes [0]
  time: 0.049; rss: 155MB	llvm module passes [0]
  time: 1.659; rss: 158MB	codegen passes [0]
  time: 0.000; rss: 157MB	codegen passes [0]
time: 1.939; rss: 157MB	LLVM passes
time: 0.000; rss: 157MB	serialize work products
time: 0.071; rss: 101MB	linking
done
